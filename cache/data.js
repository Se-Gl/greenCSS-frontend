export const posts = [{"slug":"activate-basic-usage","frontmatter":{"isBlog":false,"title":"base styles - foundations","date":"apr 06. 2022","excerpt":"greenCSS foundations - an opinionated set of base styles, structure and guidelines for greenCSS projects.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"activate","author":"severin glaser","keywords":"base style, guideline, guide, structure","classNames":"","plainText":" greenCSS is a pure css library built with scss compiled and minified for all javascript python php etc frameworks the entire code base or partial code classes can be easily imported into your project all default browser variables are disabled this allows you to decide for your own design structure and arrangement all greenCSS classes have the same structure a simple explanation of this principle can be given with the help of the `text-blue` class 1 if the text colour for an element is to be changed the class is inserted this value is the default value for all responsive display sizes  1 if the text colour for an element is to be changed on small screens only 0px 480px the class is inserted with a pre-class called sm: in the following example on small screens up to 480px width the text is displayed in purple on other screens the text is displayed in blue as the default class is set to text-blue  1 if the text colour for an element is to be changed on medium screens only 480px 768px the class is inserted with a pre-class called md: in the following example on medium screens 480px 768px width the text is displayed in purple is the screen smaller or bigger the text is displayed in blue as the default class is set to text-blue  1 if the text colour for an element is to be changed on large screens only 768px 1080px the class is inserted with a pre-class called lg: in the following example on medium screens 768px 1080px width the text is displayed in purple is the screen smaller or bigger the text is displayed in blue as the default class is set to text-blue  1 note that this method can also be used for hover focus or active classes the same principle can be used to add a pre-class the default values in the following example shows a blue text with a blue-1 text colour on hover on small screens the text becomes red and has a hover class of red-1  values & unit sizes some classes require special mathemathical values all amounts are specified within a class this allows intuitive and easy to understand writing of css classes the value and the unit are always written after the class    the properties can also have netagive values those are supplemented by the -neg class  default browser values are removed 1 greenCSS removes all of the default values like margins paddings text-decoration headings blockquotes paragraphs input states lists border etc 2 visitors who do not want to experience animations or transitions will not register motion 3 the standard font size is automatically converted to the power of 10 reduced by 62 5% in other words `1rem = 10pixel` this decision simplifies the calculation for the developer  executive summary 1 all default browser values are reset allowing you to incorporate your design and avoid annoying default settings 2 the text and the distances are calculated to the power of 10 10px = 1rem 3 all greenCSS classes have the same structure 4 the default class does not have any pre-classes p e `text-blue` 5 values and unit sizes are written as a post-class at the end of every class p e opacity-100`per` 6 greenCSS lets you conditionally apply utility classes in different states using variant modifiers such as active hover or focus statements the utility classes are entered before the default class check the adequate documentation site for the respective class p e `hover:`text-blue mnemonic aid: on hover set the colour to blue 7 you can also use variant modifiers to target media queries and make your website responsive within seconds the variant modifier classes are entered after the utility class and before the default class p e `hover:sm:`text-blue mnemonic aid: hover on small screens the text with a blue colour "}},{"slug":"activate-getting-started","frontmatter":{"isBlog":false,"title":"installation","date":"apr 10. 2022","excerpt":"get started with greenCSS. installation process - explained.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"activate","author":"severin glaser","keywords":"installation, get started, install greenCSS","classNames":"","plainText":" installation greenCSS features considerably more than 2 million vanilla css classes in this way we can ensure that all programming languages and any framework can use greenCSS we do not give unnecessary guidelines or limit you in your development process you can decide for yourself whether you want to use all css classes or only a certain part of the library furthermore it is up to you how you adjust your code base for production however how can greenCSS be used according to best practice? in this article we show you the relevant steps and give you appropriate recommendations npm javascript the simplest and fastest way to get up and running with greenCSS is to use npm this is the normal approach for all javascript frameworks like angular react or vue here you can decide for yourself how to set up your code base for the production  npm javascript production install greenCSS and its peer dependencies via npm this is the recommended approach for all javascript frameworks like angular react or vue the code will be checked and purged before it is published unused css classes are eliminated in the process as a result the code base is reduced by up to 99% which in turn results in faster loading times  1 create a `purgecss config js` in the root folder of your project  the following workflow ensures that your code base is purged before every commit 1 set up husky https: www npmjs com package husky 1 when you have successfully installed it create a new script in your `package json`:  1 add the `purgecss` script command to husky the path file is normally: husky pre-commit  1 create a ` env local` file ```env node env=development ``` 1 import the file dynamically in your `index js` react ` app js` nextjs file this code snippet allows the entire greenCSS code base to be used in the development environment while only the purged file is used in the production  cdn vanilla html php python the most straightforward approach for non-javascript frameworks is to use cdn simply add the ` link rel=stylesheet href=link-to-greenCSS-cdn ` snippet in the ` head ` tag of your index html website  "}},{"slug":"animation-css-examples","frontmatter":{"isBlog":false,"title":"css animation examples","date":"apr 11. 2022","excerpt":"create stunning css animations. greenCSS features more than 110 handcrafted animations.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"animation","author":"severin glaser","keywords":"animation, animation-duration, animation-delay, stagger animation, css animation","classNames":"","plainText":" greenCSS css class example minimum value maximum value step animation-duration number ms animation-duration-500ms animation-duration: 500ms; 100 10000 +100ms animation-delay number ms animation-delay-500ms animation-delay: 500ms; 100 10000 +100ms animation-forwards animation-forwards animation-fill-mode: forwards; animation-backwards animation-backwards animation-fill-mode: backwards; animation-both animation-both animation-fill-mode: both; animation-infinite animation-infinite animation-iteration-count: infinite; animation-normal animation-normal animation-direction: normal; animation-reverse animation-reverse animation-direction: reverse; animation-alternate animation-alternate animation-direction: alternate; animation-alternate-reverse animation-alternate-reverse animation-direction: alternate-reverse; how to work greenCSS animations all animation classes start with the `animation-` keyword except for the type of animation p e `fade-out` 1 check the css animation examples animation site you can choose from over 110 different handmade css animations 2 first choose your desired type of animation for example a fade in animation `fade-in` 3 afterwards select the desired duration for your animation for example 500ms `animation-duration-500ms` by the way 750ms is the default class and called `animate` 4 choose the animation condition if for example the animation should be played in a loop select infinite `animation-infinite` 5 on the right side you can now copy the entire animation snippet directly and insert it into your document 6 in addition and if required you could also include an animation delay  active focus and hover states greenCSS css class example active:fade-in active :fade-in:active focus:fade-in focus :fade-in:focus hover:fade-in hover :fade-in:hover greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:fade-out` to only apply the fade-out utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:fade-in md: 480px 768px md:fade-in lg: 768px 1080px lg:fade-in greenCSS media queries can also be combined with active focus and hover states for example use `sm:fade-in` to apply the fade-inindex auto utility at only small screen sizes at or below 480px or `active:md:fade-in` to apply the fade-inindex auto utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure for auto classes is as follows: ` conditional state : media query :fade-in` p e `active:md:fade-in` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:fade-in number focus:fade-in number hover:fade-in number active css animation focus css animation hover css animation active:sm:fade-in number focus:sm:fade-in number hover:sm:fade-in number active small screens css animation focus small screens css animation hover small screens css animation active:md:fade-in number focus:md:fade-in number hover:md:fade-in number active medium screens css animation focus medium screens css animation hover medium screens css animation active:lg:fade-in number focus:lg:fade-in number hover:lg:fade-in number active large screens css animation focus large screens css animation hover large screens css animation sources animation-duration https: developer mozilla org en-us docs web css animation-duration animation-delay https: developer mozilla org en-us docs web css animation-delay animation-fill-mode https: developer mozilla org en-us docs web css animation-fill-mode animation-iteration-count https: developer mozilla org en-us docs web css animation-iteration-count animation-direction https: developer mozilla org en-us docs web css animation-direction "}},{"slug":"animation-transition-delay","frontmatter":{"isBlog":false,"title":"transition delay","date":"apr 11. 2022","excerpt":"create stunning transition delays. utility classes to control the transition delay.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"animation","author":"severin glaser","keywords":"transition delay, transition-delay, transition","classNames":"","plainText":" greenCSS css class example minimum value maximum value step transition-delay number ms transition-delay-500ms transition-delay: 500ms; 100 10000 +100ms how to work transition delay use the `transition-delay number ms` utilities to set the delay of a transition class  active focus and hover states greenCSS css class example active:transition-delay number ms active :transition-delay-500ms:active transition-delay: 500ms; focus:transition-delay number ms focus :transition-delay-500ms:focus transition-delay: 500ms; hover:transition-delay number ms hover :transition-delay-500ms:hover transition-delay: 500ms; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:transition-delay-500ms` to only apply the transition-delay-500ms utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:transition-delay-500ms md: 480px 768px md:transition-delay-500ms lg: 768px 1080px lg:transition-delay-500ms greenCSS media queries can also be combined with active focus and hover states for example use `sm:transition-delay-500ms` to apply the transition-delay-500ms utility at only small screen sizes at or below 480px or `active:md:transition-delay-500ms` to apply the transition-delay-500ms utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure for auto classes is as follows: ` conditional state : media query :transition-delay-500ms` p e `active:md:transition-delay-500ms` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:transition-delay-500ms focus:transition-delay-500ms hover:transition-delay-500ms active transition delay focus transition delay hover transition delay active:sm:transition-delay-500ms focus:sm:transition-delay-500ms hover:sm:transition-delay-500ms active small screens transition delay focus small screens transition delay hover small screens transition delay active:md:transition-delay-500ms focus:md:transition-delay-500ms hover:md:transition-delay-500ms active medium screens transition delay focus medium screens transition delay hover medium screens transition delay active:lg:transition-delay-500ms focus:lg:transition-delay-500ms hover:lg:transition-delay-500ms active large screens transition delay focus large screens transition delay hover large screens transition delay sources transition-delay https: developer mozilla org en-us docs web css transition-delay "}},{"slug":"animation-transition-duration","frontmatter":{"isBlog":false,"title":"transition duration","date":"apr 11. 2022","excerpt":"create stunning transition durations. utility classes to control the transition duration.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"animation","author":"severin glaser","keywords":"transition duration, transition-duration, transition","classNames":"","plainText":" greenCSS css class example minimum value maximum value step transition-duration number ms transition-duration-500ms transition-duration: 500ms; 100 10000 +100ms how to work transition duration use the `transition number ms` utilities to set the duration of a transition class  active focus and hover states greenCSS css class example active:transition number ms active :transition-duration-500ms:active transition-duration: 500ms; focus:transition number ms focus :transition-duration-500ms:focus transition-duration: 500ms; hover:transition number ms hover :transition-duration-500ms:hover transition-duration: 500ms; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:transition-duration-500ms` to only apply the transition-duration-500ms utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:transition-duration-500ms md: 480px 768px md:transition-duration-500ms lg: 768px 1080px lg:transition-duration-500ms greenCSS media queries can also be combined with active focus and hover states for example use `sm:transition-duration-500ms` to apply the transition-duration-500ms utility at only small screen sizes at or below 480px or `active:md:transition-duration-500ms` to apply the transition-duration-500ms utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure for auto classes is as follows: ` conditional state : media query :transition-duration-500ms` p e `active:md:transition-duration-500ms` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:transition-duration-500ms focus:transition-duration-500ms hover:transition-duration-500ms active transition duration focus transition duration hover transition duration active:sm:transition-duration-500ms focus:sm:transition-duration-500ms hover:sm:transition-duration-500ms active small screens transition duration focus small screens transition duration hover small screens transition duration active:md:transition-duration-500ms focus:md:transition-duration-500ms hover:md:transition-duration-500ms active medium screens transition duration focus medium screens transition duration hover medium screens transition duration active:lg:transition-duration-500ms focus:lg:transition-duration-500ms hover:lg:transition-duration-500ms active large screens transition duration focus large screens transition duration hover large screens transition duration sources transition-duration https: developer mozilla org en-us docs web css transition-duration "}},{"slug":"animation-transition-property","frontmatter":{"isBlog":false,"title":"transition property","date":"apr 11. 2022","excerpt":"create stunning css transitions. utility classes to control the transition property.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"animation","author":"severin glaser","keywords":"transition property, transition-property, transition","classNames":"","plainText":" greenCSS css class example transition-accent-color transition-accent-color transition-property: accent; transition-all transition-all transition-property: all; transition-backdrop-filter transition-backdrop-filter transition-property: backdrop; transition-background transition-background transition-property: background; transition-background-color transition-background-color transition-property: background-color; transition-background-image transition-background-image transition-property: background-image; transition-background-position transition-background-position transition-property: background-position; transition-background-size transition-background-size transition-property: background-size; transition-block-size transition-block-size transition-property: block-size; transition-border transition-border transition-property: border; transition-border-bottom transition-border-bottom transition-property: border-bottom; transition-border-bottom-color transition-border-bottom-color transition-property: border-bottom-color; transition-border-bottom-width transition-border-bottom-width transition-property: border-bottom-width; transition-border-color transition-border-color transition-property: border-color; transition-border-left transition-border-left transition-property: border-left; transition-border-left-color transition-border-left-color transition-property: border-left-color; transition-border-left-width transition-border-left-width transition-property: border-left-width; transition-border-radius transition-border-radius transition-property: border-radius; transition-border-right transition-border-right transition-property: border-right; transition-border-right-color transition-border-right-color transition-property: border-right-color; transition-border-right-width transition-border-right-width transition-property: border-right-width; transition-border-top transition-border-top transition-property: border-top; transition-border-top-color transition-border-top-color transition-property: border-top-color; transition-border-top-left-radius transition-border-top-left-radius transition-property: border-top-left-radius; transition-border-top-right-radius transition-border-top-right-radius transition-property: border-top-right-radius; transition-border-top-width transition-border-top-width transition-property: border-top-width; transition-border-width transition-border-width transition-property: border-width; transition-bottom transition-bottom transition-property: bottom; transition-box-shadow transition-box-shadow transition-property: box-shadow; transition-clip transition-clip transition-property: clip; transition-clip-path transition-clip-path transition-property: clip-path; transition-color transition-color transition-property: color; transition-font transition-font transition-property: font; transition-fill transition-fill transition-property: fill; transition-filter transition-filter transition-property: filter; transition-font-size transition-font-size transition-property: font-size; transition-font-weight transition-font-weight transition-property: font-weight; transition-height transition-height transition-property: height; transition-left transition-left transition-property: left; transition-letter-spacing transition-letter-spacing transition-property: letter-spacing; transition-line-height transition-line-height transition-property: line-height; transition-margin transition-margin transition-property: margin; transition-margin-block-end transition-margin-block-end transition-property: margin-block-end; transition-margin-block-start transition-margin-block-start transition-property: margin-block-start; transition-margin-bottom transition-margin-bottom transition-property: margin-bottom; transition-margin-inline-end transition-margin-inline-end transition-property: margin-inline-end; transition-margin-inline-start transition-margin-inline-start transition-property: margin-inline-start; transition-margin-left transition-margin-left transition-property: margin-left; transition-margin-right transition-margin-right transition-property: margin-right; transition-margin-top transition-margin-top transition-property: margin-top; transition-max-height transition-max-height transition-property: max-height; transition-max-inline-size transition-max-inline-size transition-property: max-inline-size; transition-max-width transition-max-width transition-property: max-width; transition-min-height transition-min-height transition-property: min-height; transition-min-width transition-min-width transition-property: min-width; transition-opacity transition-opacity transition-property: opacity; transition-outline transition-outline transition-property: outline; transition-outline-color transition-outline-color transition-property: outline-color; transition-outline-offset transition-outline-offset transition-property: outline-offset; transition-outline-width transition-outline-width transition-property: outline-width; transition-padding transition-padding transition-property: padding; transition-padding-block-end transition-padding-block-end transition-property: padding-block-end; transition-padding-block-start transition-padding-block-start transition-property: padding-block-start; transition-padding-bottom transition-padding-bottom transition-property: padding-bottom; transition-padding-inline-end transition-padding-inline-end transition-property: padding-inline-end; transition-padding-inline-start transition-padding-inline-start transition-property: padding-inline-start; transition-padding-left transition-padding-left transition-property: padding-left; transition-padding-right transition-padding-right transition-property: padding-right; transition-padding-top transition-padding-top transition-property: padding-top; transition-perspective transition-perspective transition-property: perspective; transition-perspective-origin transition-perspective-origin transition-property: perspective-origin; transition-right transition-right transition-property: right; transition-rotate transition-rotate transition-property: rotate; transition-scale transition-scale transition-property: scale; transition-scrollbar-color transition-scrollbar-color transition-property: scrollbar-color; transition-shape-margin transition-shape-margin transition-property: shape-margin; transition-shape-outside transition-shape-outside transition-property: shape-outside; transition-stroke transition-stroke transition-property: stroke; transition-text-decoration transition-text-decoration transition-property: text-decoration; transition-text-decoration-color transition-text-decoration-color transition-property: text-decoration-color; transition-text-decoration-thickness transition-text-decoration-thickness transition-property: text-decoration-thickness; transition-text-emphasis transition-text-emphasis transition-property: text-emphasis; transition-text-emphasis-color transition-text-emphasis-color transition-property: text-emphasis-color; transition-text-indent transition-text-indent transition-property: text-indent; transition-text-shadow transition-text-shadow transition-property: text-shadow; transition-text-underline-offset transition-text-underline-offset transition-property: text-underline-offset; transition-top transition-top transition-property: top; transition-transform transition-transform transition-property: transform; transition-transform-origin transition-transform-origin transition-property: transform-origin; transition-translate transition-translate transition-property: translate; transition-vertical-align transition-vertical-align transition-property: vertical-align; transition-visibility transition-visibility transition-property: visibility; transition-width transition-width transition-property: width; transition-word-spacing transition-word-spacing transition-property: word-spacing; transition-z-index transition-z-index transition-property: z-index; transition-zoom transition-zoom transition-property: zoom; how to work transition property all transition classes start with `transition keyword ` most often `transition-all` is used however if you want to be more specific about a property you can also use the respective transition + ` keyword `  active focus and hover states greenCSS css class example active:transition keyword active :transition-all:active transition-property: all; focus:transition keyword focus :transition-all:focus transition-property: all; hover:transition keyword hover :transition-all:hover transition-property: all; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:transition-all` to only apply the transition-all utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:transition-all md: 480px 768px md:transition-all lg: 768px 1080px lg:transition-all greenCSS media queries can also be combined with active focus and hover states for example use `sm:transition-all` to apply the transition-all utility at only small screen sizes at or below 480px or `active:md:transition-all` to apply the transition-all utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure for auto classes is as follows: ` conditional state : media query :transition-all` p e `active:md:transition-all` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:transition-all number focus:transition-all number hover:transition-all number active css transition focus css transition hover css transition active:sm:transition-all number focus:sm:transition-all number hover:sm:transition-all number active small screens css transition focus small screens css transition hover small screens css transition active:md:transition-all number focus:md:transition-all number hover:md:transition-all number active medium screens css transition focus medium screens css transition hover medium screens css transition active:lg:transition-all number focus:lg:transition-all number hover:lg:transition-all number active large screens css transition focus large screens css transition hover large screens css transition sources transition-property https: developer mozilla org en-us docs web css transition-property "}},{"slug":"animation-transition-timing","frontmatter":{"isBlog":false,"title":"transition timing function","date":"apr 12. 2022","excerpt":"utility classes to control the transition timing function.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"animation","author":"severin glaser","keywords":"transition timing function, transition-timing-function, linear, ease","classNames":"","plainText":" greenCSS css class example ease-linear ease-linear transition-timing-function: linear; ease ease transition-timing-function: ease; ease-in ease-in transition-timing-function: ease-in; ease-out ease-out transition-timing-function: ease-out; ease-in-out ease-in-out transition-timing-function: ease-in-out; cubic cubic transition-timing-function: cubic-bezier 0 75 0 25 0 75 0 25 ; how to work transition timing function use the `ease keyword ` utilities to set easing of your transitions by using linear ease ease-in ease-out ease-in-out or cubic keywords  active focus and hover states greenCSS css class example active: ease keyword active :ease-in:active transition-timing-function: 500ms; focus: ease keyword focus :ease-in:focus transition-timing-function: 500ms; hover: ease keyword hover :ease-in:hover transition-timing-function: 500ms; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:ease-in` to only apply the ease-in utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:ease-in md: 480px 768px md:ease-in lg: 768px 1080px lg:ease-in greenCSS media queries can also be combined with active focus and hover states for example use `sm:ease-in` to apply the ease-in utility at only small screen sizes at or below 480px or `active:md:ease-in` to apply the ease-in utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure for auto classes is as follows: ` conditional state : media query :ease-in` p e `active:md:ease-in` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:ease-in focus:ease-in hover:ease-in active transition timing function focus transition timing function hover transition timing function active:sm:ease-in focus:sm:ease-in hover:sm:ease-in active small screens transition timing function focus small screens transition timing function hover small screens transition timing function active:md:ease-in focus:md:ease-in hover:md:ease-in active medium screens transition timing function focus medium screens transition timing function hover medium screens transition timing function active:lg:ease-in focus:lg:ease-in hover:lg:ease-in active large screens transition timing function focus large screens transition timing function hover large screens transition timing function sources transition-duration https: developer mozilla org en-us docs web css transition-duration "}},{"slug":"filter-backdrop-blur","frontmatter":{"isBlog":false,"title":"backdrop blur","date":"apr 12. 2022","excerpt":"create stunning filters. utility classes to control the backdrop blur.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"filter","author":"severin glaser","keywords":"backdrop blur, filter, filters","classNames":"","plainText":" greenCSS css class example minimum value maximum value step backdrop-blur number px backdrop-blur-5px backdrop-filter: backdrop blur 5px 0 100 +1px how to work the backdrop blur filter use the `backdrop-blur number px` utilities to set the amount of backdrop blur for the element  active focus and hover states greenCSS css class example active:backdrop-blur number px active :backdrop-blur-5px:active backdrop-filter backdrop blur 5px 500ms; focus:backdrop-blur number px focus :backdrop-blur-5px:focus backdrop-filter backdrop blur 5px 500ms; hover:backdrop-blur number px hover :backdrop-blur-5px:hover backdrop-filter backdrop blur 5px 500ms; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:backdrop-blur-5px` to only apply the backdrop-blur-5px utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:backdrop-blur-5px md: 480px 768px md:backdrop-blur-5px lg: 768px 1080px lg:backdrop-blur-5px greenCSS media queries can also be combined with active focus and hover states for example use `sm:backdrop-blur-5px` to apply the backdrop-blur-5px utility at only small screen sizes at or below 480px or `active:md:backdrop-blur-5px` to apply the backdrop-blur-5px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure for auto classes is as follows: ` conditional state : media query :backdrop-blur number px` p e `active:md:backdrop-blur-5px` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:backdrop-blur-5px focus:backdrop-blur-5px hover:backdrop-blur-5px active backdrop blur focus backdrop blur hover backdrop blur active:sm:backdrop-blur-5px focus:sm:backdrop-blur-5px hover:sm:backdrop-blur-5px active small screens backdrop blur focus small screens backdrop blur hover small screens backdrop blur active:md:backdrop-blur-5px focus:md:backdrop-blur-5px hover:md:backdrop-blur-5px active medium screens backdrop blur focus medium screens backdrop blur hover medium screens backdrop blur active:lg:backdrop-blur-5px focus:lg:backdrop-blur-5px hover:lg:backdrop-blur-5px active large screens backdrop blur focus large screens backdrop blur hover large screens backdrop blur sources backdrop blur https: developer mozilla org en-us docs web css filter-function backdrop blur "}},{"slug":"filter-backdrop-brightness","frontmatter":{"isBlog":false,"title":"backdrop brightness","date":"apr 12. 2022","excerpt":"create stunning filters. utility classes to control the backdrop brightness.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"filter","author":"severin glaser","keywords":"backdrop brightness, filter, filters","classNames":"","plainText":" greenCSS css class example minimum value maximum value step backdrop-brightness number backdrop-brightness-1 backdrop-filter: brightness 0 1 0 30 +1 how to work the backdrop brightness filter use the `backdrop-brightness number ` utilities to set the amount of backdrop brightness for the element `backdrop-brightness-1` equals to the css class `backdrop-filter: brightness 0 1 ` `backdrop-brightness-2` equals to the css class `backdrop-filter: brightness 0 2 ` the maximum would be `backdrop-brightness-30` it equals to the css class `backdrop-filter: brightness 3 ` in general: the greenCSS class steps are +1 ranging from 0-30  active focus and hover states greenCSS css class example active:backdrop-brightness number active :backdrop-brightness-3:active backdrop-filter: brightness 3 ; focus:backdrop-brightness number focus :backdrop-brightness-3:focus backdrop-filter: brightness 3 ; hover:backdrop-brightness number hover :backdrop-brightness-3:hover backdrop-filter: brightness 3 ; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:backdrop-brightness-3` to only apply the backdrop-brightness-3 utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:backdrop-brightness-3 md: 480px 768px md:backdrop-brightness-3 lg: 768px 1080px lg:backdrop-brightness-3 greenCSS media queries can also be combined with active focus and hover states for example use `sm:backdrop-brightness-3` to apply the backdrop-brightness-3 utility at only small screen sizes at or below 480px or `active:md:backdrop-brightness-3` to apply the backdrop-brightness-3 utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure for auto classes is as follows: ` conditional state : media query :backdrop-brightness number ` p e `active:md:backdrop-brightness-3` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:backdrop-brightness-3 focus:backdrop-brightness-3 hover:backdrop-brightness-3 active backdrop brightness focus backdrop brightness hover backdrop brightness active:sm:backdrop-brightness-3 focus:sm:backdrop-brightness-3 hover:sm:backdrop-brightness-3 active small screens backdrop brightness focus small screens backdrop brightness hover small screens backdrop brightness active:md:backdrop-brightness-3 focus:md:backdrop-brightness-3 hover:md:backdrop-brightness-3 active medium screens backdrop brightness focus medium screens backdrop brightness hover medium screens backdrop brightness active:lg:backdrop-brightness-3 focus:lg:backdrop-brightness-3 hover:lg:backdrop-brightness-3 active large screens backdrop brightness focus large screens backdrop brightness hover large screens backdrop brightness sources backdrop-filter https: developer mozilla org en-us docs web css backdrop-filter "}},{"slug":"filter-backdrop-contrast","frontmatter":{"isBlog":false,"title":"backdrop contrast","date":"apr 12. 2022","excerpt":"create stunning filters. utility classes to control the backdrop contrast.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"filter","author":"severin glaser","keywords":"backdrop contrast, filter, filters","classNames":"","plainText":" greenCSS css class example minimum value maximum value step backdrop-contrast number backdrop-contrast-1 backdrop-filter: contrast 0 1 0 30 +1 how to work the backdrop contrast filter use the `backdrop-contrast number ` utilities to set the amount of backdrop contrast for the element `backdrop-contrast-1` equals to the css class `backdrop-filter: contrast 0 1 ` `backdrop-contrast-2` equals to the css class `backdrop-filter: contrast 0 2 ` the maximum would be `backdrop-contrast-30` it equals to the css class `backdrop-filter: contrast 3 ` in general: the greenCSS class steps are +1 ranging from 0-30  active focus and hover states greenCSS css class example active:backdrop-contrast number active :backdrop-contrast-3:active backdrop-filter: contrast 3 ; focus:backdrop-contrast number focus :backdrop-contrast-3:focus backdrop-filter: contrast 3 ; hover:backdrop-contrast number hover :backdrop-contrast-3:hover backdrop-filter: contrast 3 ; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:backdrop-contrast-3` to only apply the backdrop-contrast-3 utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:backdrop-contrast-3 md: 480px 768px md:backdrop-contrast-3 lg: 768px 1080px lg:backdrop-contrast-3 greenCSS media queries can also be combined with active focus and hover states for example use `sm:backdrop-contrast-3` to apply the backdrop-contrast-3 utility at only small screen sizes at or below 480px or `active:md:backdrop-contrast-3` to apply the backdrop-contrast-3 utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure for auto classes is as follows: ` conditional state : media query :backdrop-contrast number ` p e `active:md:backdrop-contrast-3` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:backdrop-contrast-3 focus:backdrop-contrast-3 hover:backdrop-contrast-3 active backdrop contrast focus backdrop contrast hover backdrop contrast active:sm:backdrop-contrast-3 focus:sm:backdrop-contrast-3 hover:sm:backdrop-contrast-3 active small screens backdrop contrast focus small screens backdrop contrast hover small screens backdrop contrast active:md:backdrop-contrast-3 focus:md:backdrop-contrast-3 hover:md:backdrop-contrast-3 active medium screens backdrop contrast focus medium screens backdrop contrast hover medium screens backdrop contrast active:lg:backdrop-contrast-3 focus:lg:backdrop-contrast-3 hover:lg:backdrop-contrast-3 active large screens backdrop contrast focus large screens backdrop contrast hover large screens backdrop contrast sources backdrop-filter https: developer mozilla org en-us docs web css backdrop-filter "}},{"slug":"filter-backdrop-grayscale","frontmatter":{"isBlog":false,"title":"backdrop grayscale","date":"apr 12. 2022","excerpt":"create stunning filters. utility classes to control the backdrop grayscale.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"filter","author":"severin glaser","keywords":"backdrop grayscale, filter, filters","classNames":"","plainText":" greenCSS css class example minimum value maximum value step backdrop-grayscale number per backdrop-grayscale-1per backdrop-filter: grayscale 1% 0 100 +1% how to work the backdrop grayscale filter use the `backdrop-grayscale number per` utilities to set the amount of backdrop grayscale black and white filter for the element `backdrop-grayscale-1per` equals to the css class `backdrop-filter: grayscale 1% ` `backdrop-grayscale-2per` equals to the css class `backdrop-filter: grayscale 2% ` the maximum would be `backdrop-grayscale-100per` it equals to the css class `backdrop-filter: grayscale 100% ` in general: the greenCSS class steps are +1% ranging from 0-100  active focus and hover states greenCSS css class example active:backdrop-grayscale number per active :backdrop-grayscale-5per:active backdrop-filter: grayscale 50% ; focus:backdrop-grayscale number per focus :backdrop-grayscale-5per:focus backdrop-filter: grayscale 50% ; hover:backdrop-grayscale number per hover :backdrop-grayscale-5per:hover backdrop-filter: grayscale 50% ; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:backdrop-grayscale-5per` to only apply the backdrop-grayscale-5per utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:backdrop-grayscale-5per md: 480px 768px md:backdrop-grayscale-5per lg: 768px 1080px lg:backdrop-grayscale-5per greenCSS media queries can also be combined with active focus and hover states for example use `sm:backdrop-grayscale-5per` to apply the backdrop-grayscale-5per utility at only small screen sizes at or below 480px or `active:md:backdrop-grayscale-5per` to apply the backdrop-grayscale-5per utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure for auto classes is as follows: ` conditional state : media query :backdrop-grayscale number per` p e `active:md:backdrop-grayscale-5per` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:backdrop-grayscale-5per focus:backdrop-grayscale-5per hover:backdrop-grayscale-5per active backdrop grayscale focus backdrop grayscale hover backdrop grayscale active:sm:backdrop-grayscale-5per focus:sm:backdrop-grayscale-5per hover:sm:backdrop-grayscale-5per active small screens backdrop grayscale focus small screens backdrop grayscale hover small screens backdrop grayscale active:md:backdrop-grayscale-5per focus:md:backdrop-grayscale-5per hover:md:backdrop-grayscale-5per active medium screens backdrop grayscale focus medium screens backdrop grayscale hover medium screens backdrop grayscale active:lg:backdrop-grayscale-5per focus:lg:backdrop-grayscale-5per hover:lg:backdrop-grayscale-5per active large screens backdrop grayscale focus large screens backdrop grayscale hover large screens backdrop grayscale sources backdrop-filter https: developer mozilla org en-us docs web css backdrop-filter "}},{"slug":"filter-backdrop-hue-rotate","frontmatter":{"isBlog":false,"title":"backdrop hue rotate","date":"apr 12. 2022","excerpt":"create stunning filters. utility classes to control the backdrop hue rotate.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"filter","author":"severin glaser","keywords":"backdrop hue rotate, filter, filters","classNames":"","plainText":" greenCSS css class example minimum value maximum value step backdrop-hue-rotate number deg backdrop-hue-rotate-1deg backdrop-filter: hue-rotate 1deg -180 180 +1° how to work the backdrop hue rotate filter you can either work with positive or negative backdrop hue rotate classes 1 negative classes have the following structure `backdrop-hue-rotate-neg number deg` p e `backdrop-hue-rotate-neg-180deg` 1 positive classes have the following structure `backdrop-hue-rotate number deg` p e `backdrop-hue-rotate-180deg`  active focus and hover states greenCSS css class example active:backdrop-hue-rotate number deg active :backdrop-hue-rotate-5deg:active backdrop-filter: hue-rotate 5deg ; focus:backdrop-hue-rotate number deg focus :backdrop-hue-rotate-5deg:focus backdrop-filter: hue-rotate 5deg ; hover:backdrop-hue-rotate number deg hover :backdrop-hue-rotate-5deg:hover backdrop-filter: hue-rotate 5deg ; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:backdrop-hue-rotate-5deg` to only apply the backdrop-hue-rotate-5deg utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:backdrop-hue-rotate-5deg md: 480px 768px md:backdrop-hue-rotate-5deg lg: 768px 1080px lg:backdrop-hue-rotate-5deg greenCSS media queries can also be combined with active focus and hover states for example use `sm:backdrop-hue-rotate-5deg` to apply the backdrop-hue-rotate-5deg utility at only small screen sizes at or below 480px or `active:md:backdrop-hue-rotate-5deg` to apply the backdrop-hue-rotate-5deg utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure for auto classes is as follows: ` conditional state : media query :backdrop-hue-rotate number deg` p e `active:md:backdrop-hue-rotate-5deg` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:backdrop-hue-rotate-5deg focus:backdrop-hue-rotate-5deg hover:backdrop-hue-rotate-5deg active backdrop hue rotate focus backdrop hue rotate hover backdrop hue rotate active:sm:backdrop-hue-rotate-5deg focus:sm:backdrop-hue-rotate-5deg hover:sm:backdrop-hue-rotate-5deg active small screens backdrop hue rotate focus small screens backdrop hue rotate hover small screens backdrop hue rotate active:md:backdrop-hue-rotate-5deg focus:md:backdrop-hue-rotate-5deg hover:md:backdrop-hue-rotate-5deg active medium screens backdrop hue rotate focus medium screens backdrop hue rotate hover medium screens backdrop hue rotate active:lg:backdrop-hue-rotate-5deg focus:lg:backdrop-hue-rotate-5deg hover:lg:backdrop-hue-rotate-5deg active large screens backdrop hue rotate focus large screens backdrop hue rotate hover large screens backdrop hue rotate sources backdrop-filter https: developer mozilla org en-us docs web css backdrop-filter "}},{"slug":"filter-backdrop-invert","frontmatter":{"isBlog":false,"title":"backdrop invert","date":"apr 12. 2022","excerpt":"create stunning filters. utility classes to control the backdrop invert filters.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"filter","author":"severin glaser","keywords":"backdrop invert, filter, filters","classNames":"","plainText":" greenCSS css class example minimum value maximum value step backdrop-invert number per backdrop-invert-1per backdrop-filter: invert 1% 0 100 +1% how to work the backdrop invert filter use the `backdrop-invert number per` utilities to set the amount of backdrop invert for the element `backdrop-invert-1per` equals to the css class `backdrop-filter: invert 1% ` `backdrop-invert-2per` equals to the css class `backdrop-filter: invert 2% ` the maximum would be `backdrop-invert-100per` it equals to the css class `backdrop-filter: invert 100% ` in general: the greenCSS class steps are +1% ranging from 0-100  active focus and hover states greenCSS css class example active:backdrop-invert number per active :backdrop-invert-50per:active backdrop-filter: invert 50% ; focus:backdrop-invert number per focus :backdrop-invert-50per:focus backdrop-filter: invert 50% ; hover:backdrop-invert number per hover :backdrop-invert-50per:hover backdrop-filter: invert 50% ; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:backdrop-invert-50per` to only apply the backdrop-invert-50per utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:backdrop-invert-5per md: 480px 768px md:backdrop-invert-5per lg: 768px 1080px lg:backdrop-invert-5per greenCSS media queries can also be combined with active focus and hover states for example use `sm:backdrop-invert-5per` to apply the backdrop-invert-5per utility at only small screen sizes at or below 480px or `active:md:backdrop-invert-5per` to apply the backdrop-invert-5per utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure for auto classes is as follows: ` conditional state : media query :backdrop-invert number per` p e `active:md:backdrop-invert-5per` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:backdrop-invert-5per focus:backdrop-invert-5per hover:backdrop-invert-5per active backdrop invert focus backdrop invert hover backdrop invert active:sm:backdrop-invert-5per focus:sm:backdrop-invert-5per hover:sm:backdrop-invert-5per active small screens backdrop invert focus small screens backdrop invert hover small screens backdrop invert active:md:backdrop-invert-5per focus:md:backdrop-invert-5per hover:md:backdrop-invert-5per active medium screens backdrop invert focus medium screens backdrop invert hover medium screens backdrop invert active:lg:backdrop-invert-5per focus:lg:backdrop-invert-5per hover:lg:backdrop-invert-5per active large screens backdrop invert focus large screens backdrop invert hover large screens backdrop invert sources backdrop-filter https: developer mozilla org en-us docs web css backdrop-filter "}},{"slug":"filter-backdrop-opacity","frontmatter":{"isBlog":false,"title":"backdrop opacity","date":"apr 12. 2022","excerpt":"create stunning filters. utility classes to control the backdrop opacity filters.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"filter","author":"severin glaser","keywords":"backdrop opacity, filter, filters","classNames":"","plainText":" greenCSS css class example minimum value maximum value step backdrop-opacity number backdrop-opacity-1 backdrop-filter: opacity 0 1 0 10 +1 how to work the backdrop opacity filter use the `backdrop-opacity number ` utilities to set the amount of backdrop opacity for the element `backdrop-opacity-1` equals to the css class `backdrop-filter: opacity 0 1 ` `backdrop-opacity-2` equals to the css class `backdrop-filter: opacity 2 ` the maximum would be `backdrop-opacity-10` it equals to the css class `backdrop-filter: opacity 1 ` in general: the greenCSS class steps are +1 ranging from 0-10  active focus and hover states greenCSS css class example active:backdrop-opacity number active :backdrop-opacity-5:active backdrop-filter: opacity 0 5 ; focus:backdrop-opacity number focus :backdrop-opacity-5:focus backdrop-filter: opacity 0 5 ; hover:backdrop-opacity number hover :backdrop-opacity-5:hover backdrop-filter: opacity 0 5 ; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:backdrop-opacity-5` to only apply the backdrop-opacity-5 utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:backdrop-opacity-5 md: 480px 768px md:backdrop-opacity-5 lg: 768px 1080px lg:backdrop-opacity-5 greenCSS media queries can also be combined with active focus and hover states for example use `sm:backdrop-opacity-5` to apply the backdrop-opacity-5 utility at only small screen sizes at or below 480px or `active:md:backdrop-opacity-5` to apply the backdrop-opacity-5 utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure for auto classes is as follows: ` conditional state : media query :backdrop-opacity number ` p e `active:md:backdrop-opacity-5` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:backdrop-opacity-5 focus:backdrop-opacity-5 hover:backdrop-opacity-5 active backdrop opacity focus backdrop opacity hover backdrop opacity active:sm:backdrop-opacity-5 focus:sm:backdrop-opacity-5 hover:sm:backdrop-opacity-5 active small screens backdrop opacity focus small screens backdrop opacity hover small screens backdrop opacity active:md:backdrop-opacity-5 focus:md:backdrop-opacity-5 hover:md:backdrop-opacity-5 active medium screens backdrop opacity focus medium screens backdrop opacity hover medium screens backdrop opacity active:lg:backdrop-opacity-5 focus:lg:backdrop-opacity-5 hover:lg:backdrop-opacity-5 active large screens backdrop opacity focus large screens backdrop opacity hover large screens backdrop opacity sources backdrop-filter https: develo mozilla org en-us docs web css backdrop-filter "}},{"slug":"filter-backdrop-saturate","frontmatter":{"isBlog":false,"title":"backdrop saturate","date":"apr 12. 2022","excerpt":"create stunning filters. utility classes to control the backdrop saturate.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"filter","author":"severin glaser","keywords":"backdrop saturate, filter, filters","classNames":"","plainText":" greenCSS css class example minimum value maximum value step backdrop-saturate number backdrop-saturate-1 backdrop-filter: saturate 0 1 0 30 +1 how to work the backdrop saturate filter use the `backdrop-saturate number ` utilities to set the amount of backdrop saturate for the element `backdrop-saturate-1` equals to the css class `backdrop-filter: saturate 0 1 ` `backdrop-saturate-2` equals to the css class `backdrop-filter: saturate 0 2 ` the maximum would be `backdrop-saturate-30` it equals to the css class `backdrop-filter: saturate 3 ` in general: the greenCSS class steps are +1 ranging from 0-30  active focus and hover states greenCSS css class example active:backdrop-saturate number active :backdrop-saturate-5:active backdrop-filter: saturate 0 5 ; focus:backdrop-saturate number focus :backdrop-saturate-5:focus backdrop-filter: saturate 0 5 ; hover:backdrop-saturate number hover :backdrop-saturate-5:hover backdrop-filter: saturate 0 5 ; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:backdrop-saturate-5` to only apply the backdrop-saturate-5 utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:backdrop-saturate-5 md: 480px 768px md:backdrop-saturate-5 lg: 768px 1080px lg:backdrop-saturate-5 greenCSS media queries can also be combined with active focus and hover states for example use `sm:backdrop-saturate-5` to apply the backdrop-saturate-5 utility at only small screen sizes at or below 480px or `active:md:backdrop-saturate-5` to apply the backdrop-saturate-5 utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure for auto classes is as follows: ` conditional state : media query :backdrop-saturate number ` p e `active:md:backdrop-saturate-5` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:backdrop-saturate-5 focus:backdrop-saturate-5 hover:backdrop-saturate-5 active backdrop saturate focus backdrop saturate hover backdrop saturate active:sm:backdrop-saturate-5 focus:sm:backdrop-saturate-5 hover:sm:backdrop-saturate-5 active small screens backdrop saturate focus small screens backdrop saturate hover small screens backdrop saturate active:md:backdrop-saturate-5 focus:md:backdrop-saturate-5 hover:md:backdrop-saturate-5 active medium screens backdrop saturate focus medium screens backdrop saturate hover medium screens backdrop saturate active:lg:backdrop-saturate-5 focus:lg:backdrop-saturate-5 hover:lg:backdrop-saturate-5 active large screens backdrop saturate focus large screens backdrop saturate hover large screens backdrop saturate sources backdrop-filter https: develo mozilla org en-us docs web css backdrop-filter "}},{"slug":"filter-backdrop-sepia","frontmatter":{"isBlog":false,"title":"backdrop sepia","date":"apr 12. 2022","excerpt":"create stunning filters. utility classes to control the backdrop sepia.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"filter","author":"severin glaser","keywords":"backdrop sepia, filter, filters","classNames":"","plainText":" greenCSS css class example minimum value maximum value step backdrop-sepia number backdrop-sepia-1per backdrop-filter: sepia 1% 0 100 +1% how to work the backdrop sepia filter use the `backdrop-sepia number ` utilities to set the amount of backdrop sepia for the element `backdrop-sepia-1per` equals to the css class `backdrop-filter: sepia 1% ` `backdrop-sepia-2per` equals to the css class `backdrop-filter: sepia 2% ` the maximum would be `backdrop-sepia-100per` it equals to the css class `backdrop-filter: sepia 100% ` in general: the greenCSS class steps are +1% ranging from 0-100  active focus and hover states greenCSS css class example active:backdrop-sepia number active :backdrop-sepia-5per:active backdrop-filter: sepia 5% ; focus:backdrop-sepia number focus :backdrop-sepia-5per:focus backdrop-filter: sepia 5% ; hover:backdrop-sepia number hover :backdrop-sepia-5per:hover backdrop-filter: sepia 5% ; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:backdrop-sepia-5per` to only apply the backdrop-sepia-5per utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:backdrop-sepia-5per md: 480px 768px md:backdrop-sepia-5per lg: 768px 1080px lg:backdrop-sepia-5per greenCSS media queries can also be combined with active focus and hover states for example use `sm:backdrop-sepia-5per` to apply the backdrop-sepia-5per utility at only small screen sizes at or below 480px or `active:md:backdrop-sepia-5per` to apply the backdrop-sepia-5per utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure for auto classes is as follows: ` conditional state : media query :backdrop-sepia number ` p e `active:md:backdrop-sepia-5per` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:backdrop-sepia-5per focus:backdrop-sepia-5per hover:backdrop-sepia-5per active backdrop sepia focus backdrop sepia hover backdrop sepia active:sm:backdrop-sepia-5per focus:sm:backdrop-sepia-5per hover:sm:backdrop-sepia-5per active small screens backdrop sepia focus small screens backdrop sepia hover small screens backdrop sepia active:md:backdrop-sepia-5per focus:md:backdrop-sepia-5per hover:md:backdrop-sepia-5per active medium screens backdrop sepia focus medium screens backdrop sepia hover medium screens backdrop sepia active:lg:backdrop-sepia-5per focus:lg:backdrop-sepia-5per hover:lg:backdrop-sepia-5per active large screens backdrop sepia focus large screens backdrop sepia hover large screens backdrop sepia sources backdrop-filter https: develo mozilla org en-us docs web css backdrop-filter "}},{"slug":"filter-blur","frontmatter":{"isBlog":false,"title":"blur","date":"apr 12. 2022","excerpt":"create stunning filters. utility classes to control the blur.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"filter","author":"severin glaser","keywords":"blur, filter, filters","classNames":"","plainText":" greenCSS css class example minimum value maximum value step blur number px blur-5px filter: blur 5px 0 100 +1px how to work the blur filter use the `blur number px` utilities to set the amount of blur for the element  active focus and hover states greenCSS css class example active:blur number px active :blur-5px:active filter: blur 5px 500ms; focus:blur number px focus :blur-5px:focus filter: blur 5px 500ms; hover:blur number px hover :blur-5px:hover filter: blur 5px 500ms; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:blur-5px` to only apply the blur-5px utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:blur-5px md: 480px 768px md:blur-5px lg: 768px 1080px lg:blur-5px greenCSS media queries can also be combined with active focus and hover states for example use `sm:blur-5px` to apply the blur-5px utility at only small screen sizes at or below 480px or `active:md:blur-5px` to apply the blur-5px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure for auto classes is as follows: ` conditional state : media query :blur-5px` p e `active:md:blur-5px` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:blur-5px focus:blur-5px hover:blur-5px active blur focus blur hover blur active:sm:blur-5px focus:sm:blur-5px hover:sm:blur-5px active small screens blur focus small screens blur hover small screens blur active:md:blur-5px focus:md:blur-5px hover:md:blur-5px active medium screens blur focus medium screens blur hover medium screens blur active:lg:blur-5px focus:lg:blur-5px hover:lg:blur-5px active large screens blur focus large screens blur hover large screens blur sources blur https: developer mozilla org en-us docs web css filter-function blur "}},{"slug":"filter-brightness","frontmatter":{"isBlog":false,"title":"brightness","date":"apr 12. 2022","excerpt":"create stunning filters. utility classes to control the brightness.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"filter","author":"severin glaser","keywords":"brightness, filter, filters","classNames":"","plainText":" greenCSS css class example minimum value maximum value step brightness number brightness-1 filter: brightness 0 1 0 50 +1 how to work the brightness filter use the `brightness number ` utilities to set the amount of brightness for the element `brightness-1` equals to the css class `filter: brightness 0 1 ` `brightness-2` equals to the css class `filter: brightness 0 2 ` the maximum would be `brightness-50` it equals to the css class `filter: brightness 5 ` in general: the greenCSS class steps are +1 ranging from 0-50  active focus and hover states greenCSS css class example active:brightness number active :brightness-5:active filter: brightness 5 ; focus:brightness number focus :brightness-5:focus filter: brightness 5 ; hover:brightness number hover :brightness-5:hover filter: brightness 5 ; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:brightness-5` to only apply the brightness-5 utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:brightness-5 md: 480px 768px md:brightness-5 lg: 768px 1080px lg:brightness-5 greenCSS media queries can also be combined with active focus and hover states for example use `sm:brightness-5` to apply the brightness-5 utility at only small screen sizes at or below 480px or `active:md:brightness-5` to apply the brightness-5 utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure for auto classes is as follows: ` conditional state : media query :brightness number ` p e `active:md:brightness-5` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:brightness-5 focus:brightness-5 hover:brightness-5 active brightness focus brightness hover brightness active:sm:brightness-5 focus:sm:brightness-5 hover:sm:brightness-5 active small screens brightness focus small screens brightness hover small screens brightness active:md:brightness-5 focus:md:brightness-5 hover:md:brightness-5 active medium screens brightness focus medium screens brightness hover medium screens brightness active:lg:brightness-5 focus:lg:brightness-5 hover:lg:brightness-5 active large screens brightness focus large screens brightness hover large screens brightness sources brightness https: developer mozilla org en-us docs web css filter-function brightness "}},{"slug":"filter-contrast","frontmatter":{"isBlog":false,"title":"contrast","date":"apr 12. 2022","excerpt":"create stunning filters. utility classes to control the contrast.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"filter","author":"severin glaser","keywords":"contrast, filter, filters","classNames":"","plainText":" greenCSS css class example minimum value maximum value step contrast number contrast-1 filter: contrast 0 1 0 50 +1 how to work the contrast filter use the `contrast number ` utilities to set the amount of contrast for the element `contrast-1` equals to the css class `filter: contrast 0 1 ` `contrast-2` equals to the css class `filter: contrast 0 2 ` the maximum would be `contrast-50` it equals to the css class `filter: contrast 5 ` in general: the greenCSS class steps are +1 ranging from 0-50  active focus and hover states greenCSS css class example active:contrast number active :contrast-5:active filter: contrast 5 ; focus:contrast number focus :contrast-5:focus filter: contrast 5 ; hover:contrast number hover :contrast-5:hover filter: contrast 5 ; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:contrast-5` to only apply the contrast-5 utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:contrast-5 md: 480px 768px md:contrast-5 lg: 768px 1080px lg:contrast-5 greenCSS media queries can also be combined with active focus and hover states for example use `sm:contrast-5` to apply the contrast-5 utility at only small screen sizes at or below 480px or `active:md:contrast-5` to apply the contrast-5 utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure for auto classes is as follows: ` conditional state : media query :contrast number ` p e `active:md:contrast-5` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:contrast-5 focus:contrast-5 hover:contrast-5 active contrast focus contrast hover contrast active:sm:contrast-5 focus:sm:contrast-5 hover:sm:contrast-5 active small screens contrast focus small screens contrast hover small screens contrast active:md:contrast-5 focus:md:contrast-5 hover:md:contrast-5 active medium screens contrast focus medium screens contrast hover medium screens contrast active:lg:contrast-5 focus:lg:contrast-5 hover:lg:contrast-5 active large screens contrast focus large screens contrast hover large screens contrast sources contrast https: developer mozilla org en-us docs web css filter-function contrast "}},{"slug":"filter-drop-shadow","frontmatter":{"isBlog":false,"title":"drop shadow","date":"apr 12. 2022","excerpt":"create stunning filters. utility classes to enhance drop shadow with colours.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"filter","author":"severin glaser","keywords":"drop shadow, filter, filters, colours, shadow","classNames":"","plainText":" greenCSS css class example drop-shadow colour drop-shadow-black filter: drop-shadow 10px 10px 20px 101010 ; how to work the drop shadow filter use the `drop-shadow colour ` utilities to set the colour of the drop shadow for an element have a closel look which colours brand colours are available note `white` and `transparent` do not offer any descending colour classes  active focus and hover states greenCSS css class example active:drop-shadow colour active :drop-shadow-black-5:active filter: drop-shadow 10px 10px 20px 4d4d4d ; focus:drop-shadow colour focus :drop-shadow-black-5:focus filter: drop-shadow 10px 10px 20px 4d4d4d ; hover:drop-shadow colour hover :drop-shadow-black-5:hover filter: drop-shadow 10px 10px 20px 4d4d4d ; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:drop-shadow-black-5` to only apply the drop-shadow-black-5 utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:drop-shadow-black-5 md: 480px 768px md:drop-shadow-black-5 lg: 768px 1080px lg:drop-shadow-black-5 greenCSS media queries can also be combined with active focus and hover states for example use `sm:drop-shadow-black-5` to apply the drop-shadow-black-5 utility at only small screen sizes at or below 480px or `active:md:drop-shadow-black-5` to apply the drop-shadow-black-5 utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure for auto classes is as follows: ` conditional state : media query :drop-shadow colour ` p e `active:md:drop-shadow-black-5` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:drop-shadow-black-5 focus:drop-shadow-black-5 hover:drop-shadow-black-5 active drop shadow focus drop shadow hover drop shadow active:sm:drop-shadow-black-5 focus:sm:drop-shadow-black-5 hover:sm:drop-shadow-black-5 active small screens drop shadow focus small screens drop shadow hover small screens drop shadow active:md:drop-shadow-black-5 focus:md:drop-shadow-black-5 hover:md:drop-shadow-black-5 active medium screens drop shadow focus medium screens drop shadow hover medium screens drop shadow active:lg:drop-shadow-black-5 focus:lg:drop-shadow-black-5 hover:lg:drop-shadow-black-5 active large screens drop shadow focus large screens drop shadow hover large screens drop shadow sources drop-shadow https: developer mozilla org en-us docs web css filter-function drop-shadow "}},{"slug":"filter-grayscale","frontmatter":{"isBlog":false,"title":"grayscale","date":"apr 12. 2022","excerpt":"create stunning filters. utility classes to control the grayscale.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"filter","author":"severin glaser","keywords":"grayscale, filter, filters","classNames":"","plainText":" greenCSS css class example minimum value maximum value step grayscale number per grayscale-1per filter:grayscale 1% 0 100 +1% how to work the grayscale filter use the `grayscale number per` utilities to set the amount of grayscale black and white filter for the element `grayscale-1per` equals to the css class `filter:grayscale 1% ` `grayscale-2per` equals to the css class `filter: grayscale 2% ` the maximum would be `grayscale-100per` it equals to the css class `filter: grayscale 100% ` in general: the greenCSS class steps are +1% ranging from 0-100  active focus and hover states greenCSS css class example active:grayscale number per active :grayscale-5per:active filter: grayscale 50% ; focus:grayscale number per focus :grayscale-5per:focus filter: grayscale 50% ; hover:grayscale number per hover :grayscale-5per:hover filter: grayscale 50% ; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:grayscale-5per` to only apply the grayscale-5per utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:grayscale-5per md: 480px 768px md:grayscale-5per lg: 768px 1080px lg:grayscale-5per greenCSS media queries can also be combined with active focus and hover states for example use `sm:grayscale-5per` to apply the grayscale-5per utility at only small screen sizes at or below 480px or `active:md:grayscale-5per` to apply the grayscale-5per utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure for auto classes is as follows: ` conditional state : media query :grayscale number per` p e `active:md:grayscale-5per` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:grayscale-5per focus:grayscale-5per hover:grayscale-5per active grayscale focus grayscale hover grayscale active:sm:grayscale-5per focus:sm:grayscale-5per hover:sm:grayscale-5per active small screens grayscale focus small screens grayscale hover small screens grayscale active:md:grayscale-5per focus:md:grayscale-5per hover:md:grayscale-5per active medium screens grayscale focus medium screens grayscale hover medium screens grayscale active:lg:grayscale-5per focus:lg:grayscale-5per hover:lg:grayscale-5per active large screens grayscale focus large screens grayscale hover large screens grayscale sources grayscale https: developer mozilla org en-us docs web css filter-function grayscale "}},{"slug":"filter-hue-rotate","frontmatter":{"isBlog":false,"title":"hue rotate","date":"apr 12. 2022","excerpt":"create stunning filters. utility classes to control the hue rotate.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"filter","author":"severin glaser","keywords":"hue rotate, filter, filters","classNames":"","plainText":" greenCSS css class example minimum value maximum value step hue-rotate number deg hue-rotate-1deg filter: hue-rotate 1deg 0 180 +1° hue-rotate number per hue-rotate-1per filter: hue-rotate 1% 0 100 +1% how to work the hue rotate filter you can either work with degrees or percentages use the `hue-rotate number per` utilities to set the amount of hue rotate for the element `hue-rotate-1per` equals to the css class `filter:hue rotate 1% ` `hue-rotate-2per` equals to the css class `filter: hue rotate 2% ` the maximum would be `hue-rotate-100per` it equals to the css class `filter: hue rotate 100% ` in general: the greenCSS class steps are +1% or +1deg ranging from 0-100% or 0-180deg  active focus and hover states greenCSS css class example active:hue-rotate number per deg active :hue-rotate-5per:active filter: hue-rotate 5% ; focus:hue-rotate number per deg focus :hue-rotate-5per:focus filter: hue-rotate 5% ; hover:hue-rotate number per deg hover :hue-rotate-5per:hover filter: hue-rotate 5% ; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:hue-rotate-5per` to only apply the hue-rotate-5per utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:hue-rotate-5per md: 480px 768px md:hue-rotate-5per lg: 768px 1080px lg:hue-rotate-5per greenCSS media queries can also be combined with active focus and hover states for example use `sm:hue-rotate-5per` to apply the hue-rotate-5per utility at only small screen sizes at or below 480px or `active:md:hue-rotate-5per` to apply the hue-rotate-5per utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure for auto classes is as follows: ` conditional state : media query :hue-rotate number per` p e `active:md:hue-rotate-5per` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:hue-rotate-5per focus:hue-rotate-5per hover:hue-rotate-5per active hue rotate focus hue rotate hover hue rotate active:sm:hue-rotate-5per focus:sm:hue-rotate-5per hover:sm:hue-rotate-5per active small screens hue rotate focus small screens hue rotate hover small screens hue rotate active:md:hue-rotate-5per focus:md:hue-rotate-5per hover:md:hue-rotate-5per active medium screens hue rotate focus medium screens hue rotate hover medium screens hue rotate active:lg:hue-rotate-5per focus:lg:hue-rotate-5per hover:lg:hue-rotate-5per active large screens hue rotate focus large screens hue rotate hover large screens hue rotate sources hue rotate https: developer mozilla org en-us docs web css filter-function hue rotate "}},{"slug":"filter-invert","frontmatter":{"isBlog":false,"title":"invert","date":"apr 12. 2022","excerpt":"create stunning filters. utility classes to control the invert filters.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"filter","author":"severin glaser","keywords":"invert, filter, filters","classNames":"","plainText":" greenCSS css class example minimum value maximum value step invert number per invert-1per filter:invert 1% 0 100 +1% how to work the invert filter use the `invert number per` utilities to set the amount of invert for the element `invert-1per` equals to the css class `filter:invert 1% ` `invert-2per` equals to the css class `filter: invert 2% ` the maximum would be `invert-100per` it equals to the css class `filter: invert 100% ` in general: the greenCSS class steps are +1% ranging from 0-100  active focus and hover states greenCSS css class example active:invert number per active :invert-5per:active filter: invert 50% ; focus:invert number per focus :invert-5per:focus filter: invert 50% ; hover:invert number per hover :invert-5per:hover filter: invert 50% ; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:invert-5per` to only apply the invert-5per utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:invert-5per md: 480px 768px md:invert-5per lg: 768px 1080px lg:invert-5per greenCSS media queries can also be combined with active focus and hover states for example use `sm:invert-5per` to apply the invert-5per utility at only small screen sizes at or below 480px or `active:md:invert-5per` to apply the invert-5per utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure for auto classes is as follows: ` conditional state : media query :invert number per` p e `active:md:invert-5per` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:invert-5per focus:invert-5per hover:invert-5per active invert focus invert hover invert active:sm:invert-5per focus:sm:invert-5per hover:sm:invert-5per active small screens invert focus small screens invert hover small screens invert active:md:invert-5per focus:md:invert-5per hover:md:invert-5per active medium screens invert focus medium screens invert hover medium screens invert active:lg:invert-5per focus:lg:invert-5per hover:lg:invert-5per active large screens invert focus large screens invert hover large screens invert sources invert https: developer mozilla org en-us docs web css filter-function invert "}},{"slug":"filter-saturate","frontmatter":{"isBlog":false,"title":"saturate","date":"apr 12. 2022","excerpt":"create stunning filters. utility classes to control the saturate.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"filter","author":"severin glaser","keywords":"saturate, filter, filters","classNames":"","plainText":" greenCSS css class example minimum value maximum value step saturate number saturate-1 filter: saturate 0 1 0 50 +1 how to work the saturate filter use the `saturate number ` utilities to set the amount of saturate for the element `saturate-1` equals to the css class `filter: saturate 0 1 ` `saturate-2` equals to the css class `filter: saturate 0 2 ` the maximum would be `saturate-50` it equals to the css class `filter: saturate 5 ` in general: the greenCSS class steps are +1 ranging from 0-50  active focus and hover states greenCSS css class example active:saturate number active :saturate-5:active filter: saturate 5 ; focus:saturate number focus :saturate-5:focus filter: saturate 5 ; hover:saturate number hover :saturate-5:hover filter: saturate 5 ; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:saturate-5` to only apply the saturate-5 utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:saturate-5 md: 480px 768px md:saturate-5 lg: 768px 1080px lg:saturate-5 greenCSS media queries can also be combined with active focus and hover states for example use `sm:saturate-5` to apply the saturate-5 utility at only small screen sizes at or below 480px or `active:md:saturate-5` to apply the saturate-5 utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure for auto classes is as follows: ` conditional state : media query :saturate number ` p e `active:md:saturate-5` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:saturate-5 focus:saturate-5 hover:saturate-5 active saturate focus saturate hover saturate active:sm:saturate-5 focus:sm:saturate-5 hover:sm:saturate-5 active small screens saturate focus small screens saturate hover small screens saturate active:md:saturate-5 focus:md:saturate-5 hover:md:saturate-5 active medium screens saturate focus medium screens saturate hover medium screens saturate active:lg:saturate-5 focus:lg:saturate-5 hover:lg:saturate-5 active large screens saturate focus large screens saturate hover large screens saturate sources saturate https: developer mozilla org en-us docs web css filter-function saturate "}},{"slug":"filter-sepia","frontmatter":{"isBlog":false,"title":"sepia","date":"apr 12. 2022","excerpt":"create stunning filters. utility classes to control the sepia filters.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"filter","author":"severin glaser","keywords":"sepia, filter, filters","classNames":"","plainText":" greenCSS css class example minimum value maximum value step sepia number per sepia-1per filter:sepia 1% 0 100 +1% how to work the sepia filter use the `sepia number per` utilities to set the amount of sepia for the element `sepia-1per` equals to the css class `filter:sepia 1% ` `sepia-2per` equals to the css class `filter: sepia 2% ` the maximum would be `sepia-100per` it equals to the css class `filter: sepia 100% ` in general: the greenCSS class steps are +1% ranging from 0-100  active focus and hover states greenCSS css class example active:sepia number per active :sepia-5per:active filter: sepia 50% ; focus:sepia number per focus :sepia-5per:focus filter: sepia 50% ; hover:sepia number per hover :sepia-5per:hover filter: sepia 50% ; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:sepia-5per` to only apply the sepia-5per utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:sepia-5per md: 480px 768px md:sepia-5per lg: 768px 1080px lg:sepia-5per greenCSS media queries can also be combined with active focus and hover states for example use `sm:sepia-5per` to apply the sepia-5per utility at only small screen sizes at or below 480px or `active:md:sepia-5per` to apply the sepia-5per utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure for auto classes is as follows: ` conditional state : media query :sepia number per` p e `active:md:sepia-5per` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:sepia-5per focus:sepia-5per hover:sepia-5per active sepia focus sepia hover sepia active:sm:sepia-5per focus:sm:sepia-5per hover:sm:sepia-5per active small screens sepia focus small screens sepia hover small screens sepia active:md:sepia-5per focus:md:sepia-5per hover:md:sepia-5per active medium screens sepia focus medium screens sepia hover medium screens sepia active:lg:sepia-5per focus:lg:sepia-5per hover:lg:sepia-5per active large screens sepia focus large screens sepia hover large screens sepia sources sepia https: developer mozilla org en-us docs web css filter-function sepia "}},{"slug":"flexbox-align-content","frontmatter":{"isBlog":false,"title":"align content","date":"apr 06. 2022","excerpt":"utility classes to control the item alignment along the vertical axis.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flexbox","author":"severin glaser","keywords":"align content, flexbox, align-content, center items","classNames":"","plainText":" greenCSS css class example content-center content-center align-content: center; content-start content-start align-content: flex-start; content-end content-end align-content: flex-end; content-between content-between align-content: space-between; content-around content-around align-content: space-around; content-evenly content-evenly align-content: space-evenly; how to work with justify use the `content keyword ` utilities to set where rows are positioned content-start in the example below we use `content-start` to position the elements at the beginning of a flex environment ! greenCSS align-content-start images docs flex align-content-start webp?style=centerme  content center in the example below we use `content-center` to position the elements in the middle of the vertical axis ! greenCSS content-center images docs flex align-content-center webp?style=centerme  content end in the example below we use `content-end` to position the elements at the end of the vertical axis ! greenCSS content-end images docs flex align-content-end webp?style=centerme  content between in the example below we use `content-between` to position the elements along the vertical axis with an even space between each element ! greenCSS content-between images docs flex align-content-between webp?style=centerme  content around in the example below we use `content-around` to position the elements along the horizontal axis with an even space between each element and side ! greenCSS content-around images docs flex align-content-around webp?style=centerme  content evenly in the example below we use `content-evenly` to position the elements along the vertical axis with an equal space between each element and the corners ! greenCSS content-evenly images docs flex align-content-evenly webp?style=centerme  active focus and hover states greenCSS css class example active:content keyword active :content-start:active align-content: flex-start; focus:content keyword focus :content-start:focus align-content: flex-start; hover:content keyword hover :content-start:hover align-content: flex-start; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:content-start` to only apply the content-start utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:content-center md: 480px 768px md:content-center lg: 768px 1080px lg:content-center greenCSS media queries can also be combined with active focus and hover states for example use `sm:content-center` to apply the content-center utility at only small screen sizes at or below 480px or `active:md:content-center` to apply the content-center utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :content keyword ` p e `active:md:content-center` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:content keyword focus:content keyword hover:content keyword active align content center focus align content center hover align content center active:sm:content keyword focus:sm:content keyword hover:sm:content keyword active small screens align content center focus small screens align content center hover small screens align content center active:md:content keyword focus:md:content keyword hover:md:content keyword active medium screens align content center focus medium screens align content center hover medium screens align content center active:lg:content keyword focus:lg:content keyword hover:lg:content keyword active large screens align content center focus large screens align content center hover large screens align content center sources align-content https: developer mozilla org en-us docs web css align-content "}},{"slug":"flexbox-align-items","frontmatter":{"isBlog":false,"title":"align items","date":"apr 06. 2022","excerpt":"utility classes to control the rows of grid and flex environements.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flexbox","author":"severin glaser","keywords":"align items, flexbox, align-items, center items, position items","classNames":"","plainText":" greenCSS css class example items-center items-center align-items: center; items-start items-start align-items: flex-start; items-end items-end align-items: flex-end; items-baseline items-baseline align-items: baseline; items-stretch items-stretch align-items: stretch; how to work with align items use the `items keyword ` utilities to set the position of flex and grid elements on the vertical axis items start in the example below we use `items-start` to position the elements at the beginning of the parents vertical axis ! greenCSS align-items-start images docs flex align-items-start webp?style=centerme  items center in the example below we use `items-center` to position the elements along the middle of the parents vertical axis ! greenCSS items-center images docs flex align-items-center webp?style=centerme  items end in the example below we use `items-end` to position the elements at the end of the parents vertical axis ! greenCSS align-items-end images docs flex align-items-end webp?style=centerme  items baseline in the example below we use `items-baseline` to position the elements along the baseline of the vertical axis ! greenCSS align-items-baseline images docs flex align-items-baseline webp?style=centerme  items stretch in the example below we use `items-stretch` to stretch the elements in order to cover the vertical axis ! greenCSS align-items-stretch images docs flex align-items-stretch webp?style=centerme  active focus and hover states greenCSS css class example active:items keyword active :items-start:active align-items: flex-start; focus:items keyword focus :items-start:focus align-items: flex-start; hover:items keyword hover :items-start:hover align-items: flex-start; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:items-start` to only apply the items-start utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:items-center md: 480px 768px md:items-center lg: 768px 1080px lg:items-center greenCSS media queries can also be combined with active focus and hover states for example use `sm:items-center` to apply the items-center utility at only small screen sizes at or below 480px or `active:md:items-center` to apply the items-center utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :items keyword ` p e `active:md:items-center` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:items keyword focus:items keyword hover:items keyword active align items center focus align items center hover align items center active:sm:items keyword focus:sm:items keyword hover:sm:items keyword active small screens align items center focus small screens align items center hover small screens align items center active:md:items keyword focus:md:items keyword hover:md:items keyword active medium screens align items center focus medium screens align items center hover medium screens align items center active:lg:items keyword focus:lg:items keyword hover:lg:items keyword active large screens align items center focus large screens align items center hover large screens align items center sources align-items https: developer mozilla org en-us docs web css align-items "}},{"slug":"flexbox-align-self","frontmatter":{"isBlog":false,"title":"align self","date":"apr 06. 2022","excerpt":"utility classes to control the individual position for an element within grid and flex environements.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flexbox","author":"severin glaser","keywords":"align self, flexbox, align-items, center items, position items","classNames":"","plainText":" greenCSS css class example self-auto self-auto align-self: auto; self-center self-center align-self: center; self-start self-start align-self: flex-start; self-end self-end align-self: flex-end; self-baseline self-baseline align-self: baseline; self-stretch self-stretch align-self: stretch; how to work with align self use the `self keyword ` utilities to set the individual position of flex and grid elements on its unique vertical axis self auto in the example below we use `self-auto` to position the elements at the beginning of the vertical axis in relation to its parents ! greenCSS align-self-auto images docs flex align-items-stretch webp?style=centerme  self start in the example below we use `self-start` to position the elements at the beginning of the vertical axis in relation to its parents ! greenCSS align-self-start images docs flex align-self-start webp?style=centerme  self center in the example below we use `self-center` to position the elements along the middle of the vertical axis in relation to its parents ! greenCSS self-center images docs flex align-self-center webp?style=centerme  self end in the example below we use `self-end` to position the elements at the end of the vertical axis in relation to its parents ! greenCSS align-self-end images docs flex align-self-end webp?style=centerme  self baseline in the example below we use `self-baseline` to position the elements along the baseline of the vertical axis in relation to its parents ! greenCSS align-self-baseline images docs flex align-self-baseline webp?style=centerme  self stretch in the example below we use `self-stretch` to stretch the elements in order to cover the vertical axis in relation to its parents ! greenCSS align-self-stretch images docs flex align-items-stretch webp?style=centerme  active focus and hover states greenCSS css class example active:self keyword active :self-start:active align-self: flex-start; focus:self keyword focus :self-start:focus align-self: flex-start; hover:self keyword hover :self-start:hover align-self: flex-start; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:self-start` to only apply the self-start utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:self-center md: 480px 768px md:self-center lg: 768px 1080px lg:self-center greenCSS media queries can also be combined with active focus and hover states for example use `sm:self-center` to apply the self-center utility at only small screen sizes at or below 480px or `active:md:self-center` to apply the self-center utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :self keyword ` p e `active:md:self-center` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:self keyword focus:self keyword hover:self keyword active align self center focus align self center hover align self center active:sm:self keyword focus:sm:self keyword hover:sm:self keyword active small screens align self center focus small screens align self center hover small screens align self center active:md:self keyword focus:md:self keyword hover:md:self keyword active medium screens align self center focus medium screens align self center hover medium screens align self center active:lg:self keyword focus:lg:self keyword hover:lg:self keyword active large screens align self center focus large screens align self center hover large screens align self center sources align-self https: developer mozilla org en-us docs web css align-self "}},{"slug":"flexbox-flex-basis","frontmatter":{"isBlog":false,"title":"flex basis","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s flex basis.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flexbox","author":"severin glaser","keywords":"flex basis, flex, grid","classNames":"","plainText":" greenCSS css class example minimum value maximum value step basis size per basis-1per flex-basis: 1%; basis-0per basis-100per 1% basis-auto basis-auto flex-basis: auto; basis-none basis-none flex-basis: 0%; basis-half basis-half flex-basis: 50%; basis-full basis-full flex-basis: 100%; how to work with flex basis 1 use the `basis size per` utilities to set the initial size of flex items 2 use the `basis keyword ` utility keywords ! greenCSS flex-basis images docs flex flex-basis webp?style=centerme  active focus and hover states greenCSS css class example range active:basis size per active :basis size per:active flex-basis: 1%; active:basis-0per to active:basis-100per focus:basis size per focus :basis size per:focus flex-basis: 1%; focus:basis-0per to focus:basis-100per hover:basis size per hover :basis size per:hover flex-basis: 1%; hover:basis-0per to hover:basis-100per greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:basis-10per` to only apply the basis-10per utility on hover ! greenCSS flex-basis hover images docs flex flex-basis-hover webp?style=centerme  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:basis-10per md: 480px 768px md:basis-10per lg: 768px 1080px lg:basis-10per greenCSS media queries can also be combined with active focus and hover states for example use `sm:basis-10per` to apply the basis-10per utility at only small screen sizes at or below 480px or `active:md:basis-10per` to apply the basis-10per utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :basis size per` p e `active:md:basis-50per` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:basis size per focus:basis size per hover:basis size per active basis focus basis hover basis active:sm:basis size per focus:sm:basis size per hover:sm:basis size per active small screens basis focus small screens basis hover small screens basis active:md:basis size per focus:md:basis size per hover:md:basis size per active medium screens basis focus medium screens basis hover medium screens basis active:lg:basis size per focus:lg:basis size per hover:lg:basis size per active large screens basis focus large screens basis hover large screens basis sources flex https: developer mozilla org en-us docs web css flex "}},{"slug":"flexbox-flex-direction","frontmatter":{"isBlog":false,"title":"flex direction","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s flex direction.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flexbox","author":"severin glaser","keywords":"flex direction, flex, flex-row, flex-row-reverse, flex-col, flex-col-reverse","classNames":"","plainText":" greenCSS css class example flex-row flex-row flex-direction: row; flex-row-reverse flex-row-reverse flex-direction: row-reverse; flex-col flex-col flex-direction: column; flex-col-reverse flex-row flex-direction: column-reverse; how to work with flex direction use the utility classes above to access your desired class row use `flex-row` to position flex elements horizontally ! greenCSS flex-direction row images docs flex flex-direction webp?style=centerme  row reversed use `flex-row-reverse` to position flex elements horizontally in the opposite direction ! greenCSS flex-direction row images docs flex flex-direction-row-reversed webp?style=centerme  column use `flex-col` to position flex elements vertically ! greenCSS flex-direction row images docs flex flex-direction-col webp?style=centerme  column reversed use `flex-col-reverse` to position flex elements vertically in the opposite direction ! greenCSS flex-direction row images docs flex flex-direction-col-reversed webp?style=centerme  active focus and hover states greenCSS css class example active:flex-row active :flex-row:active flex-direction: row; focus:flex-row focus :flex-row:focus flex-direction: row; hover:flex-row hover :flex-row:hover flex-direction: row; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:flex-row` to only apply the flex-row utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:flex-row md: 480px 768px md:flex-row lg: 768px 1080px lg:flex-row greenCSS media queries can also be combined with active focus and hover states for example use `sm:flex-row` to apply the flex-row utility at only small screen sizes at or below 480px or `active:md:flex-row` to apply the flex-row utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :flex-row` p e `active:md:flex-row` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:flex-row focus:flex-row hover:flex-row active flex direction focus flex direction hover flex direction active:sm:flex-row focus:sm:flex-row hover:sm:flex-row active small screens flex direction focus small screens flex direction hover small screens flex direction active:md:flex-row focus:md:flex-row hover:md:flex-row active medium screens flex direction focus medium screens flex direction hover medium screens flex direction active:lg:flex-row focus:lg:flex-row hover:lg:flex-row active large screens flex direction focus large screens flex direction hover large screens flex direction sources flex-direction https: developer mozilla org en-us docs web css flex-direction "}},{"slug":"flexbox-flex-grow","frontmatter":{"isBlog":false,"title":"flex grow","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s flex grow.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flexbox","author":"severin glaser","keywords":"flex, flexbox, flex grow","classNames":"","plainText":" greenCSS css class example grow grow flex-grow: 1; grow-none grow-none flex-grow: 0; how to work with flex grow use the utility classes above to access your desired class flex grow use `grow` to allow a flex item to grow and fill any available space within the selected div the second element in the image below uses the grow class ! greenCSS flex grow images docs flex grow webp?style=centerme  no flex grow use `grow-none` to prevent a flex item from growing the second element in the image below uses the grow-none class ! greenCSS grow none images docs flex grow-none webp?style=centerme  active focus and hover states greenCSS css class example active:grow active :grow:active flex-grow: 1; focus:grow focus :grow:focus flex-grow: 1; hover:grow hover :grow:hover flex-grow: 1; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:grow` to only apply the `grow` utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:grow md: 480px 768px md:grow lg: 768px 1080px lg:grow greenCSS media queries can also be combined with active focus and hover states for example use `sm:grow` to apply the grow utility at only small screen sizes at or below 480px or `active:md:grow` to apply the grow utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query : flex-grow-class ` p e `active:md:grow` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:grow focus:grow hover:grow active grow focus grow hover grow active:sm:grow focus:sm:grow hover:sm:grow active small screens grow focus small screens grow hover small screens grow active:md:grow focus:md:grow hover:md:grow active medium screens grow focus medium screens grow hover medium screens grow active:lg:grow focus:lg:grow hover:lg:grow active large screens grow focus large screens grow hover large screens grow sources flex-grow https: developer mozilla org en-us docs web css flex-grow "}},{"slug":"flexbox-flex-shrink","frontmatter":{"isBlog":false,"title":"flex shrink","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s flex shrink.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flexbox","author":"severin glaser","keywords":"flex, flexbox, flex shrink","classNames":"","plainText":" greenCSS css class example shrink shrink flex-shrink: 1; shrink-none shrink-none flex-shrink: 0; how to work with flex shrink use the utility classes above to access your desired class flex shrink use `shrink` to allow a flex item to shrink and fill any available space within the selected div the second element in the image below uses the shrink class ! greenCSS flex shrink images docs flex shrink webp?style=centerme  no flex shrink use `shrink-none` to prevent a flex item from shrinking the second element in the image below uses the shrink-none class ! greenCSS shrink none images docs flex shrink-none webp?style=centerme  active focus and hover states greenCSS css class example active:shrink active :shrink:active flex-shrink: 1; focus:shrink focus :shrink:focus flex-shrink: 1; hover:shrink hover :shrink:hover flex-shrink: 1; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:shrink` to only apply the `shrink` utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:shrink md: 480px 768px md:shrink lg: 768px 1080px lg:shrink greenCSS media queries can also be combined with active focus and hover states for example use `sm:shrink` to apply the shrink utility at only small screen sizes at or below 480px or `active:md:shrink` to apply the shrink utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query : flex-shrink-class ` p e `active:md:shrink` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:shrink focus:shrink hover:shrink active shrink focus shrink hover shrink active:sm:shrink focus:sm:shrink hover:sm:shrink active small screens shrink focus small screens shrink hover small screens shrink active:md:shrink focus:md:shrink hover:md:shrink active medium screens shrink focus medium screens shrink hover medium screens shrink active:lg:shrink focus:lg:shrink hover:lg:shrink active large screens shrink focus large screens shrink hover large screens shrink sources flex-shrink https: developer mozilla org en-us docs web css flex-shrink "}},{"slug":"flexbox-flex-wrap","frontmatter":{"isBlog":false,"title":"flex wrap","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s flex wrap.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flexbox","author":"severin glaser","keywords":"flex wrap, flex, flex-wrap-reverse, flex-nowrap","classNames":"","plainText":" greenCSS css class example flex-wrap flex-wrap flex-wrap: row; flex-wrap-reverse flex-wrap-reverse flex-wrap: wrap-reverse; flex-nowrap flex-nowrap flex-wrap: nowrap; how to work with flex wrap use the utility classes above to access your desired class nowrap use `flex-nowrap` to prevent flex items from wrapping non-flexible elements will overflow a container if it falls out of the viewport ! greenCSS flex-nowrap images docs flex flex-nowrap webp?style=centerme  flex wrap use `flex-wrap` to allow flex items to wrap normally ! greenCSS flex-wrap images docs flex flex-wrap-normal webp?style=centerme  flex wrap reverse use `flex-wrap-reverse` to wrap elements in reverse ! greenCSS flex-wrap images docs flex flex-wrap-reverse webp?style=centerme  active focus and hover states greenCSS css class example active:flex-wrap active :flex-wrap:active flex-wrap: row; focus:flex-wrap focus :flex-wrap:focus flex-wrap: row; hover:flex-wrap hover :flex-wrap:hover flex-wrap: row; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:flex-wrap` to only apply the flex-wrap utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:flex-wrap md: 480px 768px md:flex-wrap lg: 768px 1080px lg:flex-wrap greenCSS media queries can also be combined with active focus and hover states for example use `sm:flex-wrap` to apply the flex-wrap utility at only small screen sizes at or below 480px or `active:md:flex-wrap` to apply the flex-wrap utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query : flex-wrap-class ` p e `active:md:flex-wrap` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:flex-wrap focus:flex-wrap hover:flex-wrap active flex wrap focus flex wrap hover flex wrap active:sm:flex-wrap focus:sm:flex-wrap hover:sm:flex-wrap active small screens flex wrap focus small screens flex wrap hover small screens flex wrap active:md:flex-wrap focus:md:flex-wrap hover:md:flex-wrap active medium screens flex wrap focus medium screens flex wrap hover medium screens flex wrap active:lg:flex-wrap focus:lg:flex-wrap hover:lg:flex-wrap active large screens flex wrap focus large screens flex wrap hover large screens flex wrap sources flex-wrap https: developer mozilla org en-us docs web css flex-wrap "}},{"slug":"flexbox-flex","frontmatter":{"isBlog":false,"title":"flex","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s flex properties.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flexbox","author":"severin glaser","keywords":"flex, flexbox","classNames":"","plainText":" greenCSS css class example flex-none flex-none flex: none; flex-1 flex-1 flex: 1; flex-2 flex-2 flex: 2; flex-initial flex-initial flex: initial; flex-auto flex-auto flex: auto; how to work with flex values use the utility classes above to access your desired class flex none use `flex-none` to prevent flex elements from growing or shrinking the first div element has no flex value and only fits its size ! greenCSS flex-1 images docs flex flex-1 webp?style=centerme  flex 1 use `flex-1` to allow a flex item to grow and shrink as needed this will ignore the initial width the second and third div element have a flex-1 value ! greenCSS flex-1 images docs flex flex-1 webp?style=centerme  flex 2 use `flex-1` to allow a flex item to grow and shrink as needed this will ignore the initial width the third div element has a flex-2 value and is twice as wide as the second div ! greenCSS flex-1 images docs flex flex-2 webp?style=centerme  flex initial use `flex-initial` to allow a flex item to shrink but do not allow it to grow in regard to its initial size the third div element has a flex-initial class with a width of 250px the second div has a width of 500px and the first element has no width set at all ! greenCSS flex-initial images docs flex flex-initial webp?style=centerme  flex auto use `flex-auto` to allow a flex item to grow and shrink in regard to its initial size the third div element has a flex-auto class with a width of 250px the second div has a width of 500px and the first element has no width set at all ! greenCSS flex-auto images docs flex flex-auto webp?style=centerme  active focus and hover states greenCSS css class example active:flex-none active :flex-none:active flex-none: row; focus:flex-none focus :flex-none:focus flex-none: row; hover:flex-none hover :flex-none:hover flex-none: row; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:flex-none` to only apply the flex-none utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:flex-none md: 480px 768px md:flex-none lg: 768px 1080px lg:flex-none greenCSS media queries can also be combined with active focus and hover states for example use `sm:flex-none` to apply the flex-none utility at only small screen sizes at or below 480px or `active:md:flex-none` to apply the flex-none utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query : flex-none-class ` p e `active:md:flex-none` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:flex-none focus:flex-none hover:flex-none active flex none focus flex none hover flex none active:sm:flex-none focus:sm:flex-none hover:sm:flex-none active small screens flex none focus small screens flex none hover small screens flex none active:md:flex-none focus:md:flex-none hover:md:flex-none active medium screens flex none focus medium screens flex none hover medium screens flex none active:lg:flex-none focus:lg:flex-none hover:lg:flex-none active large screens flex none focus large screens flex none hover large screens flex none sources flexbox https: developer mozilla org en-us docs learn css css layout flexbox "}},{"slug":"flexbox-justify-content","frontmatter":{"isBlog":false,"title":"justify content","date":"apr 06. 2022","excerpt":"utility classes to control the alignment of grid and flex elements along the horizontal axis.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flexbox","author":"severin glaser","keywords":"justify content, flexbox, center elements, center items","classNames":"","plainText":" greenCSS css class example justify-start justify-start justify-content: flex-start; justify-end justify-end justify-content: flex-end; justify-center justify-center justify-content: flex-center; justify-between justify-between justify-content: space-between; justify-around justify-around justify-content: space-around; justify-evenly justify-evenly justify-content: space-evenly; how to work with justify use the `justify keyword ` utilities to set where elements are positioned justify start in the example below we use `justify-start` to position the elements at the beginning of the main horizontal axis ! greenCSS justify-start images docs flex justify-content-start webp?style=centerme  justify center in the example below we use `justify-center` to position the elements in the middle of the horizontal axis ! greenCSS justify-center images docs flex justify-content-center webp?style=centerme  justify end in the example below we use `justify-end` to position the elements at the end of the horizontal axis ! greenCSS justify-end images docs flex justify-content-end webp?style=centerme  justify between in the example below we use `justify-between` to position the elements along the horizontal axis with an even space between each element ! greenCSS justify-between images docs flex justify-between webp?style=centerme  justify around in the example below we use `justify-around` to position the elements along the horizontal axis with an even space between each element and side ! greenCSS justify-around images docs flex justify-around webp?style=centerme  justify evenly in the example below we use `justify-evenly` to position the elements along the horizontal axis with an equal space between each element and the corners ! greenCSS justify-evenly images docs flex justify-evenly webp?style=centerme  active focus and hover states greenCSS css class example active:justify keyword active :justify-start:active justify-content: flex-start; focus:justify keyword focus :justify-start:focus justify-content: flex-start; hover:justify keyword hover :justify-start:hover justify-content: flex-start; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:justify-start` to only apply the justify-start utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:justify-center md: 480px 768px md:justify-center lg: 768px 1080px lg:justify-center greenCSS media queries can also be combined with active focus and hover states for example use `sm:justify-center` to apply the justify-center utility at only small screen sizes at or below 480px or `active:md:justify-center` to apply the justify-center utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :justify keyword ` p e `active:md:justify-center` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:justify keyword focus:justify keyword hover:justify keyword active justify center focus justify center hover justify center active:sm:justify keyword focus:sm:justify keyword hover:sm:justify keyword active small screens justify center focus small screens justify center hover small screens justify center active:md:justify keyword focus:md:justify keyword hover:md:justify keyword active medium screens justify center focus medium screens justify center hover medium screens justify center active:lg:justify keyword focus:lg:justify keyword hover:lg:justify keyword active large screens justify center focus large screens justify center hover large screens justify center sources justify-content https: developer mozilla org en-us docs web css justify-content "}},{"slug":"flexbox-justify-items","frontmatter":{"isBlog":false,"title":"justify items","date":"apr 06. 2022","excerpt":"utility classes to control the alignment of grid elements along the horizontal axis.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flexbox","author":"severin glaser","keywords":"justify items, flexbox, center items, center elements","classNames":"","plainText":" greenCSS css class example justify-items-center justify-items-center justify-items: start; justify-items-end justify-items-end justify-items: end; justify-items-center justify-items-center justify-items: center; justify-items-stretch justify-items-stretch justify-items: stretch; how to work with justify items use the `justify-items keyword ` utilities to set where elements are positioned in contrast to justify self docs flexbox-justify-self all elements are targeted in this case justify items start in the example below we use `justify-items-center` to position the elements at the beginning of the main horizontal axis and within their parents container ! greenCSS justify-items-center images docs flex justify-items-center webp?style=centerme  justify items end in the example below we use `justify-items-end` to position the elements at the end of the main horizontal axis and within their parents container ! greenCSS justify-items-end images docs flex justify-items-end webp?style=centerme  justify items center in the example below we use `justify-items-center` to position the elements at the center of the main horizontal axis and within their parents container ! greenCSS justify-items-center images docs flex justify-items-center webp?style=centerme  justify items stretch in the example below we use `justify-items-stretch` to stretch the elements within their parents container ! greenCSS justify-items-stretch images docs flex justify-items-stretch webp?style=centerme  active focus and hover states greenCSS css class example active:justify-items keyword active :justify-items-center:active justify-items: center; focus:justify-items keyword focus :justify-items-center:focus justify-items: center; hover:justify-items keyword hover :justify-items-center:hover justify-items: center; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:justify-items-center` to only apply the justify-items-center utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:justify-items-center md: 480px 768px md:justify-items-center lg: 768px 1080px lg:justify-items-center greenCSS media queries can also be combined with active focus and hover states for example use `sm:justify-items-center` to apply the justify-items-center utility at only small screen sizes at or below 480px or `active:md:justify-items-center` to apply the justify-items-center utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :justify-items keyword ` p e `active:md:justify-items-center` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:justify-items keyword focus:justify-items keyword hover:justify-items keyword active justify items center focus justify items center hover justify items center active:sm:justify-items keyword focus:sm:justify-items keyword hover:sm:justify-items keyword active small screens justify items center focus small screens justify items center hover small screens justify items center active:md:justify-items keyword focus:md:justify-items keyword hover:md:justify-items keyword active medium screens justify items center focus medium screens justify items center hover medium screens justify items center active:lg:justify-items keyword focus:lg:justify-items keyword hover:lg:justify-items keyword active large screens justify items center focus large screens justify items center hover large screens justify items center sources justify-items https: developer mozilla org en-us docs web css justify-items "}},{"slug":"flexbox-justify-self","frontmatter":{"isBlog":false,"title":"justify self","date":"apr 06. 2022","excerpt":"utility classes to control the individual alignment of a single grid elements along the horizontal axis.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flexbox","author":"severin glaser","keywords":"justify self, grid, center self, center individual elements","classNames":"","plainText":" greenCSS css class example justify-self-auto justify-self-auto justify-self: auto; justify-self-start justify-self-start justify-self: start; justify-self-end justify-self-end justify-self: end; justify-self-center justify-self-center justify-self: center; justify-self-stretch justify-self-stretch justify-self: stretch; how to work with justify self use the `justify-self keyword ` utilities to set where elements are positioned in contrast to justify items docs flexbox-justify-items a unique element is targeted in this case justify self auto in the example below we use `justify-self-auto` to position the elements based on the parents utility class in this case `justify-self-stretch` will be applied ! greenCSS justify-self-auto images docs flex justify-items-stretch webp?style=centerme  justify self start in the example below we use `justify-self-start` to position the elements at the beginning of its main horizontal axis ! greenCSS justify-self-start images docs flex justify-self-start webp?style=centerme  justify self center in the example below we use `justify-self-center` to position the elements at the center of its main horizontal axis ! greenCSS justify-self-center images docs flex justify-self-center webp?style=centerme  justify-self-end in the example below we use `justify-self-center` to position the elements at the end of its main horizontal axis ! greenCSS justify-self-end images docs flex justify-self-end webp?style=centerme  justify-self-stretch in the example below we use `justify-self-stretch` to only stretch a single element ! greenCSS justify-self-stretch images docs flex justify-self-stretch webp?style=centerme  active focus and hover states greenCSS css class example active:justify-self keyword active :justify-self-center:active justify-self: center; focus:justify-self keyword focus :justify-self-center:focus justify-self: center; hover:justify-self keyword hover :justify-self-center:hover justify-self: center; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:justify-self-center` to only apply the justify-self-center utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:justify-self-center md: 480px 768px md:justify-self-center lg: 768px 1080px lg:justify-self-center greenCSS media queries can also be combined with active focus and hover states for example use `sm:justify-self-center` to apply the justify-self-center utility at only small screen sizes at or below 480px or `active:md:justify-self-center` to apply the justify-self-center utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :justify-self keyword ` p e `active:md:justify-self-center` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:justify-self keyword focus:justify-self keyword hover:justify-self keyword active justify self center focus justify self center hover justify self center active:sm:justify-self keyword focus:sm:justify-self keyword hover:sm:justify-self keyword active small screens justify self center focus small screens justify self center hover small screens justify self center active:md:justify-self keyword focus:md:justify-self keyword hover:md:justify-self keyword active medium screens justify self center focus medium screens justify self center hover medium screens justify self center active:lg:justify-self keyword focus:lg:justify-self keyword hover:lg:justify-self keyword active large screens justify self center focus large screens justify self center hover large screens justify self center sources justify-self https: developer mozilla org en-us docs web css justify-self "}},{"slug":"flexbox-order","frontmatter":{"isBlog":false,"title":"order","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s order.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flexbox","author":"severin glaser","keywords":"flex, flexbox, rrder","classNames":"","plainText":" greenCSS css class example order-first order-first order: -9999; order-last order-last order: 9999; order-none order-none order: 0; order-1 order-1 order: 1; order-2 order-2 order: 2; order-3 order-3 order: 3; order-4 order-4 order: 4; order-5 order-5 order: 5; order-6 order-6 order: 6; order-7 order-7 order: 7; order-8 order-8 order: 8; order-9 order-9 order: 9; order-10 order-10 order: 10; order-11 order-11 order: 11; order-12 order-12 order: 12; how to work with order use the utility classes above to access your desired class order works with flex and grid use `order order-values ` to render flex and grid elements in a different way in the dom ! greenCSS order images docs flex order webp?style=centerme  active focus and hover states greenCSS css class example active:order-first active :order-first:active order: -9999; focus:order-first focus :order-first:focus order: -9999; hover:order-first hover :order-first:hover order: -9999; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:order-first` to only apply the `order-first` utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:order-first md: 480px 768px md:order-first lg: 768px 1080px lg:order-first greenCSS media queries can also be combined with active focus and hover states for example use `sm:order-first` to apply the order-first utility at only small screen sizes at or below 480px or `active:md:order-first` to apply the order-first utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query : order-values ` p e `active:md:order-first` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:order-first focus:order-first hover:order-first active order focus order hover order active:sm:order-first focus:sm:order-first hover:sm:order-first active small screens order focus small screens order hover small screens order active:md:order-first focus:md:order-first hover:md:order-first active medium screens order focus medium screens order hover medium screens order active:lg:order-first focus:lg:order-first hover:lg:order-first active large screens order focus large screens order hover large screens order sources ordering-flex-items https: developer mozilla org en-us docs web css css flexible box layout ordering flex items "}},{"slug":"flexbox-place-content","frontmatter":{"isBlog":false,"title":"place content","date":"apr 06. 2022","excerpt":"utility classes to control the item alignment by justifying and aligning it.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flexbox","author":"severin glaser","keywords":"place content, flexbox, grid, place-content, center items","classNames":"","plainText":" greenCSS css class example place-content-center place-content-center place-content: center; place-content-start place-content-start place-content: start; place-content-end place-content-end place-content: end; place-content-between place-content-between place-content: space-between; place-content-around place-content-around place-content: space-around; place-content-evenly place-content-evenly place-content: space-evenly; place-content-stretch place-content-stretch place-content: stretch; how to work with place content use the `place-content keyword ` utilities to set where rows are positioned place content start in the example below we use `place-content-start` to position the elements at the beginning of the horizontal axis ! greenCSS place-content-start images docs flex place-content-start webp?style=centerme  place content center in the example below we use `place-content-center` to position the elements in the middle of the vertical and horizontal axis ! greenCSS place-content-center images docs flex place-content-center webp?style=centerme  place content end in the example below we use `place-content-end` to position the elements at the end of the horizontal axis ! greenCSS place-content-end images docs flex place-content-end webp?style=centerme  place content between in the example below we use `place-content-between` to position the elements at the corners ! greenCSS place-content-between images docs flex place-content-between webp?style=centerme  place content around in the example below we use `place-content-around` to position the elements with the same distance to each other ! greenCSS place-content-around images docs flex place-content-around webp?style=centerme  place content evenly in the example below we use `place-content-evenly` to position the elements with an even amount of space on the horizontal axis ! greenCSS place-content-evenly images docs flex place-content-evenly webp?style=centerme  place content stretch in the example below we use `place-content-stretch` to stretch the items within their grid system and along the horizontal axis ! greenCSS place-content-stretch images docs flex place-content-stretch webp?style=centerme  active focus and hover states greenCSS css class example active:place-content keyword active :place-content-center:active place-content: start; focus:place-content keyword focus :place-content-center:focus place-content: start; hover:place-content keyword hover :place-content-center:hover place-content: start; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:place-content-center` to only apply the place-content-center utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:place-content-center md: 480px 768px md:place-content-center lg: 768px 1080px lg:place-content-center greenCSS media queries can also be combined with active focus and hover states for example use `sm:place-content-center` to apply the place-content-center utility at only small screen sizes at or below 480px or `active:md:place-content-center` to apply the place-content-center utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :place-content keyword ` p e `active:md:place-content-center` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:place-content keyword focus:place-content keyword hover:place-content keyword active place content center focus place content center hover place content center active:sm:place-content keyword focus:sm:place-content keyword hover:sm:place-content keyword active small screens place content center focus small screens place content center hover small screens place content center active:md:place-content keyword focus:md:place-content keyword hover:md:place-content keyword active medium screens place content center focus medium screens place content center hover medium screens place content center active:lg:place-content keyword focus:lg:place-content keyword hover:lg:place-content keyword active large screens place content center focus large screens place content center hover large screens place content center sources place-content https: developer mozilla org en-us docs web css place-content "}},{"slug":"flexbox-place-items","frontmatter":{"isBlog":false,"title":"place items","date":"apr 06. 2022","excerpt":"utility classes to control the alignment and justification of an element simultaneously.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flexbox","author":"severin glaser","keywords":"place items, flexbox, align-items, center items, position items","classNames":"","plainText":" greenCSS css class example place-items-center place-items-center place-items: center; place-items-start place-items-start place-items: start; place-items-end place-items-end place-items: end; place-items-stretch place-items-stretch place-items: stretch; how to work with place items use the `place-items keyword ` utilities to set the position of flex and grid elements on the vertical axis place items start in the example below we use `place-items-start` to position the elements at the beginning of the parents horizontal and vertical axis ! greenCSS place-items-start images docs flex place-items-start webp?style=centerme  place items center in the example below we use `place-items-center` to position the elements in the middle of the parents horizontal and vertical axis ! greenCSS place-items-center images docs flex place-items-center webp?style=centerme  place items end in the example below we use `place-items-end` to position the elements at the end of the parents horizontal and vertical axis ! greenCSS place-items-end images docs flex place-items-end webp?style=centerme  place items stretch in the example below we use `place-items-stretch` to stretch the elements in order to cover the horizontal and vertical axis ! greenCSS place-items-stretch images docs flex place-items-stretch webp?style=centerme  active focus and hover states greenCSS css class example active:place-items keyword active :place-items-start:active place-items: start; focus:place-items keyword focus :place-items-start:focus place-items: start; hover:place-items keyword hover :place-items-start:hover place-items: start; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:place-items-start` to only apply the place-items-start utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:place-items-center md: 480px 768px md:place-items-center lg: 768px 1080px lg:place-items-center greenCSS media queries can also be combined with active focus and hover states for example use `sm:place-items-center` to apply the place-items-center utility at only small screen sizes at or below 480px or `active:md:place-items-center` to apply the place-items-center utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :place-items keyword ` p e `active:md:place-items-center` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:place-items keyword focus:place-items keyword hover:place-items keyword active place items center focus place items center hover place items center active:sm:place-items keyword focus:sm:place-items keyword hover:sm:place-items keyword active small screens place items center focus small screens place items center hover small screens place items center active:md:place-items keyword focus:md:place-items keyword hover:md:place-items keyword active medium screens place items center focus medium screens place items center hover medium screens place items center active:lg:place-items keyword focus:lg:place-items keyword hover:lg:place-items keyword active large screens place items center focus large screens place items center hover large screens place items center sources place-items https: developer mozilla org en-us docs web css place-items "}},{"slug":"flexbox-place-self","frontmatter":{"isBlog":false,"title":"place self","date":"apr 06. 2022","excerpt":"utility classes to control the alignment of items in relation to its horizontal and vertical axis - in regard to its parent container.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flexbox","author":"severin glaser","keywords":"place self, flexbox, align-items, center items, position items","classNames":"","plainText":" greenCSS css class example place-self-auto place-self-auto place-self: auto; place-self-center place-self-center place-self: center; place-self-start place-self-start place-self: start; place-self-end place-self-end place-self: end; place-self-stretch place-self-stretch place-self: stretch; how to work with place self use the `place-self keyword ` utilities to set the individual position of an element place self auto in the example below we use `place-self-auto` to set the width and height automatically according to the parents requirements ! greenCSS place-self-auto images docs flex place-self-auto-stretch webp?style=centerme  place self start in the example below we use `place-self-start` to position the elements at the beginning of the horizontal and vertical axis ! greenCSS place-self-start images docs flex place-self-start webp?style=centerme  items-center in the example below we use `place-self-center` to position the elements in the middle of the horizontal and vertical axis ! greenCSS place-self-center images docs flex place-self-center webp?style=centerme  items-end in the example below we use `place-self-end` to position the elements at the end of the horizontal and vertical axis ! greenCSS place-self-end images docs flex place-self-end webp?style=centerme  items-stretch in the example below we use `place-self-stretch` to stretch the elements in order to cover the horizontal and vertical axis ! greenCSS place-self-stretch images docs flex place-self-auto-stretch webp?style=centerme  active focus and hover states greenCSS css class example active:place-self keyword active :place-self-start:active place-self: start; focus:place-self keyword focus :place-self-start:focus place-self: start; hover:place-self keyword hover :place-self-start:hover place-self: start; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:place-self-start` to only apply the place-self-start utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:place-self-center md: 480px 768px md:place-self-center lg: 768px 1080px lg:place-self-center greenCSS media queries can also be combined with active focus and hover states for example use `sm:place-self-center` to apply the place-self-center utility at only small screen sizes at or below 480px or `active:md:place-self-center` to apply the place-self-center utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :place-self keyword ` p e `active:md:place-self-center` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:place-self keyword focus:place-self keyword hover:place-self keyword active place self center focus place self center hover place self center active:sm:place-self keyword focus:sm:place-self keyword hover:sm:place-self keyword active small screens place self center focus small screens place self center hover small screens place self center active:md:place-self keyword focus:md:place-self keyword hover:md:place-self keyword active medium screens place self center focus medium screens place self center hover medium screens place self center active:lg:place-self keyword focus:lg:place-self keyword hover:lg:place-self keyword active large screens place self center focus large screens place self center hover large screens place self center sources place-self https: developer mozilla org en-us docs web css place-self "}},{"slug":"grid-auto-columns","frontmatter":{"isBlog":false,"title":"grid auto columns","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s grid auto columns.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"grid","author":"severin glaser","keywords":"grid, grid auto columns, gird col, grid columns, grid layout","classNames":"","plainText":" greenCSS css class example auto-cols-auto auto-cols-auto grid-auto-columns: auto; auto-cols-min auto-cols-min grid-auto-columns: min-content; auto-cols-max auto-cols-max grid-auto-columns: max-content; auto-cols-fr auto-cols-fr grid-auto-columns: minmax 0 1fr ; define the placement of elements in a grid row use the auto-cols keyword to control the size width & height of an element in grid columns control the size in the example below we use a grid system `grid` with a `grid-flow-col` direction which stretches to the maximum size of the object `auto-cols-max` the elements are therefore stretched to the max direction  active focus and hover states with greenCSS you can conditionally apply utility classes in different states by using variant modifiers like active focus or hover for example use `hover:auto-cols-auto` to apply the `auto-cols-auto` utility class on hover events greenCSS css class example active:auto-cols-auto active :auto-cols-auto:active grid-auto-columns: auto; focus:auto-cols-auto focus :auto-cols-auto:focus grid-auto-columns: auto; hover:auto-cols-auto hover :auto-cols-auto:hover grid-auto-columns: auto;  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:auto-cols-auto md: 480px 768px md:auto-cols-auto lg: 768px 1080px lg:auto-cols-auto greenCSS media queries can also be combined with active focus and hover states for example use `sm:auto-cols-auto` to apply the auto-cols-auto utility at only small screen sizes at or below 480px or `hover:md:auto-cols-auto` to apply the auto-cols-auto utility at only between small screen sizes 480px and medium screen sizes 768px on hover 1 the structure for row-span is as follows: ` conditional state : media query :auto-cols keyword ` p e `active:md:auto-cols-auto`  executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:auto-cols-auto focus:auto-cols-auto hover:auto-cols-auto active grid auto columns focus grid auto columns hover grid auto columns active:sm:auto-cols-auto focus:sm:auto-cols-auto hover:sm:auto-cols-auto active small screens grid auto columns focus small screens grid auto columns hover small screens grid auto columns active:md:auto-cols-auto focus:md:auto-cols-auto hover:md:auto-cols-auto active medium screens grid auto columns focus medium screens grid auto columns hover medium screens grid auto columns active:lg:auto-cols-auto focus:lg:auto-cols-auto hover:lg:auto-cols-auto active large screens grid auto columns focus large screens grid auto columns hover large screens grid auto columns sources grid-auto-columns https: developer mozilla org en-us docs web css grid-auto-columns "}},{"slug":"grid-auto-flow","frontmatter":{"isBlog":false,"title":"grid auto flow","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s grid auto flow.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"grid","author":"severin glaser","keywords":"grid, grid row start, grid row end, grid layout","classNames":"","plainText":" greenCSS css class example grid-flow-row grid-flow-row grid-auto-flow: row; grid-flow-col grid-flow-col grid-auto-flow: column; grid-flow-row-dense grid-flow-row-dense grid-auto-flow: row dense; grid-flow-col-dense grid-flow-row grid-auto-flow: column dense; define the placement of elements in a grid row use the grid-flow keyword set the direction of an element by using auto-placing algorithm control the direction in the example below we use 3 grid rows `grid-rows-3` with a `grid-flow-col` direction the elements are therefore placed in a vertical direction ! greenCSS grid auto flow images docs flexbox-auto-flow webp?style=centerme  active focus and hover states with greenCSS you can conditionally apply utility classes in different states by using variant modifiers like active focus or hover for example use `hover:grid-flow-row` to apply the `grid-flow-row` utility class on hover events greenCSS css class example active:grid-flow-row active :grid-flow-row:active grid-auto-flow: row; focus:grid-flow-row focus :grid-flow-row:focus grid-auto-flow: row; hover:grid-flow-row hover :grid-flow-row:hover grid-auto-flow: row;  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:grid-flow-row md: 480px 768px md:grid-flow-row lg: 768px 1080px lg:grid-flow-row greenCSS media queries can also be combined with active focus and hover states for example use `sm:grid-flow-row` to apply the grid-flow-row utility at only small screen sizes at or below 480px or `hover:md:grid-flow-row` to apply the grid-flow-row utility at only between small screen sizes 480px and medium screen sizes 768px on hover 1 the structure for row-span is as follows: ` conditional state : media query :grid-flow keyword ` p e `active:md:grid-flow-row`  executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:grid-flow-row focus:grid-flow-row hover:grid-flow-row active grid auto flow focus grid auto flow hover grid auto flow active:sm:grid-flow-row focus:sm:grid-flow-row hover:sm:grid-flow-row active small screens grid auto flow focus small screens grid auto flow hover small screens grid auto flow active:md:grid-flow-row focus:md:grid-flow-row hover:md:grid-flow-row active medium screens grid auto flow focus medium screens grid auto flow hover medium screens grid auto flow active:lg:grid-flow-row focus:lg:grid-flow-row hover:lg:grid-flow-row active large screens grid auto flow focus large screens grid auto flow hover large screens grid auto flow sources grid-auto-flow https: developer mozilla org en-us docs web css grid-auto-flow "}},{"slug":"grid-auto-rows","frontmatter":{"isBlog":false,"title":"grid auto rows","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s grid auto rows.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"grid","author":"severin glaser","keywords":"grid, grid auto rows, gird row, grid rows, grid layout","classNames":"","plainText":" greenCSS css class example auto-rows-auto auto-rows-auto grid-auto-rows: auto; auto-rows-min auto-rows-min grid-auto-rows: min-content; auto-rows-max auto-rows-max grid-auto-rows: max-content; auto-rows-fr auto-rows-fr grid-auto-rows: minmax 0 1fr ; define the placement of elements in a grid row use the auto-rows keyword to control the size width & height of an element in grid rows control the size in the example below we use a grid system `grid` with a `grid-flow-row` direction which stretches to the maximum size of the object `auto-rows-max` the elements are therefore stretched to the max direction  active focus and hover states with greenCSS you can conditionally apply utility classes in different states by using variant modifiers like active focus or hover for example use `hover:auto-rows-auto` to apply the `auto-rows-auto` utility class on hover events greenCSS css class example active:auto-rows-auto active :auto-rows-auto:active grid-auto-rows: auto; focus:auto-rows-auto focus :auto-rows-auto:focus grid-auto-rows: auto; hover:auto-rows-auto hover :auto-rows-auto:hover grid-auto-rows: auto;  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:auto-rows-auto md: 480px 768px md:auto-rows-auto lg: 768px 1080px lg:auto-rows-auto greenCSS media queries can also be combined with active focus and hover states for example use `sm:auto-rows-auto` to apply the auto-rows-auto utility at only small screen sizes at or below 480px or `hover:md:auto-rows-auto` to apply the auto-rows-auto utility at only between small screen sizes 480px and medium screen sizes 768px on hover 1 the structure for row-span is as follows: ` conditional state : media query :auto-rows keyword ` p e `active:md:auto-rows-auto`  executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:auto-rows-auto focus:auto-rows-auto hover:auto-rows-auto active grid auto rows focus grid auto rows hover grid auto rows active:sm:auto-rows-auto focus:sm:auto-rows-auto hover:sm:auto-rows-auto active small screens grid auto rows focus small screens grid auto rows hover small screens grid auto rows active:md:auto-rows-auto focus:md:auto-rows-auto hover:md:auto-rows-auto active medium screens grid auto rows focus medium screens grid auto rows hover medium screens grid auto rows active:lg:auto-rows-auto focus:lg:auto-rows-auto hover:lg:auto-rows-auto active large screens grid auto rows focus large screens grid auto rows hover large screens grid auto rows sources grid-auto-rows https: developer mozilla org en-us docs web css grid-auto-rows "}},{"slug":"grid-column-start-end","frontmatter":{"isBlog":false,"title":"grid column start | end","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s grid column start and end.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"grid","author":"severin glaser","keywords":"grid, grid column start, grid column end, grid layout","classNames":"","plainText":" greenCSS css class example col-auto col-auto grid-column: auto; col-span-1 col-span-1 grid-column: grid-column: 1; col-span-2 col-span-2 grid-column: grid-column: 2; col-span-3 col-span-3 grid-column: grid-column: 3; col-span-4 col-span-4 grid-column: grid-column: 4; col-span-5 col-span-5 grid-column: grid-column: 5; col-span-6 col-span-6 grid-column: grid-column: 6; col-span-7 col-span-7 grid-column: grid-column: 7; col-span-8 col-span-8 grid-column: grid-column: 8; col-span-9 col-span-9 grid-column: grid-column: 9; col-span-10 col-span-10 grid-column: rgrid-column: 10; col-span-11 col-span-11 grid-column: rgrid-column: 11; col-span-12 col-span-12 grid-column: rgrid-column: 12; col-span-full col-span-full grid-column: math div 1 -1 ; col-start-auto col-start-auto grid-column-start: auto; col-start-1 col-start-1 grid-column-start: grid-column-start: 1; col-start-2 col-start-2 grid-column-start: grid-column-start: 2; col-start-3 col-start-3 grid-column-start: grid-column-start: 3; col-start-4 col-start-4 grid-column-start: grid-column-start: 4; col-start-5 col-start-5 grid-column-start: grid-column-start: 5; col-start-6 col-start-6 grid-column-start: grid-column-start: 6; col-start-7 col-start-7 grid-column-start: grid-column-start: 7; col-start-8 col-start-8 grid-column-start: grid-column-start: 8; col-start-9 col-start-9 grid-column-start: grid-column-start: 9; col-start-10 col-start-10 grid-column-start: rgrid-column-start: 10; col-start-11 col-start-11 grid-column-start: rgrid-column-start: 11; col-start-12 col-start-12 grid-column-start: rgrid-column-start: 12; col-start-full col-start-full grid-column-start: math div 1 -1 ; col-end-auto col-end-auto grid-column-end: auto; col-end-1 col-end-1 grid-column-end: grid-column-end: 1; col-end-2 col-end-2 grid-column-end: grid-column-end: 2; col-end-3 col-end-3 grid-column-end: grid-column-end: 3; col-end-4 col-end-4 grid-column-end: grid-column-end: 4; col-end-5 col-end-5 grid-column-end: grid-column-end: 5; col-end-6 col-end-6 grid-column-end: grid-column-end: 6; col-end-7 col-end-7 grid-column-end: grid-column-end: 7; col-end-8 col-end-8 grid-column-end: grid-column-end: 8; col-end-9 col-end-9 grid-column-end: grid-column-end: 9; col-end-10 col-end-10 grid-column-end: rgrid-column-end: 10; col-end-11 col-end-11 grid-column-end: rgrid-column-end: 11; col-end-12 col-end-12 grid-column-end: rgrid-column-end: 12; col-end-full col-end-full grid-column-end: math div 1 -1 ; define the placement of elements in a grid use the col-span number set the column amount in a css grid the range extends from 1-12 set when and where the element starts and ends ⚠️ note that css grid lines start at 1 and not 0 in firefox you can easily head to your console and click `grid` in the source code it will show the exact numbers in your grid ! greenCSS grid source code firefox images docs flex source-code webp?style=centerme ! greenCSS grid source code result firefox images docs flex source-code-result webp?style=centerme example in the example below we assume a maximum number of 6 grid grid-column `grid-col-6` next to each other with a gap of 30 pixels `gap-30px` and a padding of 50px `p-50px` the first child element starts at position 3 and ends at position 4 in the grid the second element starts at position 1 and ends at position 3 the third div element spawns over 4 columns and ends at position 7 the fourth element stretches over the entire grid it starts at position 1 and ends at position 7 ! greenCSS grid column start end images docs flexbox-columns-start-end webp?style=centerme  active focus and hover states with greenCSS you can conditionally apply utility classes in different states by using variant modifiers like active focus or hover for example use `hover:col-span-2` to apply the `col-span-2` utility class on hover events greenCSS css class example active:col-span-1 active :col-span-1:active grid-column: grid-column: 1; focus:col-span-1 focus :col-span-1:focus grid-column: grid-column: 1; hover:col-span-1 hover :col-span-1:hover grid-column: grid-column: 1;  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:col-span-1 md: 480px 768px md:col-span-1 lg: 768px 1080px lg:col-span-1 greenCSS media queries can also be combined with active focus and hover states for example use `sm:col-span-1` to apply the col-span-1 utility at only small screen sizes at or below 480px or `hover:md:col-span-1` to apply the col-span-1 utility at only between small screen sizes 480px and medium screen sizes 768px on hover 1 the structure for col-span is as follows: ` conditional state : media query :col-span numbers ` p e `active:md:col-span-1` 2 the structure for col-start is as follows: ` conditional state : media query :col-start numbers ` p e `active:md:col-start-1` 3 the structure for col-end is as follows: ` conditional state : media query :col-end numbers ` p e `active:md:col-end-1`  executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:col-span-1 focus:col-span-1 hover:col-span-1 active grid column span focus grid column span hover grid column span active:sm:col-span-1 focus:sm:col-span-1 hover:sm:col-span-1 active small screens grid column span focus small screens grid column span hover small screens grid column span active:md:col-span-1 focus:md:col-span-1 hover:md:col-span-1 active medium screens grid column span focus medium screens grid column span hover medium screens grid column span active:lg:col-span-1 focus:lg:col-span-1 hover:lg:col-span-1 active large screens grid column span focus large screens grid column span hover large screens grid column span sources grid-column-start https: developer mozilla org en-us docs web css grid-column-start grid-column-end https: developer mozilla org en-us docs web css grid-column-end "}},{"slug":"grid-gap","frontmatter":{"isBlog":false,"title":"gap","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s gap.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"grid","author":"severin glaser","keywords":"gap, column-gap, row-gap","classNames":"","plainText":" greenCSS css class example minimum value maximum value step gap size px gap-1px gap: 1px; gap-0px gap-100px 1px gap-x size px gap-x-1px column-gap: 1px; gap-x-0px gap-x-100px 1px gap-y size px gap-y-1px row-gap: 1px; gap-x-0px gap-x-100px 1px gap size rem gap-11rem gap: 1rem; gap-11rem gap-30rem 1rem gap-x size rem gap-x-11rem column-gap: 1rem; gap-x-11rem gap-x-30rem 1rem gap-y size rem gap-y-11rem row-gap: 1rem; gap-x-11rem gap-x-30rem 1rem how to work with gap use the `gap number unit ` utilities to set the initial gutter within a flexbox or grid system 1 use `gap number unit ` for a general gutter in the vertical and horizontal direction 2 use `gap-x number unit ` for a gutter in a horizontal direction 3 use `gap-y number unit ` for a gutter in a vertical direction in the example below we to have a gap of 20 pixels `gap-20px` ! greenCSS gap images docs flex gap webp?style=centerme  active focus and hover states greenCSS css class example range active:gap size px active :gap size px:active flex-gap: 1%; active:gap-0px to active:gap-100px focus:gap size px focus :gap size px:focus flex-gap: 1%; focus:gap-0px to focus:gap-100px hover:gap size px hover :gap size px:hover flex-gap: 1%; hover:gap-0px to hover:gap-100px greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:gap-10px` to only apply the gap-10px utility on hover ! greenCSS flex-gap hover images docs flex flex-gap-hover webp?style=centerme  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:gap-10px md: 480px 768px md:gap-10px lg: 768px 1080px lg:gap-10px greenCSS media queries can also be combined with active focus and hover states for example use `sm:gap-10px` to apply the gap-10px utility at only small screen sizes at or below 480px or `active:md:gap-10px` to apply the gap-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :gap number unit ` p e `active:md:gap-50px` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:gap size px focus:gap size px hover:gap size px active gap focus gap hover gap active:sm:gap size px focus:sm:gap size px hover:sm:gap size px active small screens gap focus small screens gap hover small screens gap active:md:gap size px focus:md:gap size px hover:md:gap size px active medium screens gap focus medium screens gap hover medium screens gap active:lg:gap size px focus:lg:gap size px hover:lg:gap size px active large screens gap focus large screens gap hover large screens gap sources gap https: developer mozilla org en-us docs web css gap "}},{"slug":"grid-row-start-end","frontmatter":{"isBlog":false,"title":"grid row start | end","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s grid row start and end.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"grid","author":"severin glaser","keywords":"grid, grid row start, grid row end, grid layout","classNames":"","plainText":" greenCSS css class example row-auto row-auto grid-row: auto; row-span-1 row-span-1 grid-row: grid-row: 1; row-span-2 row-span-2 grid-row: grid-row: 2; row-span-3 row-span-3 grid-row: grid-row: 3; row-span-4 row-span-4 grid-row: grid-row: 4; row-span-5 row-span-5 grid-row: grid-row: 5; row-span-6 row-span-6 grid-row: grid-row: 6; row-span-7 row-span-7 grid-row: grid-row: 7; row-span-8 row-span-8 grid-row: grid-row: 8; row-span-9 row-span-9 grid-row: grid-row: 9; row-span-10 row-span-10 grid-row: rgrid-row: 10; row-span-11 row-span-11 grid-row: rgrid-row: 11; row-span-12 row-span-12 grid-row: rgrid-row: 12; row-span-full row-span-full grid-row: math div 1 -1 ; row-start-auto row-start-auto grid-row-start: auto; row-start-1 row-start-1 grid-row-start: 1; row-start-2 row-start-2 grid-row-start: 2; row-start-3 row-start-3 grid-row-start: 3; row-start-4 row-start-4 grid-row-start: 4; row-start-5 row-start-5 grid-row-start: 5; row-start-6 row-start-6 grid-row-start: 6; row-start-7 row-start-7 grid-row-start: 7; row-start-8 row-start-8 grid-row-start: 8; row-start-9 row-start-9 grid-row-start: 9; row-start-10 row-start-10 grid-row-start: 10; row-start-11 row-start-11 grid-row-start: 11; row-start-12 row-start-12 grid-row-start: 12; row-end-auto row-end-auto grid-row-end: auto; row-end-1 row-end-1 grid-row-end: 1; row-end-2 row-end-2 grid-row-end: 2; row-end-3 row-end-3 grid-row-end: 3; row-end-4 row-end-4 grid-row-end: 4; row-end-5 row-end-5 grid-row-end: 5; row-end-6 row-end-6 grid-row-end: 6; row-end-7 row-end-7 grid-row-end: 7; row-end-8 row-end-8 grid-row-end: 8; row-end-9 row-end-9 grid-row-end: 9; row-end-10 row-end-10 grid-row-end: 10; row-end-11 row-end-11 grid-row-end: 11; row-end-12 row-end-12 grid-row-end: 12; define the placement of elements in a grid row use the row-span number set the row amount in a css grid the range extends from 1-12 set when and where the element starts and ends ⚠️ note that css grid lines start at 1 and not 0 in firefox you can easily head to your console and click `grid` in the source code it will show the exact numbers in your grid ! greenCSS grid row source code firefox images docs flex source-code-row webp?style=centerme ! greenCSS grid row source code result firefox images docs flex source-code-result-row webp?style=centerme example in the example below we assume a maximum number of 3 grid grid-row `grid-rows-3` next to each other with a gap of 30 pixels `gap-15px` and a padding of 50px `p-50px` the first child element starts at position 3 and ends at position 4 in the grid the second element starts at position 1 and ends at position 3 the third div element spawns over 4 rows and ends at position 7 the fourth element stretches over the entire grid it starts at position 1 and ends at position 7 ! greenCSS grid row start end images docs flexbox-rows-start-end webp?style=centerme  row start & end use either the row-start number or row-end number to let an element start stop or end at a certain position in the grid the range extends from 1-12 s ⚠️ note that css grid lines start at 1 and not 0 for a better overview and easier coding experience cf define the placement of elements in a grid row define-the-placement-of-elements-in-a-grid-row ! greenCSS grid row start end example images docs flexbox-rows-start-end-example webp?style=centerme  active focus and hover states with greenCSS you can conditionally apply utility classes in different states by using variant modifiers like active focus or hover for example use `hover:row-span-1` to apply the `row-span-1` utility class on hover events greenCSS css class example active:row-span-1 active :row-span-1:active grid-row: grid-row: 1; focus:row-span-1 focus :row-span-1:focus grid-row: grid-row: 1; hover:row-span-1 hover :row-span-1:hover grid-row: grid-row: 1;  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:row-span-1 md: 480px 768px md:row-span-1 lg: 768px 1080px lg:row-span-1 greenCSS media queries can also be combined with active focus and hover states for example use `sm:row-span-1` to apply the row-span-1 utility at only small screen sizes at or below 480px or `hover:md:row-span-1` to apply the row-span-1 utility at only between small screen sizes 480px and medium screen sizes 768px on hover 1 the structure for row-span is as follows: ` conditional state : media query :row-span numbers ` p e `active:md:row-span-1` 2 the structure for row-start is as follows: ` conditional state : media query :row-start numbers ` p e `active:md:row-start-1` 3 the structure for row-end is as follows: ` conditional state : media query :row-end numbers ` p e `active:md:row-end-1`  executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:row-span-1 focus:row-span-1 hover:row-span-1 active grid row span focus grid row span hover grid row span active:sm:row-span-1 focus:sm:row-span-1 hover:sm:row-span-1 active small screens grid row span focus small screens grid row span hover small screens grid row span active:md:row-span-1 focus:md:row-span-1 hover:md:row-span-1 active medium screens grid row span focus medium screens grid row span hover medium screens grid row span active:lg:row-span-1 focus:lg:row-span-1 hover:lg:row-span-1 active large screens grid row span focus large screens grid row span hover large screens grid row span sources grid-row-start https: developer mozilla org en-us docs web css grid-row-start grid-row-end https: developer mozilla org en-us docs web css grid-row-end "}},{"slug":"grid-template-columns","frontmatter":{"isBlog":false,"title":"grid template columns","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s grid template columns.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"grid","author":"severin glaser","keywords":"grid, grid template column, grid col, grid columns","classNames":"","plainText":" greenCSS css class example grid-col-none grid-col-none grid-template-columns: none ; grid-col-1 grid-col-1 grid-template-columns: repeat 1 minmax 0 1fr ; grid-col-2 grid-col-2 grid-template-columns: repeat 2 minmax 0 1fr ; grid-col-3 grid-col-3 grid-template-columns: repeat 3 minmax 0 1fr ; grid-col-4 grid-col-4 grid-template-columns: repeat 4 minmax 0 1fr ; grid-col-5 grid-col-5 grid-template-columns: repeat 5 minmax 0 1fr ; grid-col-6 grid-col-6 grid-template-columns: repeat 6 minmax 0 1fr ; grid-col-7 grid-col-7 grid-template-columns: repeat 7 minmax 0 1fr ; grid-col-8 grid-col-8 grid-template-columns: repeat 8 minmax 0 1fr ; grid-col-9 grid-col-9 grid-template-columns: repeat 9 minmax 0 1fr ; grid-col-10 grid-col-10 grid-template-columns: repeat 10 minmax 0 1fr ; grid-col-11 grid-col-11 grid-template-columns: repeat 11 minmax 0 1fr ; grid-col-12 grid-col-12 grid-template-columns: repeat 12 minmax 0 1fr ; define the amount of columns in a grid use the grid-col number utilities to create grids easily the range extends from 1-12 in the example below we assume a maximum number of 3 grid columns `grid-cols-3` next to each other with a gap of 30 pixels `gap-30px` ! greenCSS grid template columns images docs flexbox-columns webp?style=centerme  active focus and hover states greenCSS css class example active:grid-col-1 active :grid-col-1:active grid-template-columns: repeat 1 minmax 0 1fr ; focus:grid-col-1 focus :grid-col-1:focus grid-template-columns: repeat 1 minmax 0 1fr ; hover:grid-col-1 hover :grid-col-1:hover grid-template-columns: repeat 1 minmax 0 1fr ; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:grid-col-1` to only apply the `grid-col-1` utility on hover in the example below we consider there is a maximum number of 3 columns next to each other which means that there are three child elements in the same column if you hover over the parent object the number of columns changes to one as a result all child elements will occupy one column  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:grid-col-1 md: 480px 768px md:grid-col-1 lg: 768px 1080px lg:grid-col-1 greenCSS media queries can also be combined with active focus and hover states for example use `sm:grid-col-1` to apply the grid-col-1 utility at only small screen sizes at or below 480px or `hover:md:grid-col-1` to apply the grid-col-1 utility at only between small screen sizes 480px and medium screen sizes 768px on hover 1 the structure is as follows: ` conditional state : media query :grid-col numbers ` p e `active:md:grid-col-1` responsive example working with cross-screen displays has never been easier using two greenCSS classes your grid will be compatible with smartphones and desktop displays in no time 1 the structure is as follows: ` media query :grid-col numbers ` p e `sm:grid-col-1` 1 the default value has no media query and will be applied for all screens: `grid-col numbers ` p e `grid-col-1` ! greenCSS responsive macbook grid template columns images docs flex macbook-grid-columns webp?style=centerme ! greenCSS responsive iphone grid template columns images docs flex iphone-grid-columns webp?style=centerme  executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:grid-col-1 focus:grid-col-1 hover:grid-col-1 active grid template columns focus grid template columns hover grid template columns active:sm:grid-col-1 focus:sm:grid-col-1 hover:sm:grid-col-1 active small screens grid template columns focus small screens grid template columns hover small screens grid template columns active:md:grid-col-1 focus:md:grid-col-1 hover:md:grid-col-1 active medium screens grid template columns focus medium screens grid template columns hover medium screens grid template columns active:lg:grid-col-1 focus:lg:grid-col-1 hover:lg:grid-col-1 active large screens grid template columns focus large screens grid template columns hover large screens grid template columns sources grid-template-columns https: developer mozilla org en-us docs web css grid-template-columns "}},{"slug":"grid-template-rows","frontmatter":{"isBlog":false,"title":"grid template rows","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s grid template rows.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"grid","author":"severin glaser","keywords":"grid, grid template rows, grid row, grid rows","classNames":"","plainText":" greenCSS css class example grid-rows-none grid-rows-none grid-template-rows: none ; grid-rows-1 grid-rows-1 grid-template-rows: repeat 1 minmax 0 1fr ; grid-rows-2 grid-rows-2 grid-template-rows: repeat 2 minmax 0 1fr ; grid-rows-3 grid-rows-3 grid-template-rows: repeat 3 minmax 0 1fr ; grid-rows-4 grid-rows-4 grid-template-rows: repeat 4 minmax 0 1fr ; grid-rows-5 grid-rows-5 grid-template-rows: repeat 5 minmax 0 1fr ; grid-rows-6 grid-rows-6 grid-template-rows: repeat 6 minmax 0 1fr ; grid-rows-7 grid-rows-7 grid-template-rows: repeat 7 minmax 0 1fr ; grid-rows-8 grid-rows-8 grid-template-rows: repeat 8 minmax 0 1fr ; grid-rows-9 grid-rows-9 grid-template-rows: repeat 9 minmax 0 1fr ; grid-rows-10 grid-rows-10 grid-template-rows: repeat 10 minmax 0 1fr ; grid-rows-11 grid-rows-11 grid-template-rows: repeat 11 minmax 0 1fr ; grid-rows-12 grid-rows-12 grid-template-rows: repeat 12 minmax 0 1fr ; define the amount of rows in a grid use the grid-rows number utilities to create grids easily the range extends from 1-12 in the example below we assume a maximum number of 4 grid rows vertical direction `grid-rows-4` below each other with a gap of 30 pixels `gap-30px` ! greenCSS grid template rows images docs flexbox-rows webp?style=centerme  active focus and hover states greenCSS css class example active:grid-rows-1 active :grid-rows-1:active grid-template-rows: repeat 1 minmax 0 1fr ; focus:grid-rows-1 focus :grid-rows-1:focus grid-template-rows: repeat 1 minmax 0 1fr ; hover:grid-rows-1 hover :grid-rows-1:hover grid-template-rows: repeat 1 minmax 0 1fr ; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:grid-rows-1` to only apply the `grid-rows-1` utility on hover in the example below we consider there is a maximum number of 3 rows next to each other which means that there are three child elements in the same column if you hover over the parent object the number of rows changes to one as a result all child elements will occupy one column  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:grid-rows-1 md: 480px 768px md:grid-rows-1 lg: 768px 1080px lg:grid-rows-1 greenCSS media queries can also be combined with active focus and hover states for example use `sm:grid-rows-1` to apply the grid-rows-1 utility at only small screen sizes at or below 480px or `hover:md:grid-rows-1` to apply the grid-rows-1 utility at only between small screen sizes 480px and medium screen sizes 768px on hover 1 the structure is as follows: ` conditional state : media query :grid-rows numbers ` p e `active:md:grid-rows-1` responsive example working with cross-screen displays has never been easier using two greenCSS classes your grid will be compatible with smartphones and desktop displays in no time 1 the structure is as follows: ` media query :grid-rows numbers ` p e `sm:grid-rows-1` 1 the default value has no media query and will be applied for all screens: `grid-rows numbers ` p e `grid-rows-1` ! greenCSS responsive macbook grid template rows images docs flex macbook-grid-rows webp?style=centerme ! greenCSS responsive iphone grid template rows images docs flex iphone-grid-rows webp?style=centerme in the example below we use `grid-rows-4 grid-flow-col sm:grid-rows-1 sm:grid-flow-row` for a default grid with 4 vertical rows which spreads in a column flow horizontally for small screens the class `sm:grid-rows-1 sm:grid-flow-row` is being used which creates a horizontal flow for the element which covers the entire screen by the way you do not have to use `sm:grid-rows-1` as the horizontal flow class `sm:grid-flow-row` takes over control for the elements this class is an unnecessary repetition and was only used to demonstrate the responsive example  executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:grid-rows-1 focus:grid-rows-1 hover:grid-rows-1 active grid template rows focus grid template rows hover grid template rows active:sm:grid-rows-1 focus:sm:grid-rows-1 hover:sm:grid-rows-1 active small screens grid template rows focus small screens grid template rows hover small screens grid template rows active:md:grid-rows-1 focus:md:grid-rows-1 hover:md:grid-rows-1 active medium screens grid template rows focus medium screens grid template rows hover medium screens grid template rows active:lg:grid-rows-1 focus:lg:grid-rows-1 hover:lg:grid-rows-1 active large screens grid template rows focus large screens grid template rows hover large screens grid template rows sources grid-template-rows https: developer mozilla org en-us docs web css grid-template-rows "}},{"slug":"layout-aspect-ratio","frontmatter":{"isBlog":false,"title":"aspect ratio","date":"apr 06. 2022","excerpt":"utility classes to control the aspect ratio of html elements.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"layout","author":"severin glaser","keywords":"aspect ratio, aspect-ratio, layout","classNames":"","plainText":" greenCSS css class example aspect-auto aspect-auto aspect-ratio: auto; aspect-square aspect-square aspect-ratio: math div 1 1 ; aspect-video aspect-video aspect-ratio: math div 16 9 ; how to work with aspect ratio use the `aspect keyword ` utilities to set the individual aspect ratio of an element aspect auto in the example below we use `aspect-auto` to set the height automatically according to the preselected width  aspect square in the example below we use `aspect-square` to set an equal width and height for your iframe  aspect video in the example below we use `aspect-video` to set an 16:9 ratio for your iframe  active focus and hover states greenCSS css class example active:aspect keyword active :aspect-auto:active aspect-ratio: start; focus:aspect keyword focus :aspect-auto:focus aspect-ratio: start; hover:aspect keyword hover :aspect-auto:hover aspect-ratio: start; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:aspect-auto` to only apply the aspect-auto utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:aspect-auto md: 480px 768px md:aspect-auto lg: 768px 1080px lg:aspect-auto greenCSS media queries can also be combined with active focus and hover states for example use `sm:aspect-auto` to apply the aspect-auto utility at only small screen sizes at or below 480px or `active:md:aspect-auto` to apply the aspect-auto utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :aspect keyword ` p e `active:md:aspect-auto` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:aspect keyword focus:aspect keyword hover:aspect keyword active aspect ratio auto focus aspect ratio auto hover aspect ratio auto active:sm:aspect keyword focus:sm:aspect keyword hover:sm:aspect keyword active small screens aspect ratio auto focus small screens aspect ratio auto hover small screens aspect ratio auto active:md:aspect keyword focus:md:aspect keyword hover:md:aspect keyword active medium screens aspect ratio auto focus medium screens aspect ratio auto hover medium screens aspect ratio auto active:lg:aspect keyword focus:lg:aspect keyword hover:lg:aspect keyword active large screens aspect ratio auto focus large screens aspect ratio auto hover large screens aspect ratio auto sources aspect-ratio https: developer mozilla org en-us docs web css aspect-ratio "}},{"slug":"layout-box-decoration-break","frontmatter":{"isBlog":false,"title":"box decoration break","date":"apr 08. 2022","excerpt":"utility classes to control how box decoration break should be displayed.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"layout","author":"severin glaser","keywords":"columns, box decoration break, layout, box-decoration-clone, box-decoration-slice","classNames":"","plainText":" greenCSS css class example box-decoration-clone box-decoration-clone box-decoration-break: clone; box-decoration-slice box-decoration-slice box-decoration-break: slice; how to work with box decoration break use the `box-decoration keyword ` in order to control how box decoration break should be displayed across multiple pages sections columns divs or lines use the `box-decoration-clone` utility class for example to maintain a steady property box decoration clone use the `box-decoration-clone` utility class to control how properties like background border border-image box-shadow clip-page margin and padding are displayed consequently in the source code example below hello and greenCSS have the same background gradients  box decoration slice use the `box-decoration-slice` utility class to control how properties like background border border-image box-shadow clip-page margin and padding are displayed consequently in the source code example below hello and greenCSS have different background gradients whereas hello has a blue background part and greenCSS contains a purple background  active focus and hover states greenCSS css class example active:box-decoration keyword active :box-decoration-clone:active box-decoration-break: clone; focus:box-decoration keyword focus :box-decoration-clone:focus box-decoration-break: clone; hover:box-decoration keyword hover :box-decoration-clone:hover box-decoration-break: clone; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:box-decoration-clone` to only apply the box-decoration-clone utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:box-decoration-clone md: 480px 768px md:box-decoration-clone lg: 768px 1080px lg:box-decoration-clone greenCSS media queries can also be combined with active focus and hover states for example use `sm:box-decoration-clone` to apply the box-decoration-clone utility at only small screen sizes at or below 480px or `active:md:box-decoration-clone` to apply the box-decoration-clone utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :box-decoration keyword ` p e `active:md:box-decoration-clone` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:box-decoration keyword focus:box-decoration keyword hover:box-decoration keyword active box decoration break clone focus box decoration break clone hover box decoration break clone active:sm:box-decoration keyword focus:sm:box-decoration keyword hover:sm:box-decoration keyword active small screens box decoration break clone focus small screens box decoration break clone hover small screens box decoration break clone active:md:box-decoration keyword focus:md:box-decoration keyword hover:md:box-decoration keyword active medium screens box decoration break clone focus medium screens box decoration break clone hover medium screens box decoration break clone active:lg:box-decoration keyword focus:lg:box-decoration keyword hover:lg:box-decoration keyword active large screens box decoration break clone focus large screens box decoration break clone hover large screens box decoration break clone sources box-decoration-break https: developer mozilla org en-us docs web css box-decoration-break "}},{"slug":"layout-box-sizing","frontmatter":{"isBlog":false,"title":"box sizing","date":"apr 08. 2022","excerpt":"utility classes to control the box sizes.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"layout","author":"severin glaser","keywords":"box sizing, layout, box-sizing, box-content","classNames":"","plainText":" greenCSS css class example box-sizing-border box-sizing-border box-sizing: border-box; box-sizing-content box-sizing-content box-sizing: content-box; how to work with box box sizing use the `box-sizing keyword ` in order to control the sizing of html elements box border use the `box-sizing-border` utility class to include everything such as borders and padding within an element when applying a specific hight a div with a width and height of 100px and a border of 5px and a padding of 10px will always have an effective area of 100px × 100px only the internal div content is affected and minimized  box content use the `box-sizing-content` utility class to exclude everything such as borders and padding within an element when applying a specific hight a div with a width and height of 100px and a border of 5px and a padding of 10px will always have an internal area of 100px × 100px only the external div content is affected and maximized  active focus and hover states greenCSS css class example active:box-sizing keyword active :box-sizing-border:active box-break: clone; focus:box-sizing keyword focus :box-sizing-border:focus box-break: clone; hover:box-sizing keyword hover :box-sizing-border:hover box-break: clone; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:box-sizing-border` to only apply the box-sizing-border utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:box-sizing-border md: 480px 768px md:box-sizing-border lg: 768px 1080px lg:box-sizing-border greenCSS media queries can also be combined with active focus and hover states for example use `sm:box-sizing-border` to apply the box-sizing-border utility at only small screen sizes at or below 480px or `active:md:box-sizing-border` to apply the box-sizing-border utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :box-sizing keyword ` p e `active:md:box-sizing-border` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:box-sizing keyword focus:box-sizing keyword hover:box-sizing keyword active box sizing border focus box sizing border hover box sizing border active:sm:box-sizing keyword focus:sm:box-sizing keyword hover:sm:box-sizing keyword active small screens box sizing border focus small screens box sizing border hover small screens box sizing border active:md:box-sizing keyword focus:md:box-sizing keyword hover:md:box-sizing keyword active medium screens box sizing border focus medium screens box sizing border hover medium screens box sizing border active:lg:box-sizing keyword focus:lg:box-sizing keyword hover:lg:box-sizing keyword active large screens box sizing border focus large screens box sizing border hover large screens box sizing border sources box-sizing https: developer mozilla org en-us docs web css box-sizing "}},{"slug":"layout-break-after","frontmatter":{"isBlog":false,"title":"break after","date":"apr 07. 2022","excerpt":"utility classes to control how columns break after an element.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"layout","author":"severin glaser","keywords":"columns, break after, layout","classNames":"","plainText":" greenCSS css class example break-after-auto break-after-auto break-after: auto; break-after-always break-after-always break-after: always; break-after-avoid break-after-avoid break-after: avoid; break-after-all break-after-all break-after: all; break-after-avoid-page break-after-avoid-page break-after: avoid-page; break-after-page break-after-page break-after: page; break-after-left break-after-left break-after: left; break-after-right break-after-right break-after: right; break-after-column break-after-column break-after: column; how to work with break after use the `break-after keyword ` how an element a column or the page behaves after an element use the `break-after-always` utility class for example to force to always break after an element  the result would look like: ! greenCSS break after images docs layout break-after webp?style=centerme active focus and hover states greenCSS css class example active:break-after keyword active :break-after-auto:active columns: auto; focus:break-after keyword focus :break-after-auto:focus columns: auto; hover:break-after keyword hover :break-after-auto:hover columns: auto; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:break-after-auto` to only apply the break-after-auto utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:break-after-auto md: 480px 768px md:break-after-auto lg: 768px 1080px lg:break-after-auto greenCSS media queries can also be combined with active focus and hover states for example use `sm:break-after-auto` to apply the break-after-auto utility at only small screen sizes at or below 480px or `active:md:break-after-auto` to apply the break-after-auto utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :break-after keyword ` p e `active:md:break-after-auto` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:break-after keyword focus:break-after keyword hover:break-after keyword active break after auto focus break after auto hover break after auto active:sm:break-after keyword focus:sm:break-after keyword hover:sm:break-after keyword active small screens break after auto focus small screens break after auto hover small screens break after auto active:md:break-after keyword focus:md:break-after keyword hover:md:break-after keyword active medium screens break after auto focus medium screens break after auto hover medium screens break after auto active:lg:break-after keyword focus:lg:break-after keyword hover:lg:break-after keyword active large screens break after auto focus large screens break after auto hover large screens break after auto sources break-after https: developer mozilla org en-us docs web css break-after "}},{"slug":"layout-break-before","frontmatter":{"isBlog":false,"title":"break before","date":"apr 07. 2022","excerpt":"utility classes to control how columns break before an element.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"layout","author":"severin glaser","keywords":"columns, break before, layout","classNames":"","plainText":" greenCSS css class example break-before-auto break-before-auto break-before: auto; break-before-always break-before-always break-before: always; break-before-avoid break-before-avoid break-before: avoid; break-before-all break-before-all break-before: all; break-before-avoid-page break-before-avoid-page break-before: avoid-page; break-before-page break-before-page break-before: page; break-before-left break-before-left break-before: left; break-before-right break-before-right break-before: right; break-before-column break-before-column break-before: column; how to work with break before use the `break-before keyword ` how an element a column or the page behaves after an element use the `break-before-always` utility class for example to force to always break before an element  active focus and hover states greenCSS css class example active:break-before keyword active :break-before-auto:active columns: auto; focus:break-before keyword focus :break-before-auto:focus columns: auto; hover:break-before keyword hover :break-before-auto:hover columns: auto; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:break-before-auto` to only apply the break-before-auto utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:break-before-auto md: 480px 768px md:break-before-auto lg: 768px 1080px lg:break-before-auto greenCSS media queries can also be combined with active focus and hover states for example use `sm:break-before-auto` to apply the break-before-auto utility at only small screen sizes at or below 480px or `active:md:break-before-auto` to apply the break-before-auto utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :break-before keyword ` p e `active:md:break-before-auto` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:break-before keyword focus:break-before keyword hover:break-before keyword active break before auto focus break before auto hover break before auto active:sm:break-before keyword focus:sm:break-before keyword hover:sm:break-before keyword active small screens break before auto focus small screens break before auto hover small screens break before auto active:md:break-before keyword focus:md:break-before keyword hover:md:break-before keyword active medium screens break before auto focus medium screens break before auto hover medium screens break before auto active:lg:break-before keyword focus:lg:break-before keyword hover:lg:break-before keyword active large screens break before auto focus large screens break before auto hover large screens break before auto sources break-before https: developer mozilla org en-us docs web css break-before "}},{"slug":"layout-break-inside","frontmatter":{"isBlog":false,"title":"break inside","date":"apr 07. 2022","excerpt":"utility classes to control how columns break inside an element.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"layout","author":"severin glaser","keywords":"columns, break inside, layout","classNames":"","plainText":" greenCSS css class example break-inside-auto break-inside-auto break-inside: auto; break-inside-avoid break-inside-avoid break-inside: avoid; break-inside-avoid-page break-inside-avoid-page break-inside: avoid-page; break-inside-avoid-column break-inside-avoid-column break-inside: avoid-column; how to work with break inside use the `break-inside keyword ` how an element a column or the page behaves after an element use the `break-inside-avoid` utility class for example to force to always avoid a break inside an element  the result would look like: ! greenCSS break inside images docs layout break-inside webp?style=centerme active focus and hover states greenCSS css class example active:break-inside keyword active :break-inside-auto:active columns: auto; focus:break-inside keyword focus :break-inside-auto:focus columns: auto; hover:break-inside keyword hover :break-inside-auto:hover columns: auto; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:break-inside-auto` to only apply the break-inside-auto utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:break-inside-auto md: 480px 768px md:break-inside-auto lg: 768px 1080px lg:break-inside-auto greenCSS media queries can also be combined with active focus and hover states for example use `sm:break-inside-auto` to apply the break-inside-auto utility at only small screen sizes at or below 480px or `active:md:break-inside-auto` to apply the break-inside-auto utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :break-inside keyword ` p e `active:md:break-inside-auto` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:break-inside keyword focus:break-inside keyword hover:break-inside keyword active break inside auto focus break inside auto hover break inside auto active:sm:break-inside keyword focus:sm:break-inside keyword hover:sm:break-inside keyword active small screens break inside auto focus small screens break inside auto hover small screens break inside auto active:md:break-inside keyword focus:md:break-inside keyword hover:md:break-inside keyword active medium screens break inside auto focus medium screens break inside auto hover medium screens break inside auto active:lg:break-inside keyword focus:lg:break-inside keyword hover:lg:break-inside keyword active large screens break inside auto focus large screens break inside auto hover large screens break inside auto sources break-inside https: developer mozilla org en-us docs web css break-inside "}},{"slug":"layout-clear","frontmatter":{"isBlog":false,"title":"clear","date":"apr 08. 2022","excerpt":"utility classes to control the clearance of an element.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"layout","author":"severin glaser","keywords":"clear, layout, clear-right, clear-left, clear-none, clear-both","classNames":"","plainText":" greenCSS css class example clear-right clear-right clear: right; clear-left clear-left clear: left; clear-none clear-none clear: none; clear-both clear-both clear: both; how to work with box box sizing use the `clear keyword ` in order to clear the content below the element on the desired side this approach is useful for blog posts or news articles if an element such as an image or the first letter should stand out clear right use the `clear-right` utility class to clear a child on the right side of its parent element  clear left use the `clear-left` utility class to clear a child on the left side of its parent element  clear both use the `clear-both` utility class to clear all children  clear none use the `clear-none` utility class to disable the clearance of all elements  active focus and hover states greenCSS css class example active:clear keyword active :clear-right:active clear: clone; focus:clear keyword focus :clear-right:focus clear: clone; hover:clear keyword hover :clear-right:hover clear: clone; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:clear-right` to only apply the clear-right utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:clear-right md: 480px 768px md:clear-right lg: 768px 1080px lg:clear-right greenCSS media queries can also be combined with active focus and hover states for example use `sm:clear-right` to apply the clear-right utility at only small screen sizes at or below 480px or `active:md:clear-right` to apply the clear-right utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :clear keyword ` p e `active:md:clear-right` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:clear keyword focus:clear keyword hover:clear keyword active clear right focus clear right hover clear right active:sm:clear keyword focus:sm:clear keyword hover:sm:clear keyword active small screens clear right focus small screens clear right hover small screens clear right active:md:clear keyword focus:md:clear keyword hover:md:clear keyword active medium screens clear right focus medium screens clear right hover medium screens clear right active:lg:clear keyword focus:lg:clear keyword hover:lg:clear keyword active large screens clear right focus large screens clear right hover large screens clear right sources clear https: developer mozilla org en-us docs web css clear "}},{"slug":"layout-columns","frontmatter":{"isBlog":false,"title":"columns","date":"apr 07. 2022","excerpt":"utility classes to control the number of columns within html elements.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"layout","author":"severin glaser","keywords":"columns, column auto, layout","classNames":"","plainText":" greenCSS css class example maximum value maximum value step col-auto col-auto columns: auto; col number col-1 columns: 1; 1 12 +1 col number rem col-1rem columns: 1rem; 1 100 +1rem how to work with columns use the `col keyword ` to set the number of columns or `col number unit ` utility classes to set the individual width of a column the columns are arranged vertically in every case column number if you use `col number ` the column width of the columns will be automatically adjusted the range goes from `col-1` to `col-12` p e in a `col-2` usecase every single column will have 50% of the entire width  column width use the `col number unit ` to set a specific width for each column the range goes from `col-1rem` to `col-100rem` p e when using `col-20rem` every single column will have a fixed width of 20rem units  column gap you can easily add the gap docs gap class in order to control the gutter within the columns  active focus and hover states greenCSS css class example active:col keyword active :col-auto:active columns: auto; focus:col keyword focus :col-auto:focus columns: auto; hover:col keyword hover :col-auto:hover columns: auto; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:col-auto` to only apply the col-auto utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:col-auto md: 480px 768px md:col-auto lg: 768px 1080px lg:col-auto greenCSS media queries can also be combined with active focus and hover states for example use `sm:col-auto` to apply the col-auto utility at only small screen sizes at or below 480px or `active:md:col-auto` to apply the col-auto utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :col keyword ` p e `active:md:col-auto` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:col keyword focus:col keyword hover:col keyword active columns auto focus columns auto hover columns auto active:sm:col keyword focus:sm:col keyword hover:sm:col keyword active small screens columns auto focus small screens columns auto hover small screens columns auto active:md:col keyword focus:md:col keyword hover:md:col keyword active medium screens columns auto focus medium screens columns auto hover medium screens columns auto active:lg:col keyword focus:lg:col keyword hover:lg:col keyword active large screens columns auto focus large screens columns auto hover large screens columns auto sources columns https: developer mozilla org en-us docs web css columns "}},{"slug":"layout-container","frontmatter":{"isBlog":false,"title":"container & row","date":"apr 06. 2022","excerpt":"container and row classes to control html elements.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"layout","author":"severin glaser","keywords":"container, row, layout","classNames":"","plainText":" greenCSS css class example container container width: 100%; max-width: 1100px; margin: 0 auto; padding: 0; box-sizing: border-box; row row display: flex; flex-flow: row wrap; how to use the container use the `container` or `row` utilities to set the individual width of your layout the container is useful for screens with a width up to 1100px it is recommended to use the container with the `mx-auto` class to center it for larger screens check row row for an example container in the example below we use `container` to set the a default layout the container css class looks like:  a real life example could look like:  row in the example below we use `row` to set a row within a container the row css class looks like:  a real life example could look like:  the container in this example has a blue background we use `mx-auto` to center the container horizontally the row elements are marked with first second and third ! greenCSS macbook layout container row images docs layout macbook-layout-container-row webp?style=centerme ! greenCSS iphone layout container row images docs layout iphone-layout-container-row webp?style=centerme active focus and hover states there are no active focus or hover classes available responsive breakpoints there are no responsive classes available executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example container container row row "}},{"slug":"layout-display","frontmatter":{"isBlog":false,"title":"display","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s display properties.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"layout","author":"severin glaser","keywords":"flex, flexbox, display","classNames":"","plainText":" greenCSS css class example display-none display-none display: none; block block display: block; inline-block inline-block display: inline-block; inline inline display: inline; flex flex display: flex; inline-flex inline-flex display: inline-flex; table table display: table; inline-table inline-table display: inline-table; table-caption table-caption display: table-caption table-cell table-cell display: table-cell table-column table-column display: table-column table-column-group table-column-group display: table-column-group table-footer-group table-footer-group display: table-footer-group table-header-group table-header-group display: table-header-group table-row-group table-row-group display: table-row-group table-row table-row display: table-row flow-root flow-root display: flow-root grid grid display: grid inline-grid inline-grid display: inline-grid contents contents display: contents list-item list-item display: list-item how to work with the keywords use the utility classes above to access your desired class display none use `display-none` to hide an element in the dom  block use `block` make an element in the dom visible  flex use `flex` to define a flex container  grid use `grid` to define a grid container  active focus and hover states greenCSS css class example active:display-none active :display-none:active display-none: row; focus:display-none focus :display-none:focus display-none: row; hover:display-none hover :display-none:hover display-none: row; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:display-none` to only apply the display-none utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:display-none md: 480px 768px md:display-none lg: 768px 1080px lg:display-none greenCSS media queries can also be combined with active focus and hover states for example use `sm:display-none` to apply the display-none utility at only small screen sizes at or below 480px or `active:md:display-none` to apply the display-none utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query : display-none-class ` p e `active:md:display-none` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:display-none focus:display-none hover:display-none active display none focus display none hover display none active:sm:display-none focus:sm:display-none hover:sm:display-none active small screens display none focus small screens display none hover small screens display none active:md:display-none focus:md:display-none hover:md:display-none active medium screens display none focus medium screens display none hover medium screens display none active:lg:display-none focus:lg:display-none hover:lg:display-none active large screens display none focus large screens display none hover large screens display none sources display https: developer mozilla org en-us docs web css display "}},{"slug":"layout-float","frontmatter":{"isBlog":false,"title":"float","date":"apr 08. 2022","excerpt":"utility classes to control the float position of an element.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"layout","author":"severin glaser","keywords":"float, layout, float-right, float-left, float-none","classNames":"","plainText":" greenCSS css class example float-right float-right float: right; float-left float-left float: left; float-none float-none float: none; how to work with box box sizing use the `float keyword ` in order to control the wrapped position of an html element float right use the `float-right` utility class to position or float child on the right side of its parent element  float left use the `float-left` utility class to position or float child on the left side of its parent element  float none use the `float-none` utility class to disable the positioning or floating of a child element  active focus and hover states greenCSS css class example active:float keyword active :float-right:active float: clone; focus:float keyword focus :float-right:focus float: clone; hover:float keyword hover :float-right:hover float: clone; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:float-right` to only apply the float-right utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:float-right md: 480px 768px md:float-right lg: 768px 1080px lg:float-right greenCSS media queries can also be combined with active focus and hover states for example use `sm:float-right` to apply the float-right utility at only small screen sizes at or below 480px or `active:md:float-right` to apply the float-right utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :float keyword ` p e `active:md:float-right` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:float keyword focus:float keyword hover:float keyword active float right focus float right hover float right active:sm:float keyword focus:sm:float keyword hover:sm:float keyword active small screens float right focus small screens float right hover small screens float right active:md:float keyword focus:md:float keyword hover:md:float keyword active medium screens float right focus medium screens float right hover medium screens float right active:lg:float keyword focus:lg:float keyword hover:lg:float keyword active large screens float right focus large screens float right hover large screens float right sources float https: developer mozilla org en-us docs web css float "}},{"slug":"layout-isolation","frontmatter":{"isBlog":false,"title":"isolation","date":"apr 08. 2022","excerpt":"utility classes to control the isolation of an element.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"layout","author":"severin glaser","keywords":"isolation, layout, isolate","classNames":"","plainText":" greenCSS css class example isolation isolation isolation: isolate; isolation-auto isolation-auto isolation: auto; how to work with isolation use the keyword in order to apply the isolation class properties this will create a new sequence context isolation use the `isolation` or `isolation-auto` utility class whether an element must create a new stacking context  active focus and hover states greenCSS css class example active:isolation keyword active :isolation:active isolation: clone; focus:isolation keyword focus :isolation:focus isolation: clone; hover:isolation keyword hover :isolation:hover isolation: clone; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:isolation` to only apply the isolation utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:isolation md: 480px 768px md:isolation lg: 768px 1080px lg:isolation greenCSS media queries can also be combined with active focus and hover states for example use `sm:isolation` to apply the isolation utility at only small screen sizes at or below 480px or `active:md:isolation` to apply the isolation utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :isolation keyword ` p e `active:md:isolation` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:isolation keyword focus:isolation keyword hover:isolation keyword active isolate focus isolate hover isolate active:sm:isolation keyword focus:sm:isolation keyword hover:sm:isolation keyword active small screens isolate focus small screens isolate hover small screens isolate active:md:isolation keyword focus:md:isolation keyword hover:md:isolation keyword active medium screens isolate focus medium screens isolate hover medium screens isolate active:lg:isolation keyword focus:lg:isolation keyword hover:lg:isolation keyword active large screens isolate focus large screens isolate hover large screens isolate sources isolation https: developer mozilla org en-us docs web css isolation "}},{"slug":"layout-object-fit","frontmatter":{"isBlog":false,"title":"object fit","date":"apr 08. 2022","excerpt":"utility classes to determine the layout object fit classes.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"layout","author":"severin glaser","keywords":"object fit, layout, object-contain, object-cover, object-fill, object-none, object-scale-down","classNames":"","plainText":" greenCSS css class example object-contain object-contain object-fit: contain; object-cover object-cover object-fit: cover; object-fill object-fill object-fit: fill; object-none object-none object-fit: none; object-scale-down object-scale-down object-fit: scale-down; how to work with object fit use the `object keyword ` in order to display and or resize the content of an element such as an image object fit contain use the `object-contain` utility class to maintain the scale of the image smaller displays will have whitespace around the image and the image might be very small  object fit cover use the `object-cover` utility class to cover and maintain the scale of the image  object fit fill use the `object-fill` utility class to stretch the image  object fit scale down use the `object-scale-down` utility class to maintain the original image scale and adjust it according to the the parental requirements  active focus and hover states greenCSS css class example active:object keyword active :object-contain:active object-fit: contain; focus:object keyword focus :object-contain:focus object-fit: contain; hover:object keyword hover :object-contain:hover object-fit: contain; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:object-contain` to only apply the object-contain utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:object-contain md: 480px 768px md:object-contain lg: 768px 1080px lg:object-contain greenCSS media queries can also be combined with active focus and hover states for example use `sm:object-contain` to apply the object-contain utility at only small screen sizes at or below 480px or `active:md:object-contain` to apply the object-contain utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :object keyword ` p e `active:md:object-contain` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:object keyword focus:object keyword hover:object keyword active object fit contain focus object fit contain hover object fit contain active:sm:object keyword focus:sm:object keyword hover:sm:object keyword active small screens object fit contain focus small screens object fit contain hover small screens object fit contain active:md:object keyword focus:md:object keyword hover:md:object keyword active medium screens object fit contain focus medium screens object fit contain hover medium screens object fit contain active:lg:object keyword focus:lg:object keyword hover:lg:object keyword active large screens object fit contain focus large screens object fit contain hover large screens object fit contain sources object-fit https: developer mozilla org en-us docs web css object-fit "}},{"slug":"layout-object-position","frontmatter":{"isBlog":false,"title":"object position","date":"apr 09. 2022","excerpt":"utility classes to determine the layout object position.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"layout","author":"severin glaser","keywords":"object position, layout, object-position top, right, bottom, left","classNames":"","plainText":" greenCSS css class example object-position-top object-position-top object-position: top; object-position-right-top object-position-right-top object-position: right top; object-position-right object-position-right object-position: right; object-position-right-bottom object-position-right-bottom object-position: right bottom; object-position-bottom object-position-bottom object-position: bottom; object-position-center object-position-center object-position: center; object-position-left-bottom object-position-left-bottom object-position: left bottom; object-position-left object-position-left object-position: left; object-position-left-top object-position-left-top object-position: left top; how to work with object fit use the `object-position keyword ` in order to determine the visual position of a section in an image object position center the default class is normally `object-position-center` as the viewport is set to the center of the image  object position-keyword use the `object-position keyword ` utility class to set the angle of view for example you can use `object-position-right-top` in order to focus the top right corner of the image  active focus and hover states greenCSS css class example active:object-position keyword active :object-position-center:active object-position: contain; focus:object-position keyword focus :object-position-center:focus object-position: contain; hover:object-position keyword hover :object-position-center:hover object-position: contain; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:object-position-center` to only apply the object-position-center utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:object-position-center md: 480px 768px md:object-position-center lg: 768px 1080px lg:object-position-center greenCSS media queries can also be combined with active focus and hover states for example use `sm:object-position-center` to apply the object-position-center utility at only small screen sizes at or below 480px or `active:md:object-position-center` to apply the object-position-center utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :object-position keyword ` p e `active:md:object-position-center` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:object-position keyword focus:object-position keyword hover:object-position keyword active object position center focus object position center hover object position center active:sm:object-position keyword focus:sm:object-position keyword hover:sm:object-position keyword active small screens object position center focus small screens object position center hover small screens object position center active:md:object-position keyword focus:md:object-position keyword hover:md:object-position keyword active medium screens object position center focus medium screens object position center hover medium screens object position center active:lg:object-position keyword focus:lg:object-position keyword hover:lg:object-position keyword active large screens object position center focus large screens object position center hover large screens object position center sources object-position https: developer mozilla org en-us docs web css object-position "}},{"slug":"layout-overflow","frontmatter":{"isBlog":false,"title":"overflow","date":"apr 09. 2022","excerpt":"utility classes to determine the overflow classes.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"layout","author":"severin glaser","keywords":"overflow, layout, overflow-x, overflow-y","classNames":"","plainText":" greenCSS css class example overflow-auto overflow-auto overflow: auto; overflow-hidden overflow-hidden overflow: hidden; overflow-clip overflow-clip overflow: clip; overflow-visible overflow-visible overflow: visible; overflow-scroll overflow-scroll overflow: scroll; overflow-x-auto overflow-x-auto overflow-x: auto; overflow-x-hidden overflow-x-hidden overflow-x: hidden; overflow-x-clip overflow-x-clip overflow-x: clip; overflow-x-visible overflow-x-visible overflow-x: visible; overflow-x-scroll overflow-x-scroll overflow-x: scroll; overflow-y-auto overflow-y-auto overflow-y: auto; overflow-y-hidden overflow-y-hidden overflow-y: hidden; overflow-y-clip overflow-y-clip overflow-y: clip; overflow-y-visible overflow-y-visible overflow-y: visible; overflow-y-scroll overflow-y-scroll overflow-y: scroll; how to work with overflow 1 use the `overflow keyword ` to display an elements content in various ways if it is too large and overflows this way the overflow behavior will be used in the horizontal and vertical axis 2 you can also use `overflow-x keyword ` to handle the overflow behavior in the horizontal axis 3 you can also use `overflow-y keyword ` to handle the overflow behavior in the vertical axis overflow auto the default class is normally `overflow-auto` as it handles the overflow automatically  overflow hidden use `overflow-hidden` to hide overlapping content  overflow visible use `overflow-visible` to show overlapping content intentionally  overflow scroll use `overflow-scroll` to provide a scrollbar in a limited area  active focus and hover states greenCSS css class example active:overflow keyword active :overflow-auto:active overflow: auto; focus:overflow keyword focus :overflow-auto:focus overflow: auto; hover:overflow keyword hover :overflow-auto:hover overflow: auto; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:overflow-hidden` to only apply the overflow-auto utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:overflow-auto md: 480px 768px md:overflow-auto lg: 768px 1080px lg:overflow-auto greenCSS media queries can also be combined with active focus and hover states for example use `sm:overflow-auto` to apply the overflow-auto utility at only small screen sizes at or below 480px or `active:md:overflow-auto` to apply the overflow-auto utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :overflow keyword ` p e `active:md:overflow-auto` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:overflow keyword focus:overflow keyword hover:overflow keyword active overflow auto focus overflow auto hover overflow auto active:sm:overflow keyword focus:sm:overflow keyword hover:sm:overflow keyword active small screens overflow auto focus small screens overflow auto hover small screens overflow auto active:md:overflow keyword focus:md:overflow keyword hover:md:overflow keyword active medium screens overflow auto focus medium screens overflow auto hover medium screens overflow auto active:lg:overflow keyword focus:lg:overflow keyword hover:lg:overflow keyword active large screens overflow auto focus large screens overflow auto hover large screens overflow auto sources overflow https: developer mozilla org en-us docs web css overflow "}},{"slug":"layout-overscroll","frontmatter":{"isBlog":false,"title":"overscroll behavior","date":"apr 09. 2022","excerpt":"utility classes to determine the overscroll behavior.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"layout","author":"severin glaser","keywords":"overscroll behavior, layout, overscroll-behavior-x, overscroll-behavior-y","classNames":"","plainText":" greenCSS css class example overscroll-auto overscroll-auto overscroll-behavior: auto; overscroll-contain overscroll-contain overscroll-behavior: contain; overscroll-none overscroll-none overscroll-behavior: none; overscroll-y-auto overscroll-y-auto overscroll-behavior-y: auto; overscroll-y-contain overscroll-y-contain overscroll-behavior-y: contain; overscroll-y-none overscroll-y-none overscroll-behavior-y: none; overscroll-x-auto overscroll-x-auto overscroll-behavior-x: auto; overscroll-x-contain overscroll-x-contain overscroll-behavior-x: contain; overscroll-x-none overscroll-x-none overscroll-behavior-x: none; how to work with overscroll 1 use the `overscroll keyword ` to determine how a browser behaves when it reaches the limit of a general scrolling area 2 you can also use `overscroll-x keyword ` to control what a browser does when it reaches the limit of the horizontal scrolling area 3 you can also use `overscroll-y keyword ` to handle the browser behavior when it approaches the limit of the vertical scrolling area overscroll behavior auto the default class is normally `overscroll-auto` as it handles the overscroll behavior automatically  overscroll behavior contain use `overscroll-contain` to prevent scrolling in the target area from bypassing scrolling into the parent element the default scroll overflow behavior is present inside the element with a bounce effect or refresh other areas are not affected by scroll chaining  overscroll behavior none use `overscroll-none` to prevent the default scroll overflow behavior  active focus and hover states greenCSS css class example active:overscroll keyword active :overscroll-auto:active overscroll-behavior: auto; focus:overscroll keyword focus :overscroll-auto:focus overscroll-behavior: auto; hover:overscroll keyword hover :overscroll-auto:hover overscroll-behavior: auto; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:overscroll-contain` to only apply the overscroll-auto utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:overscroll-auto md: 480px 768px md:overscroll-auto lg: 768px 1080px lg:overscroll-auto greenCSS media queries can also be combined with active focus and hover states for example use `sm:overscroll-auto` to apply the overscroll-auto utility at only small screen sizes at or below 480px or `active:md:overscroll-auto` to apply the overscroll-auto utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :overscroll keyword ` p e `active:md:overscroll-auto` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:overscroll keyword focus:overscroll keyword hover:overscroll keyword active overscroll auto focus overscroll auto hover overscroll auto active:sm:overscroll keyword focus:sm:overscroll keyword hover:sm:overscroll keyword active small screens overscroll auto focus small screens overscroll auto hover small screens overscroll auto active:md:overscroll keyword focus:md:overscroll keyword hover:md:overscroll keyword active medium screens overscroll auto focus medium screens overscroll auto hover medium screens overscroll auto active:lg:overscroll keyword focus:lg:overscroll keyword hover:lg:overscroll keyword active large screens overscroll auto focus large screens overscroll auto hover large screens overscroll auto sources overscroll https: developer mozilla org en-us docs web css overscroll-behavior "}},{"slug":"layout-position","frontmatter":{"isBlog":false,"title":"position","date":"apr 09. 2022","excerpt":"utility classes to determine the layout position.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"layout","author":"severin glaser","keywords":"position, layout, absolute, fixed, relative, static, sticky","classNames":"","plainText":" greenCSS css class example absolute absolute position: absolute; fixed fixed position: fixed; relative relative position: relative; static static position: static; sticky sticky position: sticky; how to work with position 1 use the ` keyword ` to control determine and set the position of an element in the dom position absolute using `absolute` the element is deleted from the normal document structure no space is created for the element in the page layout it is placed relative to its closest positioned parent if available otherwise it is placed relative to the initial block its final position is determined by the values of `top number per` `right number per` `bottom number per` and `left number per`  position fixed using `fixed` the element is deleted from the normal document structure no space is created for the element in the page layout it is placed relative to its initial positioned block which is established by the viewport  position relative use `relative` whereby is positioned according to the normal flow of the document the offset will not affect the location of other elements therefore the amount of space for the element in the page layout will be the same as a static position  position sticky a `sticky` positioned element is an element whose computed position value is sticky it is considered to be a relatively positioned item until its containing block exceeds a certain threshold e g setting top to a value other than auto inside its container or flow root at that point it is treated as frozen until it hits the opposite edge of its containing block  active focus and hover states greenCSS css class example active: keyword active :absolute:active position: absolute; focus: keyword focus :absolute:focus position: absolute; hover: keyword hover :absolute:hover position: absolute; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:fixed` to only apply the absolute utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:absolute md: 480px 768px md:absolute lg: 768px 1080px lg:absolute greenCSS media queries can also be combined with active focus and hover states for example use `sm:absolute` to apply the absolute utility at only small screen sizes at or below 480px or `active:md:absolute` to apply the absolute utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query : keyword ` p e `active:md:absolute` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active: keyword focus: keyword hover: keyword active position absolute focus position absolute hover position absolute active:sm: keyword focus:sm: keyword hover:sm: keyword active small screens position absolute focus small screens position absolute hover small screens position absolute active:md: keyword focus:md: keyword hover:md: keyword active medium screens position absolute focus medium screens position absolute hover medium screens position absolute active:lg: keyword focus:lg: keyword hover:lg: keyword active large screens position absolute focus large screens position absolute hover large screens position absolute sources position https: developer mozilla org en-us docs web css position "}},{"slug":"layout-top-right-bottom-left","frontmatter":{"isBlog":false,"title":"top | right | bottom | left","date":"apr 09. 2022","excerpt":"utility classes to set the top, right, bottom and left positions.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"layout","author":"severin glaser","keywords":"position, layout, top, right, bottom, left","classNames":"","plainText":" greenCSS css class example maximum value maximum value step top-auto top-auto top: auto; top number per top-50% top: 50%; -100% 100% 1% right-auto right-auto right: auto; right number per right-50% right: 50%; -100% 100% 1% bottom-auto bottom-auto bottom: auto; bottom number per bottom-50% bottom: 50%; -100% 100% 1% left-auto left-auto left: auto; left number per left-50% left: 50%; -100% 100% 1% how to work with top right bottom left 1 use the ` keyword -auto` to control determine and set the auto position 2 use the ` keyword number per` to control determine and set the position with percent values of a positioned element  negative values to use ` keyword -neg number per` a negative top right bottom left values to place an element in a negative direction position  active focus and hover states greenCSS css class example active: keyword active :top-auto:active top: auto; focus: keyword focus :top-auto:focus top: auto; hover: keyword hover :top-auto:hover top: auto; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:top-auto` to only apply the top utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:top-auto md: 480px 768px md:top-auto lg: 768px 1080px lg:top-auto greenCSS media queries can also be combined with active focus and hover states for example use `sm:top-auto` to apply the top auto utility at only small screen sizes at or below 480px or `active:md:top-auto` to apply the top auto utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure for auto classes is as follows: ` conditional state : media query : keyword ` p e `active:md:top-auto` 1 the structure for relative percentage classes is as follows: ` conditional state : media query : keyword number per` p e `active:md:top-50per` 1 the structure for negative relative percentage classes is as follows: ` conditional state : media query : keyword -neg number per` p e `active:md:top-neg-100per` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active: keyword focus: keyword hover: keyword active top focus top hover top active:sm: keyword focus:sm: keyword hover:sm: keyword active small screens top focus small screens top hover small screens top active:md: keyword focus:md: keyword hover:md: keyword active medium screens top focus medium screens top hover medium screens top active:lg: keyword focus:lg: keyword hover:lg: keyword active large screens top focus large screens top hover large screens top sources top https: developer mozilla org en-us docs web css top right https: developer mozilla org en-us docs web css right bottom https: developer mozilla org en-us docs web css bottom left https: developer mozilla org en-us docs web css left "}},{"slug":"layout-visibility","frontmatter":{"isBlog":false,"title":"visibility","date":"apr 09. 2022","excerpt":"utility classes to set the visibility of elements.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"layout","author":"severin glaser","keywords":"visibility, layout, visible, hidden","classNames":"","plainText":" greenCSS css class example visible visible visibility: visible; hidden hidden visibility: hidden; collapse collapse visibility: collapse; how to work with visibility 1 use the ` keyword ` to control determine and set the visibility  the keyword collapse has various effects on different elements: for ` table ` rows columns column groups and row groups the row s or column s are hidden and the available space is removed as if display: none were applied to the column row of the table nevertheless the dimensions of the other rows and columns are still calculated as if the cells were present in the hidden row s or column s collapsed flex elements and ruby annotations are hidden and the space they would have occupied is removed for other elements `collapse` is treated in the same way as hiding an element active focus and hover states greenCSS css class example active: keyword active :visible:active visibility: visible; focus: keyword focus :visible:focus visibility: visible; hover: keyword hover :visible:hover visibility: visible; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:hidden` to only apply the visible utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:visible md: 480px 768px md:visible lg: 768px 1080px lg:visible greenCSS media queries can also be combined with active focus and hover states for example use `sm:visible` to apply the visible utility at only small screen sizes at or below 480px or `active:md:visible` to apply the visible utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure for the utility classes is as follows: ` conditional state : media query : keyword ` p e `active:md:visible` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active: keyword focus: keyword hover: keyword active visible focus visible hover visible active:sm: keyword focus:sm: keyword hover:sm: keyword active small screens visible focus small screens visible hover small screens visible active:md: keyword focus:md: keyword hover:md: keyword active medium screens visible focus medium screens visible hover medium screens visible active:lg: keyword focus:lg: keyword hover:lg: keyword active large screens visible focus large screens visible hover large screens visible sources visibility https: developer mozilla org en-us docs web css visibility "}},{"slug":"layout-z-index","frontmatter":{"isBlog":false,"title":"z-index","date":"apr 10. 2022","excerpt":"utility classes to control the order of the elements by using z-index.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"layout","author":"severin glaser","keywords":"position, layout, order, z-index","classNames":"","plainText":" greenCSS css class example minimum value maximum value step z-auto z-auto z-index: auto; z number z-50 z-index: 50; -100 100 +1 how to work with z-index 1 use the `z-auto` to control determine and set the order automatically 2 use the `z number ` to control determine and set the order by a specific number the higher the number the higher the priority  negative z-values to use `z-neg number ` p e `z-neg-1` to set a lower priority for the element the lower the number the lower the priority  active focus and hover states greenCSS css class example active:z number active :z-1:active z-index: 1; focus:z number focus :z-1:focus z-index: 1; hover:z number hover :z-1:hover z-index: 1; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:z-1` to only apply the z-index utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:z-1 md: 480px 768px md:z-1 lg: 768px 1080px lg:z-1 greenCSS media queries can also be combined with active focus and hover states for example use `sm:z-1` to apply the z-index auto utility at only small screen sizes at or below 480px or `active:md:z-1` to apply the z-index auto utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure for auto classes is as follows: ` conditional state : media query :z-auto` p e `active:md:z-auto` 1 the structure for positive z-index classes is as follows: ` conditional state : media query :z number ` p e `active:md:z-50` 1 the structure for negative z-index classes is as follows: ` conditional state : media query :z-neg number ` p e `active:md:z-neg-100` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:z number focus:z number hover:z number active z index focus z index hover z index active:sm:z number focus:sm:z number hover:sm:z number active small screens z index focus small screens z index hover small screens z index active:md:z number focus:md:z number hover:md:z number active medium screens z index focus medium screens z index hover medium screens z index active:lg:z number focus:lg:z number hover:lg:z number active large screens z index focus large screens z index hover large screens z index sources z-index https: developer mozilla org en-us docs web css z-index "}},{"slug":"sizing-height","frontmatter":{"isBlog":false,"title":"height","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s height.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"sizing","author":"severin glaser","keywords":"sizing, height, h-, max-h, min-h","classNames":"","plainText":" greenCSS css class example minimum value maximum value step h size h-1px height: 1px; h-0px h-100px 1px h size h-11rem height: 1rem; h-11rem h-100rem 1rem h size h-1% height: 1%; h-0per h-100per 1% h size h-1vw height: 1vw; h-0vw h-100vw 1vw fixed heights control the height on every html element by using the h size utility with a postfix variable like ` -px -rem -vw ` 1 the pixel height class range is from 0 to positive 100 and uses the px postfix the steps are + 1px e g `h-0px h-1px h-100px` 2 the rem height class range is from positive 11rem to positive 100rem and uses the rem postfix the steps are + 1rem e g `h-11rem h-12rem h-100rem` ⚠️ remember 1rem = 10px or 10rem = 100px 3 the viewport height class range is from 0vw to positive 100vw and uses the vw postfix the steps are + 1vw e g `h-0vw h-1vw h-100vw` use h-100vw to make an element span the entire height of the viewport  percentage heights control the percentage height on every html element by using the h size utility with the postfix variable ` -per ` 1 the percentage height class range is from 0 to positive 100 and uses the per postfix the steps are + 1% e g `h-0per h-1per h-100per`  reset height the ` h-auto ` utility can be useful if you need to remove an element’s assigned height under a specific condition like at a particular breakpoint blog responsive-greenCSS-breakpoints :  💡 click how to use the default minimum height docs sizing-minimum-height or maximum height docs sizing-maximum-height active focus and hover states greenCSS css class example range active:h size active :h-1px:active height: 1px; active:h-0px to active:h-100px focus:h size focus :h-1px:focus height: 1px; focus:h-0px to focus:h-100px hover:h size hover :h-1px:focus height: 1px; hover:h-0px to hover:h-100px greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:h-10px` to only apply the h-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:h-10px md: 480px 768px md:h-10px lg: 768px 1080px lg:h-10px greenCSS media queries can also be combined with active focus and hover states for example use `sm:h-10px` to apply the h-10px utility at only small screen sizes at or below 480px or `active:md:h-10px` to apply the h-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query : classname size ` p e `active:md:m-10px` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:h size focus:h size hover:h size active height focus height hover height active:sm:h size focus:sm:h size hover:sm:h size active small screens height focus small screens height hover small screens height active:md:h size focus:md:h size hover:md:h size active medium screens height focus medium screens height hover medium screens height active:lg:h size focus:lg:h size hover:lg:h size active large screens height focus large screens height hover large screens height sources height https: developer mozilla org en-us docs web css height "}},{"slug":"sizing-maximum-height","frontmatter":{"isBlog":false,"title":"maximum height","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s maximum height.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"sizing","author":"severin glaser","keywords":"sizing, maximum height, max-h-","classNames":"","plainText":" greenCSS css class example maximum value maximum value step max-h size max-h-1px height: 1px; max-h-0px max-h-100px 1px max-h size max-h-11rem height: 1rem; max-h-11rem max-h-100rem 1rem max-h size max-h-1% height: 1%; max-h-0per max-h-100per 1% max-h size max-h-1vw height: 1vw; max-h-0vw max-h-100vw 1vw fixed maximum heights control the height on every html element by using the max-h size utility with a postfix variable like ` -px -rem -vw ` 1 the pixel height class range is from 0 to positive 100 and uses the px postfix the steps are + 1px e g `max-h-0px max-h-1px max-h-100px` 2 the rem height class range is from positive 11rem to positive 100rem and uses the rem postfix the steps are + 1rem e g `max-h-11rem max-h-12rem max-h-100rem` ⚠️ remember 1rem = 10px or 10rem = 100px 3 the viewport height class range is from 0vw to positive 100vw and uses the vw postfix the steps are + 1vw e g `max-h-0vw max-h-1vw max-h-100vw` use max-h-100vw to make an element span the entire height of the viewport  maximum percentage heights control the percentage height on every html element by using the max-h size utility with the postfix variable ` -per ` 1 the percentage height class range is from 0 to positive 100 and uses the per postfix the steps are + 1% e g `max-h-0per max-h-1per max-h-100per`  reset the maximum height the ` max-h-auto ` utility can be useful if you need to remove an element’s assigned height under a specific condition like at a particular breakpoint blog responsive-greenCSS-breakpoints :  💡 click how to use the default height docs sizing-height or minimum height docs sizing-minimum-height active focus and hover states greenCSS css class example range active:max-h size active :max-h-1px:active height: 1px; active:max-h-0px to active:max-h-100px focus:max-h size focus :max-h-1px:focus height: 1px; focus:max-h-0px to focus:max-h-100px hover:max-h size hover :max-h-1px:focus height: 1px; hover:max-h-0px to hover:max-h-100px greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:max-h-10px` to only apply the max-h-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:max-h-10px md: 480px 768px md:max-h-10px lg: 768px 1080px lg:max-h-10px greenCSS media queries can also be combined with active focus and hover states for example use `sm:max-h-10px` to apply the max-h-10px utility at only small screen sizes at or below 480px or `active:md:max-h-10px` to apply the max-h-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query : classname size ` p e `active:md:m-10px` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:max-h size focus:max-h size hover:max-h size active maximum height focus maximum height hover maximum height active:sm:max-h size focus:sm:max-h size hover:sm:max-h size active small screens maximum height focus small screens maximum height hover small screens maximum height active:md:max-h size focus:md:max-h size hover:md:max-h size active medium screens maximum height focus medium screens maximum height hover medium screens maximum height active:lg:max-h size focus:lg:max-h size hover:lg:max-h size active large screens maximum height focus large screens maximum height hover large screens maximum height sources max-height https: developer mozilla org en-us docs web css max-height "}},{"slug":"sizing-maximum-width","frontmatter":{"isBlog":false,"title":"maximum width","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s maximum width.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"sizing","author":"severin glaser","keywords":"sizing, maximum width, max-w-","classNames":"","plainText":" greenCSS css class example maximum value maximum value step max-w size max-w-1px width: 1px; max-w-0px max-w-100px 1px max-w size max-w-11rem width: 1rem; max-w-11rem max-w-100rem 1rem max-w size max-w-1% width: 1%; max-w-0per max-w-100per 1% max-w size max-w-1vw width: 1vw; max-w-0vw max-w-100vw 1vw fixed maximum widths control the width on every html element by using the max-w size utility with a postfix variable like ` -px -rem -vw ` 1 the pixel width class range is from 0 to positive 100 and uses the px postfix the steps are + 1px e g `max-w-0px max-w-1px max-w-100px` 2 the rem width class range is from positive 11rem to positive 100rem and uses the rem postfix the steps are + 1rem e g `max-w-11rem max-w-12rem max-w-100rem` ⚠️ remember 1rem = 10px or 10rem = 100px 3 the viewport width class range is from 0vw to positive 100vw and uses the vw postfix the steps are + 1vw e g `max-w-0vw max-w-1vw max-w-100vw` use max-w-100vw to make an element span the entire width of the viewport  percentage widths control the percentage width on every html element by using the max-w size utility with the postfix variable ` -per ` 1 the percentage width class range is from 0 to positive 100 and uses the per postfix the steps are + 1% e g `max-w-0per max-w-1per max-w-100per`  reset the maximum width the ` max-w-auto ` utility can be useful if you need to remove an element’s assigned width under a specific condition like at a particular breakpoint blog responsive-greenCSS-breakpoints :  💡 click how to use the default width docs sizing-width or minimum width docs sizing-minimum-width active focus and hover states greenCSS css class example range active:max-w size active :max-w-1px:active width: 1px; active:max-w-0px to active:max-w-100px focus:max-w size focus :max-w-1px:focus width: 1px; focus:max-w-0px to focus:max-w-100px hover:max-w size hover :max-w-1px:focus width: 1px; hover:max-w-0px to hover:max-w-100px greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:max-w-10px` to only apply the max-w-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:max-w-10px md: 480px 768px md:max-w-10px lg: 768px 1080px lg:max-w-10px greenCSS media queries can also be combined with active focus and hover states for example use `sm:max-w-10px` to apply the max-w-10px utility at only small screen sizes at or below 480px or `active:md:max-w-10px` to apply the max-w-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query : classname size ` p e `active:md:m-10px` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:max-w size focus:max-w size hover:max-w size active maximum width focus maximum width hover maximum width active:sm:max-w size focus:sm:max-w size hover:sm:max-w size active small screens maximum width focus small screens maximum width hover small screens maximum width active:md:max-w size focus:md:max-w size hover:md:max-w size active medium screens maximum width focus medium screens maximum width hover medium screens maximum width active:lg:max-w size focus:lg:max-w size hover:lg:max-w size active large screens maximum width focus large screens maximum width hover large screens maximum width sources max-width https: developer mozilla org en-us docs web css max-width "}},{"slug":"sizing-minimum-height","frontmatter":{"isBlog":false,"title":"minimum height","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s minimum height.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"sizing","author":"severin glaser","keywords":"sizing, minimum height, min-h-","classNames":"","plainText":" greenCSS css class example minimum value maximum value step min-h size min-h-1px height: 1px; min-h-0px min-h-100px 1px min-h size min-h-11rem height: 1rem; min-h-11rem min-h-100rem 1rem min-h size min-h-1% height: 1%; min-h-0per min-h-100per 1% min-h size min-h-1vw height: 1vw; min-h-0vw min-h-100vw 1vw fixed minimum heights control the height on every html element by using the min-h size utility with a postfix variable like ` -px -rem -vw ` 1 the pixel height class range is from 0 to positive 100 and uses the px postfix the steps are + 1px e g `min-h-0px min-h-1px min-h-100px` 2 the rem height class range is from positive 11rem to positive 100rem and uses the rem postfix the steps are + 1rem e g `min-h-11rem min-h-12rem min-h-100rem` ⚠️ remember 1rem = 10px or 10rem = 100px 3 the viewport height class range is from 0vw to positive 100vw and uses the vw postfix the steps are + 1vw e g `min-h-0vw min-h-1vw min-h-100vw` use min-h-100vw to make an element span the entire height of the viewport  minimum percentage heights control the percentage height on every html element by using the min-h size utility with the postfix variable ` -per ` 1 the percentage height class range is from 0 to positive 100 and uses the per postfix the steps are + 1% e g `min-h-0per min-h-1per min-h-100per`  reset the minimum height the ` min-h-auto ` utility can be useful if you need to remove an element’s assigned height under a specific condition like at a particular breakpoint blog responsive-greenCSS-breakpoints :  💡 click how to use the default height docs sizing-height or maximum height docs sizing-maximum-height active focus and hover states greenCSS css class example range active:min-h size active :min-h-1px:active height: 1px; active:min-h-0px to active:min-h-100px focus:min-h size focus :min-h-1px:focus height: 1px; focus:min-h-0px to focus:min-h-100px hover:min-h size hover :min-h-1px:focus height: 1px; hover:min-h-0px to hover:min-h-100px greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:min-h-10px` to only apply the min-h-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:min-h-10px md: 480px 768px md:min-h-10px lg: 768px 1080px lg:min-h-10px greenCSS media queries can also be combined with active focus and hover states for example use `sm:min-h-10px` to apply the min-h-10px utility at only small screen sizes at or below 480px or `active:md:min-h-10px` to apply the min-h-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query : classname size ` p e `active:md:m-10px` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:min-h size focus:min-h size hover:min-h size active minimum height focus minimum height hover minimum height active:sm:min-h size focus:sm:min-h size hover:sm:min-h size active small screens minimum height focus small screens minimum height hover small screens minimum height active:md:min-h size focus:md:min-h size hover:md:min-h size active medium screens minimum height focus medium screens minimum height hover medium screens minimum height active:lg:min-h size focus:lg:min-h size hover:lg:min-h size active large screens minimum height focus large screens minimum height hover large screens minimum height sources min-height https: developer mozilla org en-us docs web css min-height "}},{"slug":"sizing-minimum-width","frontmatter":{"isBlog":false,"title":"minimum width","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s minimum width.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"sizing","author":"severin glaser","keywords":"sizing, minimum width, min-w-","classNames":"","plainText":" greenCSS css class example minimum value maximum value step min-w size min-w-1px width: 1px; min-w-0px min-w-100px 1px min-w size min-w-11rem width: 1rem; min-w-11rem min-w-100rem 1rem min-w size min-w-1% width: 1%; min-w-0per min-w-100per 1% min-w size min-w-1vw width: 1vw; min-w-0vw min-w-100vw 1vw fixed minimum widths control the width on every html element by using the min-w size utility with a postfix variable like ` -px -rem -vw ` 1 the pixel width class range is from 0 to positive 100 and uses the px postfix the steps are + 1px e g `min-w-0px min-w-1px min-w-100px` 2 the rem width class range is from positive 11rem to positive 100rem and uses the rem postfix the steps are + 1rem e g `min-w-11rem min-w-12rem min-w-100rem` ⚠️ remember 1rem = 10px or 10rem = 100px 3 the viewport width class range is from 0vw to positive 100vw and uses the vw postfix the steps are + 1vw e g `min-w-0vw min-w-1vw min-w-100vw` use min-w-100vw to make an element span the entire width of the viewport  percentage widths control the percentage width on every html element by using the min-w size utility with the postfix variable ` -per ` 1 the percentage width class range is from 0 to positive 100 and uses the per postfix the steps are + 1% e g `min-w-0per min-w-1per min-w-100per`  reset the minimum width the ` min-w-auto ` utility can be useful if you need to remove an element’s assigned width under a specific condition like at a particular breakpoint blog responsive-greenCSS-breakpoints :  💡 click how to use the default width docs sizing-width or maximum width docs sizing-maximum-width active focus and hover states greenCSS css class example range active:min-w size active :min-w-1px:active width: 1px; active:min-w-0px to active:min-w-100px focus:min-w size focus :min-w-1px:focus width: 1px; focus:min-w-0px to focus:min-w-100px hover:min-w size hover :min-w-1px:focus width: 1px; hover:min-w-0px to hover:min-w-100px greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:min-w-10px` to only apply the min-w-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:min-w-10px md: 480px 768px md:min-w-10px lg: 768px 1080px lg:min-w-10px greenCSS media queries can also be combined with active focus and hover states for example use `sm:min-w-10px` to apply the min-w-10px utility at only small screen sizes at or below 480px or `active:md:min-w-10px` to apply the min-w-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query : classname size ` p e `active:md:m-10px` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:min-w size focus:min-w size hover:min-w size active minimum width focus minimum width hover minimum width active:sm:min-w size focus:sm:min-w size hover:sm:min-w size active small screens minimum width focus small screens minimum width hover small screens minimum width active:md:min-w size focus:md:min-w size hover:md:min-w size active medium screens minimum width focus medium screens minimum width hover medium screens minimum width active:lg:min-w size focus:lg:min-w size hover:lg:min-w size active large screens minimum width focus large screens minimum width hover large screens minimum width sources min-width https: developer mozilla org en-us docs web css min-width "}},{"slug":"sizing-variables","frontmatter":{"isBlog":false,"title":"sizing variables","date":"apr 06. 2022","excerpt":"utility classes for controlling custom sizing variables.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"sizing","author":"severin glaser","keywords":"sizing, width, height, auto","classNames":"","plainText":" greenCSS css class example w-auto w-auto width: auto; w-min-content w-min-content width: min-content; w-max-content w-max-content width: max-content; w-fit-content w-fit-content width: fit-content; min-w-auto min-w-auto min-width: fit-content; min-w-0px min-w-0px min-width: 0px; min-w-full min-w-full min-width: 100%; min-w-min-content min-w-min-content min-width: min-content; min-w-max-content min-w-max-content min-width: max-content; min-w-fit-content min-w-fit-content min-width: fit-content; max-w-auto max-w-auto max-width: auto; max-w-min-content max-w-min-content max-width: min-content; max-w-max-content max-w-max-content max-width: max-content; max-w-fit-content max-w-fit-content max-width: fit-content; h-auto h-auto height: auto; h-min-content h-min-content height: min-content; h-max-content h-max-content height: max-content; h-fit-content h-fit-content height: fit-content; min-h-auto min-h-auto min-height: fit-content; min-h-0px min-h-0px min-height: 0px; min-h-full min-h-full min-height: 100%; min-h-min-content min-h-min-content min-height: min-content; min-h-max-content min-h-max-content min-height: max-content; min-h-fit-content min-h-fit-content min-height: fit-content; max-h-auto max-h-auto max-height: auto; max-h-min-content max-h-min-content max-height: min-content; max-h-max-content max-h-max-content max-height: max-content; max-h-fit-content max-h-fit-content max-height: fit-content; custom sizing variables control the width minimum width maximum width height minimum height od maximum height on every html element by using the greenCSS classes shown above  reset width the ` w-auto ` utility can be useful if you need to remove an element’s assigned width under a specific condition like at a particular breakpoint blog responsive-greenCSS-breakpoints :  💡 click to see how to use the default minimum width docs sizing-minimum-width maximum width docs sizing-maximum-width or width docs sizing-width active focus and hover states greenCSS css class example active: variable active :max-h-auto:active max-height: auto; focus: variable focus :max-h-auto:focus max-height: auto; hover: variable hover :max-h-auto:focus max-height: auto; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:max-h-auto` to only apply the max-h-auto utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:max-h-fit-content md: 480px 768px md:max-h-fit-content lg: 768px 1080px lg:max-h-fit-content greenCSS media queries can also be combined with active focus and hover states for example use `sm:max-h-fit-content` to apply the `max-h-fit-content` utility at only small screen sizes at or below 480px or `active:md:max-h-fit-content` to apply the `max-h-fit-content` utility class only at medium screen sizes 480px 768px and on active state 1 the structure is as follows: ` conditional state : media query : classname ` p e `active:md:m-auto` "}},{"slug":"sizing-width","frontmatter":{"isBlog":false,"title":"width","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s width.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"sizing","author":"severin glaser","keywords":"sizing, width, w-, max-w, min-w","classNames":"","plainText":" greenCSS css class example minimum value maximum value step w size w-1px width: 1px; w-0px w-100px 1px w size w-11rem width: 1rem; w-11rem w-100rem 1rem w size w-1% width: 1%; w-0per w-100per 1% w size w-1vw width: 1vw; w-0vw w-100vw 1vw fixed widths control the width on every html element by using the w size utility with a postfix variable like ` -px -rem -vw ` 1 the pixel width class range is from 0 to positive 100 and uses the px postfix the steps are + 1px e g `w-0px w-1px w-100px` 2 the rem width class range is from positive 11rem to positive 100rem and uses the rem postfix the steps are + 1rem e g `w-11rem w-12rem w-100rem` ⚠️ remember 1rem = 10px or 10rem = 100px 3 the viewport width class range is from 0vw to positive 100vw and uses the vw postfix the steps are + 1vw e g `w-0vw w-1vw w-100vw` use w-100vw to make an element span the entire width of the viewport  percentage widths control the percentage width on every html element by using the w size utility with the postfix variable ` -per ` 1 the percentage width class range is from 0 to positive 100 and uses the per postfix the steps are + 1% e g `w-0per w-1per w-100per`  reset width the ` w-auto ` utility can be useful if you need to remove an element’s assigned width under a specific condition like at a particular breakpoint blog responsive-greenCSS-breakpoints :  💡 click how to use the default minimum width docs sizing-minimum-width or maximum width docs sizing-maximum-width active focus and hover states greenCSS css class example range active:w size active :w-1px:active width: 1px; active:w-0px to active:w-100px focus:w size focus :w-1px:focus width: 1px; focus:w-0px to focus:w-100px hover:w size hover :w-1px:focus width: 1px; hover:w-0px to hover:w-100px greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:w-10px` to only apply the w-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:w-10px md: 480px 768px md:w-10px lg: 768px 1080px lg:w-10px greenCSS media queries can also be combined with active focus and hover states for example use `sm:w-10px` to apply the w-10px utility at only small screen sizes at or below 480px or `active:md:w-10px` to apply the w-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query : classname size ` p e `active:md:m-10px` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:w size focus:w size hover:w size active width focus width hover width active:sm:w size focus:sm:w size hover:sm:w size active small screens width focus small screens width hover small screens width active:md:w size focus:md:w size hover:md:w size active medium screens width focus medium screens width hover medium screens width active:lg:w size focus:lg:w size hover:lg:w size active large screens width focus large screens width hover large screens width sources width https: developer mozilla org en-us docs web css width "}},{"slug":"spacing-margin-horizontal","frontmatter":{"isBlog":false,"title":"margin horizontal","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s margin to its horizontal sides.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"spacing","author":"severin glaser","keywords":"margin, negative margin, spacing, margin-inline","classNames":"","plainText":" greenCSS css class example minimum value maximum value step mx size mx-1px margin-inline: 1px; mx-0px mx-100px 1px mx-neg size mx-neg-1px margin-inline: -1px; mx-neg-100px mx-neg-1px 1px add horizontal margin control the horizontal margin on the right and left margin-inline use the mx size utility the horizontal margin class range is from negative -100 to positive 100 uses pixel and the px postfix the steps are + 1px e g `mx-0px mx-1px mx-100px` additionally you can also use rem values reminder: 1rem = 10px the rem margin class range is from negative -30 to positive 30 and uses the rem postfix the steps are + 1rem e g `mx-0rem mx-1rem mx-30rem` 💡 margin-inline can mainly be display in modern browsers with the latest updates instead you can also use margin left and right docs spacing-margin-side  active focus and hover states greenCSS css class example range active:mx size active :mx-1px:active margin-inline: 1px; active:mx-neg-100px to active:mx-100px focus:mx size focus :mx-1px:focus margin-inline: 1px; focus:mx-neg-100px to focus:mx-100px hover:mx size hover :mx-1px:focus margin-inline: 1px; hover:mx-neg-100px to hover:mx-100px greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:mx-10px` to only apply the mx-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:mx-10px md: 480px 768px md:mx-10px lg: 768px 1080px lg:mx-10px greenCSS media queries can also be combined with active focus and hover states for example use `sm:mx-10px` to apply the mx-10px utility at only small screen sizes at or below 480px or `active:md:mx-10px` to apply the mx-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` active focus hover : media query :mx size ` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:mx focus:mx hover:mx active margin inline focus margin inline hover margin inline active:sm:mx focus:sm:mx hover:sm:mx active small screens margin inline focus small screens margin inline hover small screens margin inline active:md:mx focus:md:mx hover:md:mx active medium screens margin inline focus medium screens margin inline hover medium screens margin inline active:lg:mx focus:lg:mx hover:lg:mx active large screens margin inline focus large screens margin inline hover large screens margin inline sources margin-inline https: developer mozilla org en-us docs web css margin-inline "}},{"slug":"spacing-margin-side","frontmatter":{"isBlog":false,"title":"margin side","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s margin to its sides.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"spacing","author":"severin glaser","keywords":"margin, negative margin, spacing, margin-top, margin-right, margin-bottom, margin-left","classNames":"","plainText":" greenCSS css class example minimum value maximum value step m t r b l size mt-1px margin-top: 1px; mt-0px mt-100px 1px m t r b l -neg size mt-neg-1px margin-top: -1px; mt-neg-100px mt-neg-1px 1px m t r b l size mt-1rem margin-top: 0rem; mt-0rem mt-30rem 1px m t r b l -neg size mt-neg-30rem margin-top: -30rem; mt-neg-30rem mt-neg-1rem 1px add margin to specific side control the margin on a specific side such as top right bottom or left margin-top margin-right margin-bottom margin-left use the `m t r b l size ` utility the margin class range is from negative -100 to positive 100 uses pixel and the px postfix the steps are + 1px e g `mt-0px mt-1px mt-100px` additionally you can also use rem values reminder: 1rem = 10px the rem margin class range is from negative -30 to positive 30 and uses the rem postfix the steps are + 1rem e g `mt-0rem mt-1rem mt-30rem`  💡 how to use symmetrical margin on every side? have a closer look at margin docs spacing-margin active focus and hover states greenCSS css class example range active:mt size active :mt-1px:active margin-top: 1px; active:mt-neg-100px to active:mt-100px focus:mt size focus :mt-1px:focus margin-top: 1px; focus:mt-neg-100px to focus:mt-100px hover:mt size hover :mt-1px:focus margin-top: 1px; hover:mt-neg-100px to hover:mt-100px greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:mt-10px` to only apply the mt-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:mt-10px md: 480px 768px md:mt-10px lg: 768px 1080px lg:mt-10px greenCSS media queries can also be combined with active focus and hover states for example use `sm:mt-10px` to apply the mt-10px utility at only small screen sizes at or below 480px or `active:md:mt-10px` to apply the mt-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` active focus hover : media query :m t r b l size ` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:mt active:mr active:mb active:ml active margin top active margin right active margin bottom active margin left focus:mt focus:mr focus:mb focus:ml focus margin top focus margin right focus margin bottom focus margin left hover:mt hover:mr hover:mb hover:ml hover margin top hover margin right hover margin bottom hover margin left sources margin-top https: developer mozilla org en-us docs web css margin-top margin-right https: developer mozilla org en-us docs web css margin-right margin-bottom https: developer mozilla org en-us docs web css margin-bottom margin-left https: developer mozilla org en-us docs web css margin-left "}},{"slug":"spacing-margin-vertical","frontmatter":{"isBlog":false,"title":"margin vertical","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s margin to its vertical sides.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"spacing","author":"severin glaser","keywords":"margin, negative margin, spacing, margin-block","classNames":"","plainText":" greenCSS css class example minimum value maximum value step my size my-1px margin-block: 1px; my-0px my-100px 1px my-neg size my-neg-1px margin-block: -1px; my-neg-100px my-neg-1px 1px add vertical margin control the vertical margin on the top and bottom margin-block use the my size utility the vertical margin class range is from negative -100 to positive 100 uses pixel and the px postfix the steps are + 1px e g `my-0px my-1px my-100px` additionally you can also use rem values reminder: 1rem = 10px the rem margin class range is from negative -30 to positive 30 and uses the rem postfix the steps are + 1rem e g `my-0rem my-1rem my-30rem` 💡 margin-block can mainly be display in modern browsers with the latest updates instead you can also use margin top and bottom docs spacing-margin-side  active focus and hover states greenCSS css class example range active:my size active :my-1px:active margin-block: 1px; active:my-neg-100px to active:my-100px focus:my size focus :my-1px:focus margin-block: 1px; focus:my-neg-100px to focus:my-100px hover:my size hover :my-1px:focus margin-block: 1px; hover:my-neg-100px to hover:my-100px greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:my-10px` to only apply the my-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:my-10px md: 480px 768px md:my-10px lg: 768px 1080px lg:my-10px greenCSS media queries can also be combined with active focus and hover states for example use `sm:my-10px` to apply the my-10px utility at only small screen sizes at or below 480px or `active:md:my-10px` to apply the my-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` active focus hover : media query :my size ` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:my focus:my hover:my active margin block focus margin block hover margin block active:sm:my focus:sm:my hover:sm:my active small screens margin block focus small screens margin block hover small screens margin block active:md:my focus:md:my hover:md:my active medium screens margin block focus medium screens margin block hover medium screens margin block active:lg:my focus:lg:my hover:lg:my active large screens margin block focus large screens margin block hover large screens margin block sources margin-block https: developer mozilla org en-us docs web css margin-block "}},{"slug":"spacing-margin","frontmatter":{"isBlog":false,"title":"margin","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s margin.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"spacing","author":"severin glaser","keywords":"margin, negative margin, spacing, css class, responsive","classNames":"","plainText":" greenCSS css class example minimum value maximum value step m size m-1px margin: 1px; m-0px m-100px 1px m-neg size m-neg-1px margin: -1px; m-neg-100px m-neg-1px 1px m size m-1rem margin: 0rem; m-0rem m-30rem 1rem m-neg size m-neg-30rem margin: -30rem; m-neg-30rem m-neg-1rem 1rem add margin to all sides control the margin on all sides of an html element by using the m size utility the pixel margin class range is from negative -100 to positive 100 and uses the px postfix the steps are + 1px e g `m-0px m-1px m-100px` additionally you can also use rem values reminder: 1rem = 10px the rem margin class range is from negative -30 to positive 30 and uses the rem postfix the steps are + 1rem e g `m-0rem m-1rem m-30rem`  💡 how to use margin on a specific side? have a closer look at margin top right bottom and left docs spacing-margin-side active focus and hover states greenCSS css class example range active:m size active :m-1px:active margin: 1px; active:m-neg-100px to active:m-100px focus:m size focus :m-1px:focus margin: 1px; focus:m-neg-100px to focus:m-100px hover:m size hover :m-1px:focus margin: 1px; hover:m-neg-100px to hover:m-100px greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:m-10px` to only apply the m-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:m-10px md: 480px 768px md:m-10px lg: 768px 1080px lg:m-10px greenCSS media queries can also be combined with active focus and hover states for example use `sm:m-10px` to apply the m-10px utility at only small screen sizes at or below 480px or `active:md:m-10px` to apply the m-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` active focus hover : media query :m size ` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:m size focus:m size hover:m size active margin focus margin hover margin active:sm:m size focus:sm:m size hover:sm:m size active small screens margin focus small screens margin hover small screens margin active:md:m size focus:md:m size hover:md:m size active medium screens margin focus medium screens margin hover medium screens margin active:lg:m size focus:lg:m size hover:lg:m size active large screens margin focus large screens margin hover large screens margin sources margin https: developer mozilla org en-us docs web css margin "}},{"slug":"spacing-padding-horizontal","frontmatter":{"isBlog":false,"title":"padding horizontal","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s padding to its horizontal sides.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"spacing","author":"severin glaser","keywords":"padding, negative padding, spacing, padding-inline","classNames":"","plainText":" greenCSS css class example minimum value maximum value step px size px-1px padding-inline: 1px; px-0px px-100px 1px px-neg size px-neg-1px padding-inline: -1px; px-neg-100px px-neg-1px 1px add horizontal padding control the horizontal padding on the right and left padding-inline use the px size utility the horizontal padding class range is from negative -100 to positive 100 uses pixel and the px postfix the steps are + 1px e g `px-0px px-1px px-100px` additionally you can also use rem values reminder: 1rem = 10px the rem padding class range is from negative -30 to positive 30 and uses the rem postfix the steps are + 1rem e g `px-0rem px-1rem px-30rem` 💡 padding-inline can mainly be display in modern browsers with the latest updates instead you can also use padding left and right docs spacing-padding-side  active focus and hover states greenCSS css class example range active:px size active :px-1px:active padding-inline: 1px; active:px-neg-100px to active:px-100px focus:px size focus :px-1px:focus padding-inline: 1px; focus:px-neg-100px to focus:px-100px hover:px size hover :px-1px:focus padding-inline: 1px; hover:px-neg-100px to hover:px-100px greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:px-10px` to only apply the px-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:px-10px md: 480px 768px md:px-10px lg: 768px 1080px lg:px-10px greenCSS media queries can also be combined with active focus and hover states for example use `sm:px-10px` to apply the px-10px utility at only small screen sizes at or below 480px or `active:md:px-10px` to apply the px-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` active focus hover : media query :px size ` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:px focus:px hover:px active padding inline focus padding inline hover padding inline active:sm:px focus:sm:px hover:sm:px active small screens padding inline focus small screens padding inline hover small screens padding inline active:md:px focus:md:px hover:md:px active medium screens padding inline focus medium screens padding inline hover medium screens padding inline active:lg:px focus:lg:px hover:lg:px active large screens padding inline focus large screens padding inline hover large screens padding inline sources padding-inline https: developer mozilla org en-us docs web css padding-inline "}},{"slug":"spacing-padding-side","frontmatter":{"isBlog":false,"title":"padding side","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s padding to its sides.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"spacing","author":"severin glaser","keywords":"padding, negative padding, spacing, padding-top, padding-right, padding-bottom, padding-left","classNames":"","plainText":" greenCSS css class example minimum value maximum value step p t r b l size pt-1px padding-top: 1px; pt-0px pt-100px 1px p t r b l -neg size pt-neg-1px padding-top: -1px; pt-neg-100px pt-neg-1px 1px p t r b l size pt-1rem padding-top: 0rem; pt-0rem pt-30rem 1rem p t r b l -neg size pt-neg-30rem padding-top: -30rem; pt-neg-30rem pt-neg-1rem 1rem add padding to specific side control the padding on a specific side such as top right bottom or left padding-top padding-right padding-bottom padding-left use the p t r b l size utility the padding class range is from negative -100 to positive 100 uses pixel and the px postfix the steps are + 1px e g `pt-0px pt-1px pt-100px` additionally you can also use rem values reminder: 1rem = 10px the rem padding class range is from negative -30 to positive 30 and uses the rem postfix the steps are + 1rem e g `pt-0rem pt-1rem pt-30rem`  💡 how to use symmetrical padding on every side? have a closer look at padding docs spacing-padding active focus and hover states greenCSS css class example range active:pt size active :pt-1px:active padding-top: 1px; active:pt-neg-100px to active:pt-100px focus:pt size focus :pt-1px:focus padding-top: 1px; focus:pt-neg-100px to focus:pt-100px hover:pt size hover :pt-1px:focus padding-top: 1px; hover:pt-neg-100px to hover:pt-100px greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:pt-10px` to only apply the pt-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:pt-10px md: 480px 768px md:pt-10px lg: 768px 1080px lg:pt-10px greenCSS media queries can also be combined with active focus and hover states for example use `sm:pt-10px` to apply the pt-10px utility at only small screen sizes at or below 480px or `active:md:pt-10px` to apply the pt-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` active focus hover : media query :p t r b l size ` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:pt active:pr active:pb active:pl active padding top active padding right active padding bottom active padding left focus:pt focus:pr focus:pb focus:pl focus padding top focus padding right focus padding bottom focus padding left hover:pt hover:pr hover:pb hover:pl hover padding top hover padding right hover padding bottom hover padding left sources padding-top https: developer mozilla org en-us docs web css padding-top padding-right https: developer mozilla org en-us docs web css padding-right padding-bottom https: developer mozilla org en-us docs web css padding-bottom padding-left https: developer mozilla org en-us docs web css padding-left "}},{"slug":"spacing-padding-vertical","frontmatter":{"isBlog":false,"title":"padding vertical","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s padding to its vertical sides.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"spacing","author":"severin glaser","keywords":"padding, negative padding, spacing, padding-block","classNames":"","plainText":" greenCSS css class example minimum value maximum value step py size py-1px padding-block: 1px; py-0px py-100px 1px py-neg size py-neg-1px padding-block: -1px; py-neg-100px py-neg-1px 1px add vertical padding control the vertical padding on the top and bottom padding-block use the py size utility the vertical padding class range is from negative -100 to positive 100 uses pixel and the px postfix the steps are + 1px e g `py-0px py-1px py-100px` additionally you can also use rem values reminder: 1rem = 10px the rem padding class range is from negative -30 to positive 30 and uses the rem postfix the steps are + 1rem e g `py-0rem py-1rem py-30rem` 💡 padding-block can mainly be display in modern browsers with the latest updates instead you can also use padding top and bottom docs spacing-padding-side  active focus and hover states greenCSS css class example range active:py size active :py-1px:active padding-block: 1px; active:py-neg-100px to active:py-100px focus:py size focus :py-1px:focus padding-block: 1px; focus:py-neg-100px to focus:py-100px hover:py size hover :py-1px:focus padding-block: 1px; hover:py-neg-100px to hover:py-100px greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:py-10px` to only apply the py-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:py-10px md: 480px 768px md:py-10px lg: 768px 1080px lg:py-10px greenCSS media queries can also be combined with active focus and hover states for example use `sm:py-10px` to apply the py-10px utility at only small screen sizes at or below 480px or `active:md:py-10px` to apply the py-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` active focus hover : media query :py size ` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:py focus:py hover:py active padding block focus padding block hover padding block active:sm:py focus:sm:py hover:sm:py active small screens padding block focus small screens padding block hover small screens padding block active:md:py focus:md:py hover:md:py active medium screens padding block focus medium screens padding block hover medium screens padding block active:lg:py focus:lg:py hover:lg:py active large screens padding block focus large screens padding block hover large screens padding block sources padding-block https: developer mozilla org en-us docs web css padding-block "}},{"slug":"spacing-padding","frontmatter":{"isBlog":false,"title":"padding","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s padding.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"spacing","author":"severin glaser","keywords":"padding, negative padding, spacing, css class, responsive","classNames":"","plainText":" greenCSS css class example minimum value maximum value step p size p-1px padding: 1px; p-0px p-100px 1px p-neg size p-neg-1px padding: -1px; p-neg-100px p-neg-1px 1px p size p-1rem padding: 0rem; p-0rem p-30rem 1rem p-neg size p-neg-30rem padding: -30rem; p-neg-30rem p-neg-1rem 1rem add padding to all sides control the padding on all sides of an html element by using the p size utility the pixel padding class range is from negative -100 to positive 100 and uses the px postfix the steps are + 1px e g `p-0px p-1px p-100px` additionally you can also use rem values reminder: 1rem = 10px the rem padding class range is from negative -30 to positive 30 and uses the rem postfix the steps are + 1rem e g `p-0rem p-1rem p-30rem`  💡 how to use padding on a specific side? have a closer look at padding top right bottom and left docs spacing-padding-side active focus and hover states greenCSS css class example range active:p size active :p-1px:active padding: 1px; active:p-neg-100px to active:p-100px focus:p size focus :p-1px:focus padding: 1px; focus:p-neg-100px to focus:p-100px hover:p size hover :p-1px:focus padding: 1px; hover:p-neg-100px to hover:p-100px greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:p-10px` to only apply the p-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:p-10px md: 480px 768px md:p-10px lg: 768px 1080px lg:p-10px greenCSS media queries can also be combined with active focus and hover states for example use `sm:p-10px` to apply the p-10px utility at only small screen sizes at or below 480px or `active:md:p-10px` to apply the p-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` active focus hover : media query :p size ` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:p size focus:p size hover:p size active padding focus padding hover padding active:sm:p size focus:sm:p size hover:sm:p size active small screens padding focus small screens padding hover small screens padding active:md:p size focus:md:p size hover:md:p size active medium screens padding focus medium screens padding hover medium screens padding active:lg:p size focus:lg:p size hover:lg:p size active large screens padding focus large screens padding hover large screens padding sources padding https: developer mozilla org en-us docs web css padding "}},{"slug":"spacing-variables","frontmatter":{"isBlog":false,"title":"spacing variables","date":"apr 06. 2022","excerpt":"utility classes for controlling custom spacing variables.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"spacing","author":"severin glaser","keywords":"spacing, margin, padding, auto","classNames":"","plainText":" greenCSS css class example m-auto w-auto margin: auto; mx-auto mx-auto margin-inline: auto; my-auto my-auto margin-block: auto; mt-auto mt-auto margin-top: auto; mr-auto mr-auto margin-right: auto; mb-auto mb-auto margin-bottom: auto; ml-auto ml-auto margin-left: auto; p-auto p-auto padding: auto; px-auto px-auto padding-inline: auto; py-auto py-auto padding-block: auto; pt-auto pt-auto padding-top: auto; pr-auto pr-auto padding-right: auto; pb-auto pb-auto padding-bottom: auto; pl-auto pl-auto padding-left: auto; custom sizing variables control the margin auto or padding auto classes on every html element by using the greenCSS classes shown above  active focus and hover states greenCSS css class example active: variable active :m-auto:active margin: auto; focus: variable focus :m-auto:focus margin: auto; hover: variable hover :m-auto:focus margin: auto; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:m-auto` to only apply the m-auto utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:m-auto md: 480px 768px md:m-auto lg: 768px 1080px lg:m-auto greenCSS media queries can also be combined with active focus and hover states for example use `sm:m-auto` to apply the `m-auto` utility at only small screen sizes at or below 480px or `active:md:m-auto` to apply the `m-auto` utility class only at medium screen sizes 480px 768px and on active state 1 the structure is as follows: ` conditional state : media query : classname ` p e `active:md:m-auto` "}},{"slug":"typography-font-family","frontmatter":{"isBlog":false,"title":"font family","date":"apr 13. 2022","excerpt":"utility classes for controlling the font family.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"typography","author":"severin glaser","keywords":"font family, typography, sans, serif, monospace","classNames":"","plainText":" greenCSS css class example sans sans font-family: -apple-system blinkmacsystemfont roboto arial 'helvetica neue' 'segoe ui' oxygen ubuntu cantarell 'open sans' sans-serif; serif serif font-family: 'times new roman' times serif; monospace monospace font-family: 'courier new' courier monospace; cursive cursive font-family: 'brush script mt' cursive; fantasy fantasy font-family: copperplate papyrus fantasy; custom sizing variables control the font face on every html element by using the greenCSS classes shown above for example to give your website a unique font you can download omen motion brand typography use your custom or google fonts  active focus and hover states greenCSS css class example active: variable active :sans:active font-family: ; focus: variable focus :sans:focus font-family: ; hover: variable hover :sans:focus font-family: ; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:sans` to only apply the sans utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:sans md: 480px 768px md:sans lg: 768px 1080px lg:sans greenCSS media queries can also be combined with active focus and hover states for example use `sm:sans` to apply the `sans` utility at only small screen sizes at or below 480px or `active:md:sans` to apply the `sans` utility class only at medium screen sizes 480px 768px and on active state 1 the structure is as follows: ` conditional state : media query : classname ` p e `active:md:sans` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:sans focus:sans hover:sans active font family focus font family hover font family active:sm:sans focus:sm:sans hover:sm:sans active small screens font family focus small screens font family hover small screens font family active:md:sans focus:md:sans hover:md:sans active medium screens font family focus medium screens font family hover medium screens font family active:lg:sans focus:lg:sans hover:lg:sans active large screens font family focus large screens font family hover large screens font family sources font-family https: developer mozilla org en-us docs web css font-family "}},{"slug":"typography-font-size","frontmatter":{"isBlog":false,"title":"font size","date":"apr 13. 2022","excerpt":"utility classes for controlling the font size.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"typography","author":"severin glaser","keywords":"font size, typography, font-size, responsive font","classNames":"","plainText":" greenCSS css class example minimum value maximum value step text number px text-10px font-size: 1px; 0 100 +1px text number px text-300px font-size: 300px; 110 300 +10px rel-text number vw rel-text-10vw font-size: 1px; 0 100 +1vw custom sizing variables control the font size on every html element by using the greenCSS classes shown above `text-1px` equals to the css class `font-size: 1px` `text-2px` equals to the css class `font-size: 2px` the maximum would be `text-100px` it equals to the css class `font-size: 100px` in general: the greenCSS class steps are +1px ranging from 0-100 if you want to use even highter font sizes you can use font sizes which starts from `text-110px` up to `text-300px` those classes have a step of +10px you can also use responsive font sizes `rel-text number vw` ranging from 0vw to 100vw with a step of +1vw  active focus and hover states greenCSS css class example active: variable active :text-10px:active font-size: 10px; focus: variable focus :text-10px:focus font-size: 10px; hover: variable hover :text-10px:focus font-size: 10px; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:text-10px` to only apply the text-10px utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:text-10px md: 480px 768px md:text-10px lg: 768px 1080px lg:text-10px greenCSS media queries can also be combined with active focus and hover states for example use `sm:text-10px` to apply the `text-10px` utility at only small screen sizes at or below 480px or `active:md:text-10px` to apply the `text-10px` utility class only at medium screen sizes 480px 768px and on active state 1 the structure is as follows: ` conditional state : media query : number px` p e `active:md:text-10px` 1 the structure for the relative font size is as follows: ` conditional state : media query :text number vw` p e `active:md:text-10vw` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:text-10px focus:text-10px hover:text-10px active font size focus font size hover font size active:sm:text-10px focus:sm:text-10px hover:sm:text-10px active small screens font size focus small screens font size hover small screens font size active:md:text-10px focus:md:text-10px hover:md:text-10px active medium screens font size focus medium screens font size hover medium screens font size active:lg:text-10px focus:lg:text-10px hover:lg:text-10px active large screens font size focus large screens font size hover large screens font size sources font-size https: developer mozilla org en-us docs web css font-size "}},{"slug":"typography-font-style","frontmatter":{"isBlog":false,"title":"font style","date":"apr 13. 2022","excerpt":"utility classes for controlling the font style.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"typography","author":"severin glaser","keywords":"font style, typography, font-style, italic, oblique","classNames":"","plainText":" greenCSS css class example font-style-normal font-style-normal font-style: normal; font-style-italic font-style-italic font-style: italic; font-style-oblique font-style-oblique font-style: oblique; font-style-initial font-style-initial font-style: initial; font-style-inherit font-style-inherit font-style: inherit; font-style-revert font-style-revert font-style: revert; font-style-unset font-style-unset font-style: unset; custom sizing variables control the font style on every html element by using the greenCSS classes shown above use the following structure to generate your font style `font-style keyword `  active focus and hover states greenCSS css class example active: variable active :font-style-normal:active font-style:: normal; focus: variable focus :font-style-normal:focus font-style:: normal; hover: variable hover :font-style-normal:focus font-style:: normal; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:font-style-normal` to only apply the font-style-normal utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:font-style-normal md: 480px 768px md:font-style-normal lg: 768px 1080px lg:font-style-normal greenCSS media queries can also be combined with active focus and hover states for example use `sm:font-style-normal` to apply the `font-style-normal` utility at only small screen sizes at or below 480px or `active:md:font-style-normal` to apply the `font-style-normal` utility class only at medium screen sizes 480px 768px and on active state 1 the structure is as follows: ` conditional state : media query :font-style keyword ` p e `active:md:font-style-normal` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:font-style-normal focus:font-style-normal hover:font-style-normal active font style focus font style hover font style active:sm:font-style-normal focus:sm:font-style-normal hover:sm:font-style-normal active small screens font style focus small screens font style hover small screens font style active:md:font-style-normal focus:md:font-style-normal hover:md:font-style-normal active medium screens font style focus medium screens font style hover medium screens font style active:lg:font-style-normal focus:lg:font-style-normal hover:lg:font-style-normal active large screens font style focus large screens font style hover large screens font style sources font-style https: developer mozilla org en-us docs web css font-style "}},{"slug":"typography-font-weight","frontmatter":{"isBlog":false,"title":"font weight","date":"apr 13. 2022","excerpt":"utility classes for controlling the font weight.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"typography","author":"severin glaser","keywords":"font weight, typography, font-weight","classNames":"","plainText":" greenCSS css class example minimum value maximum value step font number font-400 font-weight: 400; 100 900 +100 font-bold font-bold font-weight: bold; font-bolder font-bolder font-weight: bolder; font-inherit font-inherit font-weight: inherit; font-initial font-initial font-weight: initial; font-normal font-normal font-weight: normal; font-lighter font-lighter font-weight: lighter; font-revert font-revert font-weight: revert; font-unset font-unset font-weight: unset; custom sizing variables control the font weight on every html element by using the greenCSS classes shown above use the following structure to generate your font weight `font number ` ranging from 100 to 900 with a step of +100 or use the `font keyword ` to use the default css classes like `font-bold` explanation of the classes 1 normal strength equals 400 2 100 is equivalent to thin 3 900 is equivalent to extra black a more detailed explanation or overview can be found here https: developer mozilla org en-us docs web css font-weight meaning of relative weights  active focus and hover states greenCSS css class example active: variable active :font-400:active font-weight: 400; focus: variable focus :font-400:focus font-weight: 400; hover: variable hover :font-400:focus font-weight: 400; greenCSS let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:font-400` to only apply the font-400 utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example sm: 0px 480px sm:font-400 md: 480px 768px md:font-400 lg: 768px 1080px lg:font-400 greenCSS media queries can also be combined with active focus and hover states for example use `sm:font-400` to apply the `font-400` utility at only small screen sizes at or below 480px or `active:md:font-400` to apply the `font-400` utility class only at medium screen sizes 480px 768px and on active state 1 the structure is as follows: ` conditional state : media query :font number ` p e `active:md:font-400` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: greenCSS class names spoken example active:font-400 focus:font-400 hover:font-400 active font weight focus font weight hover font weight active:sm:font-400 focus:sm:font-400 hover:sm:font-400 active small screens font weight focus small screens font weight hover small screens font weight active:md:font-400 focus:md:font-400 hover:md:font-400 active medium screens font weight focus medium screens font weight hover medium screens font weight active:lg:font-400 focus:lg:font-400 hover:lg:font-400 active large screens font weight focus large screens font weight hover large screens font weight sources font-weight https: developer mozilla org en-us docs web css font-weight "}},{"slug":"how-to-create-a-responsive-hero-section","frontmatter":{"isBlog":true,"title":"create a responsive hero section for your website","date":"apr 06. 2022","excerpt":"design and code a simple, modern and responsive 2 grid hero section for your landing page.","cover_image":"/images/blog/cover/stones-hero.webp","category":"tutorial","author":"severin glaser","keywords":"hero section, hero, landing page, website","classNames":"","plainText":" this is a tutorial to create landing page to be more specific a hero section for your website by using greenCSS the aim is to design a beautiful landing page create a responsive layout and a stunning first impression for your website check the html entire-source-code-for-a-html-site or nextjs react code snippets nextjs react-source-code in order to get started right away and if you know how css works this tutorial requires greenCSS to be installed see the tutorial on how to get started blog what-is-greenCSS get-started-now right away a live hero website example examples hero is online start coding html to get started you can download the hero image here https: greenCSS com images blog blogcontent hero-image webp the entire project is wrapped in a `container` class for the responsive appearance a grid system will used the setup is straightforward the hero section project let us build a smooth transition for the button and a responsive layout for an awesome first impression for your website the design idea for the hero section comes from https: www figma com community file 1087825555350003165 website-hero-sections-figma-template-%7c-brix-templates which is licensed under cc by 4 0 this is what we will code in under 5 minutes: ! reduce file size images blog blogcontent hero-section webp?style=centerme the navbar 1 first a navigation bar is created this consists of a `flex` element that separates the left and right side with witespace for this purpose `justify-between` is used the button on the right side has four states the default with `bg-blue` the hover `hover:bg-blue-5` the active `active:bg-blue-3` and the focus `focus:bg-blue-7`state for a smooth and professional transition `transition-all` and `transition-duration-500ms` should be used  set the grid to get a responsive layout for the hero section a parent element must consist of a grid system the following code snippet can be used for this by default it consists of 2 columns `grid-col-2` with a gap of 30pixel small and medium screens use `grid-col-1` where the whole width is used  left hero part 1 the left side is quite common it consists only of text blocks which have a different font-size font-color and font-weight  right hero part 1 the right side is also easy to handle since we are using an image the image can be implemented as a background image or as an ` img ` tag in this section we will cover both solutions again `col-span-1` and relative heights and widths are used to give the image the desired dimensions  image as background image a div is inserted inside the right hero section right-hero-part the image is adjusted by means of the style properties note: `background-position: '60% 40%'` is being used to focus the image adjuste the values as needed for your image  image with the img-tag an img element is inserted inside the right hero section right-hero-part  html source code  nextjs react source code 1 create a new function in your components folder and `import image from 'next image'` the structure is the same as in the html example only the style tags change and instead of a background image or the image tag the image component of nextjs will be used  "}},{"slug":"how-to-delete-unused-css-classes","frontmatter":{"isBlog":true,"title":"how to delete unused css classes in 2022","date":"mar 06. 2022","excerpt":"make your website loading time 99% faster, by removing unused css classes with purgecss.","cover_image":"/images/blog/cover/remove.webp","category":"postbuild","author":"severin glaser","keywords":"purge css, remove css, development environement, post build","classNames":"","plainText":" this is a tutorial to remove unused greenCSS classes in vanilla html 5 it works for either your own css3 classes and or for greenCSS classes fact! greenCSS is massive this is quite ok in the development environment as soon as your code is released to the public you need to make the files as lightweight as possible for this reason you will be shown here how to properly reduce the file size lose weight with purgecss ! reduce file size images blog blogcontent lightweight-file-size webp?style=centerme the entire file was reduced by 99 4% march 2022 in this example all unused css classes are excluded as a result seo scores are improved user experience is enhanced and your website looks more professional as load times are kept to a minimum it is really easy and only takes a few minutes! in this example a simple html file is resized with purge css html !doctype html html lang=en class=sans head meta charset=utf-8 meta http-equiv=x-ua-compatible content=ie=edge meta name=viewport content=width=device-width initial-scale=1 0 title beautiful purgecss vs greenCSS file title link rel=stylesheet href= css omen css link rel=shortcut icon type=image x-icon href= favicon ico head body section class=flex min-h-100vh gradient-to-right from-red-5 to-orange-2 div class=m-auto reveal-down animate animation-forwards animation-delay-500ms h1 class=max-w-60rem font-800 text-80px text-black sm:text-purple sm:text-40px md:text-red md:text-60px a classy way to write css design h1 div section body html in summary there is a h1 header which has a black default colour and a font size of 80px on medium screens the font-size reduce to 60px and on small screens the font-size reduce to 40px greenCSS uses special characters for the responsive classes sm: md: lg: sm: hover: active: focus: this is a headache for most post-css libraries as they are designed for normal css classes for this reason purgecss is used in this example a node must be installeda and a package json file must be included in the root folder of your project you can easily create a package json by running npm init -y in the root folder npm npm i -d purgecss 1 save purgecss as a development dependency in your project 2 in a further step a purgecss config js must be created in the root directory of your project js purgecss config js module exports = content: 'src index html' css: 'src greenCSS css' defaultextractor: content = content match w- : + ? !: g output: 'css omen css' 1 as content enter all your html source files 2 in css import the default greenCSS css file 3 defaultextractor must be adopted like and copied this as the special regex are applied here 4 in output select your public folder where the lightweight css file should be saved 5 in the html file make sure that the correct css stylesheet is selected the path must be the same as entered in the output html link rel=stylesheet href= css omen css now it is time to reduce the css file via the command line for this you have to create a script in the package json file purgecss: purgecss --config purgecss config js json name: awesome-purging version: 1 0 0 description: main: index js scripts: purgecss: purgecss --config purgecss config js keywords: author: license: isc devdependencies: purgecss: ^4 1 3 you can now purge your css infinitely enter the script npm run purgecss in the command line which takes a short moment until you get the output ⚠️ every time you change your css classes in the html file you have to purge again todo: add --watch for auto detecting changes "}},{"slug":"greenCSS-animations","frontmatter":{"isBlog":true,"title":"simplest way to add beautiful css animations in 2022","date":"feb 24. 2022","excerpt":"create simple, unique and professional looking css animations for your website.","cover_image":"/images/blog/cover/motion_qn0fvq.webp","category":"animation","author":"severin glaser","keywords":"animation, css animations, stagger animation, react, javascript","classNames":"","plainText":" in this tutorial we will show you how to use over 100 different animation types for your website - with one line of code! how to stagger css animations ok honestly! this hardly works without javascript for this reason a stagger effect will be demonstrated based on the mobile navigation bar in nextjs ! nav result images blog blogcontent mobile-nav edkd2s gif?style=centerme js const menu = title: 'home' path: ' ' title: 'brand' path: ' brand' title: 'blog' path: ' blog' ul classname='text-16px text-black flex justify-center items-center min-h-100per flex-col text-left' li menu map item index = return link key= index href= item path a style= textdecoration: 'none' cursor: 'pointer' h3 classname= p-20px clip-inset-in-top animate animation-forwards animation-delay- index + 1 1 00ms item title h3 a link li ul in summary we map over the menu function special attention should be paid to the h3 tag it contains all the classes for the animation js h3 classname= clip-inset-in-top animate animation-forwards animation-delay- index + 1 1 00ms item title h3 1 in total only 4 css classes are necessary for achieving this animation 2 clip-inset-in-top is the animation type 3 animate is the default greenCSS animation-duration property which lasts for 750ms 4 animation-forwards signifies that the animation should retain the current condition after completion 5 animation-delay- index + 1 1 00ms is the most important part for the stagger effect it is conditional and tied to the index the actual calculation takes place at this point index + 1 1 as a result each mapped element gets a different animation delay home has an animation-delay of 100ms brand has an animation-delay of 200ms and blog has an animation-delay of 300ms the different delays create a stagger effect a graphical overview for all animations can be found on the examples page docs animation example what exactly is a vanilla css animation? an animation represents a process which generates a moving frame for the viewer by creating and displaying individual sequences of pixels especially in web development animations can make the difference between a good and a perfect website however it should be used with caution because the boundary between perfect and too much may mean the complete opposite of what was originally intended cascading style sheets css animations usually consist of @keyframes and have different properties such as animation-name animation-duration animation-delay animation-iteration-count animation-direction animation-timing-function animation-fill-mode or animation if you use greenCSS you don't need to code anything greenCSS contains over 100 different css animations all of them are handmade a graphical overview of all animations can be found on the examples page docs animation example why you should use animations the collaboration of design and code plays an important role especially in web development nowadays a beautiful website is more or less easy to create however bringing a web application alive is more difficult the keyword for this process is animation animation originates from the latin verb animare and means as much as spirit life breath or simply to bring to life become dynamic make your beautiful website shine! "}},{"slug":"responsive-greenCSS-breakpoints","frontmatter":{"isBlog":true,"title":"how to use responsive greenCSS breakpoints?","date":"mar 27. 2022","excerpt":"responsive breakpoints - small, medium, large screens or default values.","cover_image":"/images/blog/cover/breakpoints.webp","category":"information","author":"severin glaser","keywords":["greenCSS","tutorial","reference","guide","breakpoints"],"classNames":"","plainText":" this article introduces greenCSS’s responsive breakpoints the motto is not just mobile first we want to ensure that every screen looks amazing for this reason the breakpoints are divided into the following three classes: sm: md: lg: use variant modifiers to target media queries like responsive breakpoints media query range greenCSS example - - sm: 0px - 480px sm:m-10px md: 480px - 768px md:m-10px lg: 768px - 1080px lg:m-10px greenCSS media queries can also be combined with active focus and hover states for example use sm:m-10px to apply the 10px margin utility at only small screen sizes at or below 480px or active:md:m-10px to apply the m-10px utility only between small screen sizes 480px and medium screen sizes 768px if you use lg-m-10px the margin of 10px will only be set between 768px and 1080px if you want to use standard values for all screens you can use the default class name: m-10px 1 the structure is as follows: conditional state : media query : classname size p e active:md:m-10px "}},{"slug":"what-is-greenCSS","frontmatter":{"isBlog":true,"title":"what is greenCSS? - an animated dynamic css library","date":"feb 24. 2022","excerpt":"greenCSS - an elegant way to write css design. always free, for anyone with any framework.","cover_image":"/images/blog/cover/default-image-blog.webp","category":"information","author":"severin glaser","keywords":["greenCSS","tutorial","reference","guide","installation"],"classNames":"","plainText":" this article introduces greenCSS greenCSS is a class-based css library the primary focus is on responsive design as the credo is all screens first which stands in contrast to the common mobile first especially in the coming years the demand for multiple design solutions and the coverage for a wide range of devices will considerably increase while the most popular css libraries mainly specialize for javascript frameworks the intention of greenCSS is to be accessible for everybody this means that greenCSS will always be free and the source code is publicly available mit license since the library is built with scss greenCSS can be used on all frameworks like django flask react vue next nuxt laravel and even on vanilla html - just to name a few examples 1 greenCSS is responsive - write html design for smartphone tablet screenreader laptop desktop or 4k screens 2 greenCSS is dynamic - no additional library for animations is necessary all animations are already implemented examples can be viewed here https www omen design docs animation example 3 greenCSS is mit licensed the source code can be viewed here https github com se-gl greenCSS what exactly is greenCSS? for the completion of my bachelor thesis at code university in berlin in software development i decided to create a open source css library the principle as well as the usability should be as simple as possible in addition to the core library custom html elements are planned to be developed e g to provide animations on scroll or to create further reusable components as of february 2022 in addition a separate implementation of a purge function to exclude unnecessary css classes is planned the advantage is obvious the lighter your production website is the better the user experience and in turn the better your seo scores get started now do not be afraid start writing beautiful animated design in a new dimension shell npm i do you have any suggestions do you want to support me or do you want to report a bug do not hesitate to contact me mailto info@greenCSS dev "}}]
    