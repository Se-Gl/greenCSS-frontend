export const posts = [{"slug":"basic-usage","frontmatter":{"isBlog":false,"title":"base styles - foundations","date":"apr 06. 2022","excerpt":"omencss foundations - an opinionated set of base styles, structure and guidelines for omencss projects.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"base-styles","author":"severin glaser","keywords":"base style, guideline, guide, structure","classNames":"","plainText":" omencss is a pure css library built with scss compiled and minified for all javascript python php etc frameworks the entire code base or partial code classes can be easily imported into your project all default browser variables are disabled this allows you to decide for your own design structure and arrangement all omencss classes have the same structure a simple explanation of this principle can be given with the help of the `text-blue` class 1 if the text colour for an element is to be changed the class is inserted this value is the default value for all responsive display sizes  1 if the text colour for an element is to be changed on small screens only 0px 480px the class is inserted with a pre-class called sm: in the following example on small screens up to 480px width the text is displayed in purple on other screens the text is displayed in blue as the default class is set to text-blue  1 if the text colour for an element is to be changed on medium screens only 480px 768px the class is inserted with a pre-class called md: in the following example on medium screens 480px 768px width the text is displayed in purple is the screen smaller or bigger the text is displayed in blue as the default class is set to text-blue  1 if the text colour for an element is to be changed on large screens only 768px 1080px the class is inserted with a pre-class called lg: in the following example on medium screens 768px 1080px width the text is displayed in purple is the screen smaller or bigger the text is displayed in blue as the default class is set to text-blue  1 note that this method can also be used for hover focus or active classes the same principle can be used to add a pre-class the default values in the following example shows a blue text with a blue-1 text colour on hover on small screens the text becomes red and has a hover class of red-1  values & unit sizes some classes require special mathemathical values all amounts are specified within a class this allows intuitive and easy to understand writing of css classes the value and the unit are always written after the class    the properties can also have netagive values those are supplemented by the -neg class  default browser values are removed 1 omencss removes all of the default values like margins paddings text-decoration headings blockquotes paragraphs input states lists border etc 2 visitors who do not want to experience animations or transitions will not register motion 3 the standard font size is automatically converted to the power of 10 reduced by 62 5% in other words `1rem = 10pixel` this decision simplifies the calculation for the developer  executive summary 1 all default browser values are reset allowing you to incorporate your design and avoid annoying default settings 2 the text and the distances are calculated to the power of 10 10px = 1rem 3 all omencss classes have the same structure 4 the default class does not have any pre-classes p e `text-blue` 5 values and unit sizes are written as a post-class at the end of every class p e opacity-100`per` 6 omencss lets you conditionally apply utility classes in different states using variant modifiers such as active hover or focus statements the utility classes are entered before the default class check the adequate documentation site for the respective class p e `hover:`text-blue mnemonic aid: on hover set the colour to blue 7 you can also use variant modifiers to target media queries and make your website responsive within seconds the variant modifier classes are entered after the utility class and before the default class p e `hover:sm:`text-blue mnemonic aid: hover on small screens the text with a blue colour "}},{"slug":"flexbox-align-content","frontmatter":{"isBlog":false,"title":"align content","date":"apr 06. 2022","excerpt":"utility classes to control the item alignment along the vertical axis.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flex & grid","author":"severin glaser","keywords":"align content, flexbox, align-content, center items","classNames":"","plainText":" omencss css class example content-center content-center align-content: center; content-start content-start align-content: flex-start; content-end content-end align-content: flex-end; content-between content-between align-content: space-between; content-around content-around align-content: space-around; content-evenly content-evenly align-content: space-evenly; how to work with justify use the `content keyword ` utilities to set where rows are positioned content-start in the example below we use `content-start` to position the elements at the beginning of a flex environment ! omencss align-content-start images docs flex align-content-start webp?style=centerme  content center in the example below we use `content-center` to position the elements in the middle of the vertical axis ! omencss content-center images docs flex align-content-center webp?style=centerme  content end in the example below we use `content-end` to position the elements at the end of the vertical axis ! omencss content-end images docs flex align-content-end webp?style=centerme  content between in the example below we use `content-between` to position the elements along the vertical axis with an even space between each element ! omencss content-between images docs flex align-content-between webp?style=centerme  content around in the example below we use `content-around` to position the elements along the horizontal axis with an even space between each element and side ! omencss content-around images docs flex align-content-around webp?style=centerme  content evenly in the example below we use `content-evenly` to position the elements along the vertical axis with an equal space between each element and the corners ! omencss content-evenly images docs flex align-content-evenly webp?style=centerme  active focus and hover states omencss css class example active:content keyword active :content-start:active align-content: flex-start; focus:content keyword focus :content-start:focus align-content: flex-start; hover:content keyword hover :content-start:hover align-content: flex-start; omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:content-start` to only apply the content-start utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:content-center md: 480px 768px md:content-center lg: 768px 1080px lg:content-center omencss media queries can also be combined with active focus and hover states for example use `sm:content-center` to apply the content-center utility at only small screen sizes at or below 480px or `active:md:content-center` to apply the content-center utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :content keyword ` p e `active:md:content-center` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:content keyword focus:content keyword hover:content keyword active align content center focus align content center hover align content center active:sm:content keyword focus:sm:content keyword hover:sm:content keyword active small screens align content center focus small screens align content center hover small screens align content center active:md:content keyword focus:md:content keyword hover:md:content keyword active medium screens align content center focus medium screens align content center hover medium screens align content center active:lg:content keyword focus:lg:content keyword hover:lg:content keyword active large screens align content center focus large screens align content center hover large screens align content center sources align-content https: developer mozilla org en-us docs web css align-content "}},{"slug":"flexbox-align-items","frontmatter":{"isBlog":false,"title":"align items","date":"apr 06. 2022","excerpt":"utility classes to control the rows of grid and flex environements.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flex & grid","author":"severin glaser","keywords":"align items, flexbox, align-items, center items, position items","classNames":"","plainText":" omencss css class example items-center items-center align-items: center; items-start items-start align-items: flex-start; items-end items-end align-items: flex-end; items-baseline items-baseline align-items: baseline; items-stretch items-stretch align-items: stretch; how to work with align items use the `items keyword ` utilities to set the position of flex and grid elements on the vertical axis items start in the example below we use `items-start` to position the elements at the beginning of the parents vertical axis ! omencss align-items-start images docs flex align-items-start webp?style=centerme  items center in the example below we use `items-center` to position the elements along the middle of the parents vertical axis ! omencss items-center images docs flex align-items-center webp?style=centerme  items end in the example below we use `items-end` to position the elements at the end of the parents vertical axis ! omencss align-items-end images docs flex align-items-end webp?style=centerme  items baseline in the example below we use `items-baseline` to position the elements along the baseline of the vertical axis ! omencss align-items-baseline images docs flex align-items-baseline webp?style=centerme  items stretch in the example below we use `items-stretch` to stretch the elements in order to cover the vertical axis ! omencss align-items-stretch images docs flex align-items-stretch webp?style=centerme  active focus and hover states omencss css class example active:items keyword active :items-start:active align-items: flex-start; focus:items keyword focus :items-start:focus align-items: flex-start; hover:items keyword hover :items-start:hover align-items: flex-start; omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:items-start` to only apply the items-start utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:items-center md: 480px 768px md:items-center lg: 768px 1080px lg:items-center omencss media queries can also be combined with active focus and hover states for example use `sm:items-center` to apply the items-center utility at only small screen sizes at or below 480px or `active:md:items-center` to apply the items-center utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :items keyword ` p e `active:md:items-center` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:items keyword focus:items keyword hover:items keyword active align items center focus align items center hover align items center active:sm:items keyword focus:sm:items keyword hover:sm:items keyword active small screens align items center focus small screens align items center hover small screens align items center active:md:items keyword focus:md:items keyword hover:md:items keyword active medium screens align items center focus medium screens align items center hover medium screens align items center active:lg:items keyword focus:lg:items keyword hover:lg:items keyword active large screens align items center focus large screens align items center hover large screens align items center sources align-items https: developer mozilla org en-us docs web css align-items "}},{"slug":"flexbox-align-self","frontmatter":{"isBlog":false,"title":"align self","date":"apr 06. 2022","excerpt":"utility classes to control the individual position for an element within grid and flex environements.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flex & grid","author":"severin glaser","keywords":"align self, flexbox, align-items, center items, position items","classNames":"","plainText":" omencss css class example self-auto self-auto align-self: auto; self-center self-center align-self: center; self-start self-start align-self: flex-start; self-end self-end align-self: flex-end; self-baseline self-baseline align-self: baseline; self-stretch self-stretch align-self: stretch; how to work with align self use the `self keyword ` utilities to set the individual position of flex and grid elements on its unique vertical axis self auto in the example below we use `self-auto` to position the elements at the beginning of the vertical axis in relation to its parents ! omencss align-self-auto images docs flex align-items-stretch webp?style=centerme  self start in the example below we use `self-start` to position the elements at the beginning of the vertical axis in relation to its parents ! omencss align-self-start images docs flex align-self-start webp?style=centerme  self center in the example below we use `self-center` to position the elements along the middle of the vertical axis in relation to its parents ! omencss self-center images docs flex align-self-center webp?style=centerme  self end in the example below we use `self-end` to position the elements at the end of the vertical axis in relation to its parents ! omencss align-self-end images docs flex align-self-end webp?style=centerme  self baseline in the example below we use `self-baseline` to position the elements along the baseline of the vertical axis in relation to its parents ! omencss align-self-baseline images docs flex align-self-baseline webp?style=centerme  self stretch in the example below we use `self-stretch` to stretch the elements in order to cover the vertical axis in relation to its parents ! omencss align-self-stretch images docs flex align-items-stretch webp?style=centerme  active focus and hover states omencss css class example active:self keyword active :self-start:active align-self: flex-start; focus:self keyword focus :self-start:focus align-self: flex-start; hover:self keyword hover :self-start:hover align-self: flex-start; omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:self-start` to only apply the self-start utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:self-center md: 480px 768px md:self-center lg: 768px 1080px lg:self-center omencss media queries can also be combined with active focus and hover states for example use `sm:self-center` to apply the self-center utility at only small screen sizes at or below 480px or `active:md:self-center` to apply the self-center utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :self keyword ` p e `active:md:self-center` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:self keyword focus:self keyword hover:self keyword active align self center focus align self center hover align self center active:sm:self keyword focus:sm:self keyword hover:sm:self keyword active small screens align self center focus small screens align self center hover small screens align self center active:md:self keyword focus:md:self keyword hover:md:self keyword active medium screens align self center focus medium screens align self center hover medium screens align self center active:lg:self keyword focus:lg:self keyword hover:lg:self keyword active large screens align self center focus large screens align self center hover large screens align self center sources align-self https: developer mozilla org en-us docs web css align-self "}},{"slug":"flexbox-display","frontmatter":{"isBlog":false,"title":"display","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s display properties.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flex & grid","author":"severin glaser","keywords":"flex, flexbox, display","classNames":"","plainText":" omencss css class example display-none display-none display: none; block block display: block; inline-block inline-block display: inline-block; inline inline display: inline; flex flex display: flex; inline-flex inline-flex display: inline-flex; table table display: table; inline-table inline-table display: inline-table; table-caption table-caption display: table-caption table-cell table-cell display: table-cell table-column table-column display: table-column table-column-group table-column-group display: table-column-group table-footer-group table-footer-group display: table-footer-group table-header-group table-header-group display: table-header-group table-row-group table-row-group display: table-row-group table-row table-row display: table-row flow-root flow-root display: flow-root grid grid display: grid inline-grid inline-grid display: inline-grid contents contents display: contents list-item list-item display: list-item how to work with the keywords use the utility classes above to access your desired class display none use `display-none` to hide an element in the dom  block use `block` make an element in the dom visible  flex use `flex` to define a flex container  grid use `grid` to define a grid container  active focus and hover states omencss css class example active:display-none active :display-none:active display-none: row; focus:display-none focus :display-none:focus display-none: row; hover:display-none hover :display-none:hover display-none: row; omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:display-none` to only apply the display-none utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:display-none md: 480px 768px md:display-none lg: 768px 1080px lg:display-none omencss media queries can also be combined with active focus and hover states for example use `sm:display-none` to apply the display-none utility at only small screen sizes at or below 480px or `active:md:display-none` to apply the display-none utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query : display-none-class ` p e `active:md:display-none` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:display-none focus:display-none hover:display-none active display none focus display none hover display none active:sm:display-none focus:sm:display-none hover:sm:display-none active small screens display none focus small screens display none hover small screens display none active:md:display-none focus:md:display-none hover:md:display-none active medium screens display none focus medium screens display none hover medium screens display none active:lg:display-none focus:lg:display-none hover:lg:display-none active large screens display none focus large screens display none hover large screens display none sources display https: developer mozilla org en-us docs web css display "}},{"slug":"flexbox-flex-basis","frontmatter":{"isBlog":false,"title":"flex basis","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s flex basis.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flex & grid","author":"severin glaser","keywords":"flex basis, flex, grid","classNames":"","plainText":" omencss css class example minimum value maximum value step basis size per basis-1per flex-basis: 1%; basis-0per basis-100per 1% basis-auto basis-auto flex-basis: auto; basis-none basis-none flex-basis: 0%; basis-half basis-half flex-basis: 50%; basis-full basis-full flex-basis: 100%; how to work with flex basis 1 use the `basis size per` utilities to set the initial size of flex items 2 use the `basis keyword ` utility keywords ! omencss flex-basis images docs flex flex-basis webp?style=centerme  active focus and hover states omencss css class example range active:basis size per active :basis size per:active flex-basis: 1%; active:basis-0per to active:basis-100per focus:basis size per focus :basis size per:focus flex-basis: 1%; focus:basis-0per to focus:basis-100per hover:basis size per hover :basis size per:hover flex-basis: 1%; hover:basis-0per to hover:basis-100per omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:basis-10per` to only apply the basis-10per utility on hover ! omencss flex-basis hover images docs flex flex-basis-hover webp?style=centerme  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:basis-10per md: 480px 768px md:basis-10per lg: 768px 1080px lg:basis-10per omencss media queries can also be combined with active focus and hover states for example use `sm:basis-10per` to apply the basis-10per utility at only small screen sizes at or below 480px or `active:md:basis-10per` to apply the basis-10per utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :basis size per` p e `active:md:basis-50per` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:basis size per focus:basis size per hover:basis size per active basis focus basis hover basis active:sm:basis size per focus:sm:basis size per hover:sm:basis size per active small screens basis focus small screens basis hover small screens basis active:md:basis size per focus:md:basis size per hover:md:basis size per active medium screens basis focus medium screens basis hover medium screens basis active:lg:basis size per focus:lg:basis size per hover:lg:basis size per active large screens basis focus large screens basis hover large screens basis sources flex https: developer mozilla org en-us docs web css flex "}},{"slug":"flexbox-flex-direction","frontmatter":{"isBlog":false,"title":"flex direction","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s flex direction.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flex & grid","author":"severin glaser","keywords":"flex direction, flex, flex-row, flex-row-reverse, flex-col, flex-col-reverse","classNames":"","plainText":" omencss css class example flex-row flex-row flex-direction: row; flex-row-reverse flex-row-reverse flex-direction: row-reverse; flex-col flex-col flex-direction: column; flex-col-reverse flex-row flex-direction: column-reverse; how to work with flex direction use the utility classes above to access your desired class row use `flex-row` to position flex elements horizontally ! omencss flex-direction row images docs flex flex-direction webp?style=centerme  row reversed use `flex-row-reverse` to position flex elements horizontally in the opposite direction ! omencss flex-direction row images docs flex flex-direction-row-reversed webp?style=centerme  column use `flex-col` to position flex elements vertically ! omencss flex-direction row images docs flex flex-direction-col webp?style=centerme  column reversed use `flex-col-reverse` to position flex elements vertically in the opposite direction ! omencss flex-direction row images docs flex flex-direction-col-reversed webp?style=centerme  active focus and hover states omencss css class example active:flex-row active :flex-row:active flex-direction: row; focus:flex-row focus :flex-row:focus flex-direction: row; hover:flex-row hover :flex-row:hover flex-direction: row; omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:flex-row` to only apply the flex-row utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:flex-row md: 480px 768px md:flex-row lg: 768px 1080px lg:flex-row omencss media queries can also be combined with active focus and hover states for example use `sm:flex-row` to apply the flex-row utility at only small screen sizes at or below 480px or `active:md:flex-row` to apply the flex-row utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :flex-row` p e `active:md:flex-row` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:flex-row focus:flex-row hover:flex-row active flex direction focus flex direction hover flex direction active:sm:flex-row focus:sm:flex-row hover:sm:flex-row active small screens flex direction focus small screens flex direction hover small screens flex direction active:md:flex-row focus:md:flex-row hover:md:flex-row active medium screens flex direction focus medium screens flex direction hover medium screens flex direction active:lg:flex-row focus:lg:flex-row hover:lg:flex-row active large screens flex direction focus large screens flex direction hover large screens flex direction sources flex-direction https: developer mozilla org en-us docs web css flex-direction "}},{"slug":"flexbox-flex-grow","frontmatter":{"isBlog":false,"title":"flex grow","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s flex grow.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flex & grid","author":"severin glaser","keywords":"flex, flexbox, flex grow","classNames":"","plainText":" omencss css class example grow grow flex-grow: 1; grow-none grow-none flex-grow: 0; how to work with flex grow use the utility classes above to access your desired class flex grow use `grow` to allow a flex item to grow and fill any available space within the selected div the second element in the image below uses the grow class ! omencss flex grow images docs flex grow webp?style=centerme  no flex grow use `grow-none` to prevent a flex item from growing the second element in the image below uses the grow-none class ! omencss grow none images docs flex grow-none webp?style=centerme  active focus and hover states omencss css class example active:grow active :grow:active flex-grow: 1; focus:grow focus :grow:focus flex-grow: 1; hover:grow hover :grow:hover flex-grow: 1; omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:grow` to only apply the `grow` utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:grow md: 480px 768px md:grow lg: 768px 1080px lg:grow omencss media queries can also be combined with active focus and hover states for example use `sm:grow` to apply the grow utility at only small screen sizes at or below 480px or `active:md:grow` to apply the grow utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query : flex-grow-class ` p e `active:md:grow` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:grow focus:grow hover:grow active grow focus grow hover grow active:sm:grow focus:sm:grow hover:sm:grow active small screens grow focus small screens grow hover small screens grow active:md:grow focus:md:grow hover:md:grow active medium screens grow focus medium screens grow hover medium screens grow active:lg:grow focus:lg:grow hover:lg:grow active large screens grow focus large screens grow hover large screens grow sources flex-grow https: developer mozilla org en-us docs web css flex-grow "}},{"slug":"flexbox-flex-shrink","frontmatter":{"isBlog":false,"title":"flex shrink","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s flex shrink.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flex & grid","author":"severin glaser","keywords":"flex, flexbox, flex shrink","classNames":"","plainText":" omencss css class example shrink shrink flex-shrink: 1; shrink-none shrink-none flex-shrink: 0; how to work with flex shrink use the utility classes above to access your desired class flex shrink use `shrink` to allow a flex item to shrink and fill any available space within the selected div the second element in the image below uses the shrink class ! omencss flex shrink images docs flex shrink webp?style=centerme  no flex shrink use `shrink-none` to prevent a flex item from shrinking the second element in the image below uses the shrink-none class ! omencss shrink none images docs flex shrink-none webp?style=centerme  active focus and hover states omencss css class example active:shrink active :shrink:active flex-shrink: 1; focus:shrink focus :shrink:focus flex-shrink: 1; hover:shrink hover :shrink:hover flex-shrink: 1; omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:shrink` to only apply the `shrink` utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:shrink md: 480px 768px md:shrink lg: 768px 1080px lg:shrink omencss media queries can also be combined with active focus and hover states for example use `sm:shrink` to apply the shrink utility at only small screen sizes at or below 480px or `active:md:shrink` to apply the shrink utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query : flex-shrink-class ` p e `active:md:shrink` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:shrink focus:shrink hover:shrink active shrink focus shrink hover shrink active:sm:shrink focus:sm:shrink hover:sm:shrink active small screens shrink focus small screens shrink hover small screens shrink active:md:shrink focus:md:shrink hover:md:shrink active medium screens shrink focus medium screens shrink hover medium screens shrink active:lg:shrink focus:lg:shrink hover:lg:shrink active large screens shrink focus large screens shrink hover large screens shrink sources flex-shrink https: developer mozilla org en-us docs web css flex-shrink "}},{"slug":"flexbox-flex-wrap","frontmatter":{"isBlog":false,"title":"flex wrap","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s flex wrap.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flex & grid","author":"severin glaser","keywords":"flex wrap, flex, flex-wrap-reverse, flex-nowrap","classNames":"","plainText":" omencss css class example flex-wrap flex-wrap flex-wrap: row; flex-wrap-reverse flex-wrap-reverse flex-wrap: wrap-reverse; flex-nowrap flex-nowrap flex-wrap: nowrap; how to work with flex wrap use the utility classes above to access your desired class nowrap use `flex-nowrap` to prevent flex items from wrapping non-flexible elements will overflow a container if it falls out of the viewport ! omencss flex-nowrap images docs flex flex-nowrap webp?style=centerme  flex wrap use `flex-wrap` to allow flex items to wrap normally ! omencss flex-wrap images docs flex flex-wrap-normal webp?style=centerme  flex wrap reverse use `flex-wrap-reverse` to wrap elements in reverse ! omencss flex-wrap images docs flex flex-wrap-reverse webp?style=centerme  active focus and hover states omencss css class example active:flex-wrap active :flex-wrap:active flex-wrap: row; focus:flex-wrap focus :flex-wrap:focus flex-wrap: row; hover:flex-wrap hover :flex-wrap:hover flex-wrap: row; omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:flex-wrap` to only apply the flex-wrap utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:flex-wrap md: 480px 768px md:flex-wrap lg: 768px 1080px lg:flex-wrap omencss media queries can also be combined with active focus and hover states for example use `sm:flex-wrap` to apply the flex-wrap utility at only small screen sizes at or below 480px or `active:md:flex-wrap` to apply the flex-wrap utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query : flex-wrap-class ` p e `active:md:flex-wrap` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:flex-wrap focus:flex-wrap hover:flex-wrap active flex wrap focus flex wrap hover flex wrap active:sm:flex-wrap focus:sm:flex-wrap hover:sm:flex-wrap active small screens flex wrap focus small screens flex wrap hover small screens flex wrap active:md:flex-wrap focus:md:flex-wrap hover:md:flex-wrap active medium screens flex wrap focus medium screens flex wrap hover medium screens flex wrap active:lg:flex-wrap focus:lg:flex-wrap hover:lg:flex-wrap active large screens flex wrap focus large screens flex wrap hover large screens flex wrap sources flex-wrap https: developer mozilla org en-us docs web css flex-wrap "}},{"slug":"flexbox-flex","frontmatter":{"isBlog":false,"title":"flex","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s flex properties.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flex & grid","author":"severin glaser","keywords":"flex, flexbox","classNames":"","plainText":" omencss css class example flex-none flex-none flex: none; flex-1 flex-1 flex: 1; flex-2 flex-2 flex: 2; flex-initial flex-initial flex: initial; flex-auto flex-auto flex: auto; how to work with flex values use the utility classes above to access your desired class flex none use `flex-none` to prevent flex elements from growing or shrinking the first div element has no flex value and only fits its size ! omencss flex-1 images docs flex flex-1 webp?style=centerme  flex 1 use `flex-1` to allow a flex item to grow and shrink as needed this will ignore the initial width the second and third div element have a flex-1 value ! omencss flex-1 images docs flex flex-1 webp?style=centerme  flex 2 use `flex-1` to allow a flex item to grow and shrink as needed this will ignore the initial width the third div element has a flex-2 value and is twice as wide as the second div ! omencss flex-1 images docs flex flex-2 webp?style=centerme  flex initial use `flex-initial` to allow a flex item to shrink but do not allow it to grow in regard to its initial size the third div element has a flex-initial class with a width of 250px the second div has a width of 500px and the first element has no width set at all ! omencss flex-initial images docs flex flex-initial webp?style=centerme  flex auto use `flex-auto` to allow a flex item to grow and shrink in regard to its initial size the third div element has a flex-auto class with a width of 250px the second div has a width of 500px and the first element has no width set at all ! omencss flex-auto images docs flex flex-auto webp?style=centerme  active focus and hover states omencss css class example active:flex-none active :flex-none:active flex-none: row; focus:flex-none focus :flex-none:focus flex-none: row; hover:flex-none hover :flex-none:hover flex-none: row; omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:flex-none` to only apply the flex-none utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:flex-none md: 480px 768px md:flex-none lg: 768px 1080px lg:flex-none omencss media queries can also be combined with active focus and hover states for example use `sm:flex-none` to apply the flex-none utility at only small screen sizes at or below 480px or `active:md:flex-none` to apply the flex-none utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query : flex-none-class ` p e `active:md:flex-none` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:flex-none focus:flex-none hover:flex-none active flex none focus flex none hover flex none active:sm:flex-none focus:sm:flex-none hover:sm:flex-none active small screens flex none focus small screens flex none hover small screens flex none active:md:flex-none focus:md:flex-none hover:md:flex-none active medium screens flex none focus medium screens flex none hover medium screens flex none active:lg:flex-none focus:lg:flex-none hover:lg:flex-none active large screens flex none focus large screens flex none hover large screens flex none sources flexbox https: developer mozilla org en-us docs learn css css layout flexbox "}},{"slug":"flexbox-justify-content","frontmatter":{"isBlog":false,"title":"justify content","date":"apr 06. 2022","excerpt":"utility classes to control the alignment of grid and flex elements along the horizontal axis.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flex & grid","author":"severin glaser","keywords":"justify content, flexbox, center elements, center items","classNames":"","plainText":" omencss css class example justify-start justify-start justify-content: flex-start; justify-end justify-end justify-content: flex-end; justify-center justify-center justify-content: flex-center; justify-between justify-between justify-content: space-between; justify-around justify-around justify-content: space-around; justify-evenly justify-evenly justify-content: space-evenly; how to work with justify use the `justify keyword ` utilities to set where elements are positioned justify start in the example below we use `justify-start` to position the elements at the beginning of the main horizontal axis ! omencss justify-start images docs flex justify-content-start webp?style=centerme  justify center in the example below we use `justify-center` to position the elements in the middle of the horizontal axis ! omencss justify-center images docs flex justify-content-center webp?style=centerme  justify end in the example below we use `justify-end` to position the elements at the end of the horizontal axis ! omencss justify-end images docs flex justify-content-end webp?style=centerme  justify between in the example below we use `justify-between` to position the elements along the horizontal axis with an even space between each element ! omencss justify-between images docs flex justify-between webp?style=centerme  justify around in the example below we use `justify-around` to position the elements along the horizontal axis with an even space between each element and side ! omencss justify-around images docs flex justify-around webp?style=centerme  justify evenly in the example below we use `justify-evenly` to position the elements along the horizontal axis with an equal space between each element and the corners ! omencss justify-evenly images docs flex justify-evenly webp?style=centerme  active focus and hover states omencss css class example active:justify keyword active :justify-start:active justify-content: flex-start; focus:justify keyword focus :justify-start:focus justify-content: flex-start; hover:justify keyword hover :justify-start:hover justify-content: flex-start; omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:justify-start` to only apply the justify-start utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:justify-center md: 480px 768px md:justify-center lg: 768px 1080px lg:justify-center omencss media queries can also be combined with active focus and hover states for example use `sm:justify-center` to apply the justify-center utility at only small screen sizes at or below 480px or `active:md:justify-center` to apply the justify-center utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :justify keyword ` p e `active:md:justify-center` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:justify keyword focus:justify keyword hover:justify keyword active justify center focus justify center hover justify center active:sm:justify keyword focus:sm:justify keyword hover:sm:justify keyword active small screens justify center focus small screens justify center hover small screens justify center active:md:justify keyword focus:md:justify keyword hover:md:justify keyword active medium screens justify center focus medium screens justify center hover medium screens justify center active:lg:justify keyword focus:lg:justify keyword hover:lg:justify keyword active large screens justify center focus large screens justify center hover large screens justify center sources justify-content https: developer mozilla org en-us docs web css justify-content "}},{"slug":"flexbox-justify-items","frontmatter":{"isBlog":false,"title":"justify items","date":"apr 06. 2022","excerpt":"utility classes to control the alignment of grid elements along the horizontal axis.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flex & grid","author":"severin glaser","keywords":"justify items, flexbox, center items, center elements","classNames":"","plainText":" omencss css class example justify-items-center justify-items-center justify-items: start; justify-items-end justify-items-end justify-items: end; justify-items-center justify-items-center justify-items: center; justify-items-stretch justify-items-stretch justify-items: stretch; how to work with justify items use the `justify-items keyword ` utilities to set where elements are positioned in contrast to justify self docs flexbox-justify-self all elements are targeted in this case justify items start in the example below we use `justify-items-center` to position the elements at the beginning of the main horizontal axis and within their parents container ! omencss justify-items-center images docs flex justify-items-center webp?style=centerme  justify items end in the example below we use `justify-items-end` to position the elements at the end of the main horizontal axis and within their parents container ! omencss justify-items-end images docs flex justify-items-end webp?style=centerme  justify items center in the example below we use `justify-items-center` to position the elements at the center of the main horizontal axis and within their parents container ! omencss justify-items-center images docs flex justify-items-center webp?style=centerme  justify items stretch in the example below we use `justify-items-stretch` to stretch the elements within their parents container ! omencss justify-items-stretch images docs flex justify-items-stretch webp?style=centerme  active focus and hover states omencss css class example active:justify-items keyword active :justify-items-center:active justify-items: center; focus:justify-items keyword focus :justify-items-center:focus justify-items: center; hover:justify-items keyword hover :justify-items-center:hover justify-items: center; omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:justify-items-center` to only apply the justify-items-center utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:justify-items-center md: 480px 768px md:justify-items-center lg: 768px 1080px lg:justify-items-center omencss media queries can also be combined with active focus and hover states for example use `sm:justify-items-center` to apply the justify-items-center utility at only small screen sizes at or below 480px or `active:md:justify-items-center` to apply the justify-items-center utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :justify-items keyword ` p e `active:md:justify-items-center` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:justify-items keyword focus:justify-items keyword hover:justify-items keyword active justify items center focus justify items center hover justify items center active:sm:justify-items keyword focus:sm:justify-items keyword hover:sm:justify-items keyword active small screens justify items center focus small screens justify items center hover small screens justify items center active:md:justify-items keyword focus:md:justify-items keyword hover:md:justify-items keyword active medium screens justify items center focus medium screens justify items center hover medium screens justify items center active:lg:justify-items keyword focus:lg:justify-items keyword hover:lg:justify-items keyword active large screens justify items center focus large screens justify items center hover large screens justify items center sources justify-items https: developer mozilla org en-us docs web css justify-items "}},{"slug":"flexbox-justify-self","frontmatter":{"isBlog":false,"title":"justify self","date":"apr 06. 2022","excerpt":"utility classes to control the individual alignment of a single grid elements along the horizontal axis.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flex & grid","author":"severin glaser","keywords":"justify self, grid, center self, center individual elements","classNames":"","plainText":" omencss css class example justify-self-auto justify-self-auto justify-self: auto; justify-self-start justify-self-start justify-self: start; justify-self-end justify-self-end justify-self: end; justify-self-center justify-self-center justify-self: center; justify-self-stretch justify-self-stretch justify-self: stretch; how to work with justify self use the `justify-self keyword ` utilities to set where elements are positioned in contrast to justify items docs flexbox-justify-items a unique element is targeted in this case justify self auto in the example below we use `justify-self-auto` to position the elements based on the parents utility class in this case `justify-self-stretch` will be applied ! omencss justify-self-auto images docs flex justify-items-stretch webp?style=centerme  justify self start in the example below we use `justify-self-start` to position the elements at the beginning of its main horizontal axis ! omencss justify-self-start images docs flex justify-self-start webp?style=centerme  justify self center in the example below we use `justify-self-center` to position the elements at the center of its main horizontal axis ! omencss justify-self-center images docs flex justify-self-center webp?style=centerme  justify-self-end in the example below we use `justify-self-center` to position the elements at the end of its main horizontal axis ! omencss justify-self-end images docs flex justify-self-end webp?style=centerme  justify-self-stretch in the example below we use `justify-self-stretch` to only stretch a single element ! omencss justify-self-stretch images docs flex justify-self-stretch webp?style=centerme  active focus and hover states omencss css class example active:justify-self keyword active :justify-self-center:active justify-self: center; focus:justify-self keyword focus :justify-self-center:focus justify-self: center; hover:justify-self keyword hover :justify-self-center:hover justify-self: center; omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:justify-self-center` to only apply the justify-self-center utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:justify-self-center md: 480px 768px md:justify-self-center lg: 768px 1080px lg:justify-self-center omencss media queries can also be combined with active focus and hover states for example use `sm:justify-self-center` to apply the justify-self-center utility at only small screen sizes at or below 480px or `active:md:justify-self-center` to apply the justify-self-center utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :justify-self keyword ` p e `active:md:justify-self-center` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:justify-self keyword focus:justify-self keyword hover:justify-self keyword active justify self center focus justify self center hover justify self center active:sm:justify-self keyword focus:sm:justify-self keyword hover:sm:justify-self keyword active small screens justify self center focus small screens justify self center hover small screens justify self center active:md:justify-self keyword focus:md:justify-self keyword hover:md:justify-self keyword active medium screens justify self center focus medium screens justify self center hover medium screens justify self center active:lg:justify-self keyword focus:lg:justify-self keyword hover:lg:justify-self keyword active large screens justify self center focus large screens justify self center hover large screens justify self center sources justify-self https: developer mozilla org en-us docs web css justify-self "}},{"slug":"flexbox-order","frontmatter":{"isBlog":false,"title":"order","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s order.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flex & grid","author":"severin glaser","keywords":"flex, flexbox, rrder","classNames":"","plainText":" omencss css class example order-first order-first order: -9999; order-last order-last order: 9999; order-none order-none order: 0; order-1 order-1 order: 1; order-2 order-2 order: 2; order-3 order-3 order: 3; order-4 order-4 order: 4; order-5 order-5 order: 5; order-6 order-6 order: 6; order-7 order-7 order: 7; order-8 order-8 order: 8; order-9 order-9 order: 9; order-10 order-10 order: 10; order-11 order-11 order: 11; order-12 order-12 order: 12; how to work with order use the utility classes above to access your desired class order works with flex and grid use `order order-values ` to render flex and grid elements in a different way in the dom ! omencss order images docs flex order webp?style=centerme  active focus and hover states omencss css class example active:order-first active :order-first:active order: -9999; focus:order-first focus :order-first:focus order: -9999; hover:order-first hover :order-first:hover order: -9999; omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:order-first` to only apply the `order-first` utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:order-first md: 480px 768px md:order-first lg: 768px 1080px lg:order-first omencss media queries can also be combined with active focus and hover states for example use `sm:order-first` to apply the order-first utility at only small screen sizes at or below 480px or `active:md:order-first` to apply the order-first utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query : order-values ` p e `active:md:order-first` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:order-first focus:order-first hover:order-first active order focus order hover order active:sm:order-first focus:sm:order-first hover:sm:order-first active small screens order focus small screens order hover small screens order active:md:order-first focus:md:order-first hover:md:order-first active medium screens order focus medium screens order hover medium screens order active:lg:order-first focus:lg:order-first hover:lg:order-first active large screens order focus large screens order hover large screens order sources ordering-flex-items https: developer mozilla org en-us docs web css css flexible box layout ordering flex items "}},{"slug":"flexbox-place-content","frontmatter":{"isBlog":false,"title":"place content","date":"apr 06. 2022","excerpt":"utility classes to control the item alignment by justifying and aligning it.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flex & grid","author":"severin glaser","keywords":"place content, flexbox, grid, place-content, center items","classNames":"","plainText":" omencss css class example place-content-center place-content-center place-content: center; place-content-start place-content-start place-content: start; place-content-end place-content-end place-content: end; place-content-between place-content-between place-content: space-between; place-content-around place-content-around place-content: space-around; place-content-evenly place-content-evenly place-content: space-evenly; place-content-stretch place-content-stretch place-content: stretch; how to work with place content use the `place-content keyword ` utilities to set where rows are positioned place content start in the example below we use `place-content-start` to position the elements at the beginning of the horizontal axis ! omencss place-content-start images docs flex place-content-start webp?style=centerme  place content center in the example below we use `place-content-center` to position the elements in the middle of the vertical and horizontal axis ! omencss place-content-center images docs flex place-content-center webp?style=centerme  place content end in the example below we use `place-content-end` to position the elements at the end of the horizontal axis ! omencss place-content-end images docs flex place-content-end webp?style=centerme  place content between in the example below we use `place-content-between` to position the elements at the corners ! omencss place-content-between images docs flex place-content-between webp?style=centerme  place content around in the example below we use `place-content-around` to position the elements with the same distance to each other ! omencss place-content-around images docs flex place-content-around webp?style=centerme  place content evenly in the example below we use `place-content-evenly` to position the elements with an even amount of space on the horizontal axis ! omencss place-content-evenly images docs flex place-content-evenly webp?style=centerme  place content stretch in the example below we use `place-content-stretch` to stretch the items within their grid system and along the horizontal axis ! omencss place-content-stretch images docs flex place-content-stretch webp?style=centerme  active focus and hover states omencss css class example active:place-content keyword active :place-content-center:active place-content: start; focus:place-content keyword focus :place-content-center:focus place-content: start; hover:place-content keyword hover :place-content-center:hover place-content: start; omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:place-content-center` to only apply the place-content-center utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:place-content-center md: 480px 768px md:place-content-center lg: 768px 1080px lg:place-content-center omencss media queries can also be combined with active focus and hover states for example use `sm:place-content-center` to apply the place-content-center utility at only small screen sizes at or below 480px or `active:md:place-content-center` to apply the place-content-center utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :place-content keyword ` p e `active:md:place-content-center` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:place-content keyword focus:place-content keyword hover:place-content keyword active place content center focus place content center hover place content center active:sm:place-content keyword focus:sm:place-content keyword hover:sm:place-content keyword active small screens place content center focus small screens place content center hover small screens place content center active:md:place-content keyword focus:md:place-content keyword hover:md:place-content keyword active medium screens place content center focus medium screens place content center hover medium screens place content center active:lg:place-content keyword focus:lg:place-content keyword hover:lg:place-content keyword active large screens place content center focus large screens place content center hover large screens place content center sources place-content https: developer mozilla org en-us docs web css place-content "}},{"slug":"flexbox-place-items","frontmatter":{"isBlog":false,"title":"place items","date":"apr 06. 2022","excerpt":"utility classes to control the alignment and justification of an element simultaneously.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flex & grid","author":"severin glaser","keywords":"place items, flexbox, align-items, center items, position items","classNames":"","plainText":" omencss css class example place-items-center place-items-center place-items: center; place-items-start place-items-start place-items: start; place-items-end place-items-end place-items: end; place-items-stretch place-items-stretch place-items: stretch; how to work with place items use the `place-items keyword ` utilities to set the position of flex and grid elements on the vertical axis place items start in the example below we use `place-items-start` to position the elements at the beginning of the parents horizontal and vertical axis ! omencss place-items-start images docs flex place-items-start webp?style=centerme  place items center in the example below we use `place-items-center` to position the elements in the middle of the parents horizontal and vertical axis ! omencss place-items-center images docs flex place-items-center webp?style=centerme  place items end in the example below we use `place-items-end` to position the elements at the end of the parents horizontal and vertical axis ! omencss place-items-end images docs flex place-items-end webp?style=centerme  place items stretch in the example below we use `place-items-stretch` to stretch the elements in order to cover the horizontal and vertical axis ! omencss place-items-stretch images docs flex place-items-stretch webp?style=centerme  active focus and hover states omencss css class example active:place-items keyword active :place-items-start:active place-items: start; focus:place-items keyword focus :place-items-start:focus place-items: start; hover:place-items keyword hover :place-items-start:hover place-items: start; omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:place-items-start` to only apply the place-items-start utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:place-items-center md: 480px 768px md:place-items-center lg: 768px 1080px lg:place-items-center omencss media queries can also be combined with active focus and hover states for example use `sm:place-items-center` to apply the place-items-center utility at only small screen sizes at or below 480px or `active:md:place-items-center` to apply the place-items-center utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :place-items keyword ` p e `active:md:place-items-center` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:place-items keyword focus:place-items keyword hover:place-items keyword active place items center focus place items center hover place items center active:sm:place-items keyword focus:sm:place-items keyword hover:sm:place-items keyword active small screens place items center focus small screens place items center hover small screens place items center active:md:place-items keyword focus:md:place-items keyword hover:md:place-items keyword active medium screens place items center focus medium screens place items center hover medium screens place items center active:lg:place-items keyword focus:lg:place-items keyword hover:lg:place-items keyword active large screens place items center focus large screens place items center hover large screens place items center sources place-items https: developer mozilla org en-us docs web css place-items "}},{"slug":"flexbox-place-self","frontmatter":{"isBlog":false,"title":"place self","date":"apr 06. 2022","excerpt":"utility classes to control the alignment of items in relation to its horizontal and vertical axis - in regard to its parent container.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flex & grid","author":"severin glaser","keywords":"place self, flexbox, align-items, center items, position items","classNames":"","plainText":" omencss css class example place-self-auto place-self-auto place-self: auto; place-self-center place-self-center place-self: center; place-self-start place-self-start place-self: start; place-self-end place-self-end place-self: end; place-self-stretch place-self-stretch place-self: stretch; how to work with place self use the `place-self keyword ` utilities to set the individual position of an element place self auto in the example below we use `place-self-auto` to set the width and height automatically according to the parents requirements ! omencss place-self-auto images docs flex place-self-auto-stretch webp?style=centerme  place self start in the example below we use `place-self-start` to position the elements at the beginning of the horizontal and vertical axis ! omencss place-self-start images docs flex place-self-start webp?style=centerme  items-center in the example below we use `place-self-center` to position the elements in the middle of the horizontal and vertical axis ! omencss place-self-center images docs flex place-self-center webp?style=centerme  items-end in the example below we use `place-self-end` to position the elements at the end of the horizontal and vertical axis ! omencss place-self-end images docs flex place-self-end webp?style=centerme  items-stretch in the example below we use `place-self-stretch` to stretch the elements in order to cover the horizontal and vertical axis ! omencss place-self-stretch images docs flex place-self-auto-stretch webp?style=centerme  active focus and hover states omencss css class example active:place-self keyword active :place-self-start:active place-self: start; focus:place-self keyword focus :place-self-start:focus place-self: start; hover:place-self keyword hover :place-self-start:hover place-self: start; omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:place-self-start` to only apply the place-self-start utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:place-self-center md: 480px 768px md:place-self-center lg: 768px 1080px lg:place-self-center omencss media queries can also be combined with active focus and hover states for example use `sm:place-self-center` to apply the place-self-center utility at only small screen sizes at or below 480px or `active:md:place-self-center` to apply the place-self-center utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :place-self keyword ` p e `active:md:place-self-center` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:place-self keyword focus:place-self keyword hover:place-self keyword active place self center focus place self center hover place self center active:sm:place-self keyword focus:sm:place-self keyword hover:sm:place-self keyword active small screens place self center focus small screens place self center hover small screens place self center active:md:place-self keyword focus:md:place-self keyword hover:md:place-self keyword active medium screens place self center focus medium screens place self center hover medium screens place self center active:lg:place-self keyword focus:lg:place-self keyword hover:lg:place-self keyword active large screens place self center focus large screens place self center hover large screens place self center sources place-self https: developer mozilla org en-us docs web css place-self "}},{"slug":"gap","frontmatter":{"isBlog":false,"title":"gap","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s gap.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flex & grid","author":"severin glaser","keywords":"gap, column-gap, row-gap","classNames":"","plainText":" omencss css class example minimum value maximum value step gap size px gap-1px gap: 1px; gap-0px gap-100px 1px gap-x size px gap-x-1px column-gap: 1px; gap-x-0px gap-x-100px 1px gap-y size px gap-y-1px row-gap: 1px; gap-x-0px gap-x-100px 1px gap size rem gap-11rem gap: 1rem; gap-11rem gap-30rem 1rem gap-x size rem gap-x-11rem column-gap: 1rem; gap-x-11rem gap-x-30rem 1rem gap-y size rem gap-y-11rem row-gap: 1rem; gap-x-11rem gap-x-30rem 1rem how to work with gap use the `gap number unit ` utilities to set the initial gutter within a flexbox or grid system 1 use `gap number unit ` for a general gutter in the vertical and horizontal direction 2 use `gap-x number unit ` for a gutter in a horizontal direction 3 use `gap-y number unit ` for a gutter in a vertical direction in the example below we to have a gap of 20 pixels `gap-20px` ! omencss gap images docs flex gap webp?style=centerme  active focus and hover states omencss css class example range active:gap size px active :gap size px:active flex-gap: 1%; active:gap-0px to active:gap-100px focus:gap size px focus :gap size px:focus flex-gap: 1%; focus:gap-0px to focus:gap-100px hover:gap size px hover :gap size px:hover flex-gap: 1%; hover:gap-0px to hover:gap-100px omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:gap-10px` to only apply the gap-10px utility on hover ! omencss flex-gap hover images docs flex flex-gap-hover webp?style=centerme  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:gap-10px md: 480px 768px md:gap-10px lg: 768px 1080px lg:gap-10px omencss media queries can also be combined with active focus and hover states for example use `sm:gap-10px` to apply the gap-10px utility at only small screen sizes at or below 480px or `active:md:gap-10px` to apply the gap-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :gap number unit ` p e `active:md:gap-50px` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:gap size px focus:gap size px hover:gap size px active gap focus gap hover gap active:sm:gap size px focus:sm:gap size px hover:sm:gap size px active small screens gap focus small screens gap hover small screens gap active:md:gap size px focus:md:gap size px hover:md:gap size px active medium screens gap focus medium screens gap hover medium screens gap active:lg:gap size px focus:lg:gap size px hover:lg:gap size px active large screens gap focus large screens gap hover large screens gap sources gap https: developer mozilla org en-us docs web css gap "}},{"slug":"grid-auto-columns","frontmatter":{"isBlog":false,"title":"grid auto columns","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s grid auto columns.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flex & grid","author":"severin glaser","keywords":"grid, grid auto columns, gird col, grid columns, grid layout","classNames":"","plainText":" omencss css class example auto-cols-auto auto-cols-auto grid-auto-columns: auto; auto-cols-min auto-cols-min grid-auto-columns: min-content; auto-cols-max auto-cols-max grid-auto-columns: max-content; auto-cols-fr auto-cols-fr grid-auto-columns: minmax 0 1fr ; define the placement of elements in a grid row use the auto-cols keyword to control the size width & height of an element in grid columns control the size in the example below we use a grid system `grid` with a `grid-flow-col` direction which stretches to the maximum size of the object `auto-cols-max` the elements are therefore stretched to the max direction  active focus and hover states with omencss you can conditionally apply utility classes in different states by using variant modifiers like active focus or hover for example use `hover:auto-cols-auto` to apply the `auto-cols-auto` utility class on hover events omencss css class example active:auto-cols-auto active :auto-cols-auto:active grid-auto-columns: auto; focus:auto-cols-auto focus :auto-cols-auto:focus grid-auto-columns: auto; hover:auto-cols-auto hover :auto-cols-auto:hover grid-auto-columns: auto;  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:auto-cols-auto md: 480px 768px md:auto-cols-auto lg: 768px 1080px lg:auto-cols-auto omencss media queries can also be combined with active focus and hover states for example use `sm:auto-cols-auto` to apply the auto-cols-auto utility at only small screen sizes at or below 480px or `hover:md:auto-cols-auto` to apply the auto-cols-auto utility at only between small screen sizes 480px and medium screen sizes 768px on hover 1 the structure for row-span is as follows: ` conditional state : media query :auto-cols keyword ` p e `active:md:auto-cols-auto`  executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:auto-cols-auto focus:auto-cols-auto hover:auto-cols-auto active grid auto columns focus grid auto columns hover grid auto columns active:sm:auto-cols-auto focus:sm:auto-cols-auto hover:sm:auto-cols-auto active small screens grid auto columns focus small screens grid auto columns hover small screens grid auto columns active:md:auto-cols-auto focus:md:auto-cols-auto hover:md:auto-cols-auto active medium screens grid auto columns focus medium screens grid auto columns hover medium screens grid auto columns active:lg:auto-cols-auto focus:lg:auto-cols-auto hover:lg:auto-cols-auto active large screens grid auto columns focus large screens grid auto columns hover large screens grid auto columns sources grid-auto-columns https: developer mozilla org en-us docs web css grid-auto-columns "}},{"slug":"grid-auto-flow","frontmatter":{"isBlog":false,"title":"grid auto flow","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s grid auto flow.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flex & grid","author":"severin glaser","keywords":"grid, grid row start, grid row end, grid layout","classNames":"","plainText":" omencss css class example grid-flow-row grid-flow-row grid-auto-flow: row; grid-flow-col grid-flow-col grid-auto-flow: column; grid-flow-row-dense grid-flow-row-dense grid-auto-flow: row dense; grid-flow-col-dense grid-flow-row grid-auto-flow: column dense; define the placement of elements in a grid row use the grid-flow keyword set the direction of an element by using auto-placing algorithm control the direction in the example below we use 3 grid rows `grid-rows-3` with a `grid-flow-col` direction the elements are therefore placed in a vertical direction ! omencss grid auto flow images docs flex grid-auto-flow webp?style=centerme  active focus and hover states with omencss you can conditionally apply utility classes in different states by using variant modifiers like active focus or hover for example use `hover:grid-flow-row` to apply the `grid-flow-row` utility class on hover events omencss css class example active:grid-flow-row active :grid-flow-row:active grid-auto-flow: row; focus:grid-flow-row focus :grid-flow-row:focus grid-auto-flow: row; hover:grid-flow-row hover :grid-flow-row:hover grid-auto-flow: row;  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:grid-flow-row md: 480px 768px md:grid-flow-row lg: 768px 1080px lg:grid-flow-row omencss media queries can also be combined with active focus and hover states for example use `sm:grid-flow-row` to apply the grid-flow-row utility at only small screen sizes at or below 480px or `hover:md:grid-flow-row` to apply the grid-flow-row utility at only between small screen sizes 480px and medium screen sizes 768px on hover 1 the structure for row-span is as follows: ` conditional state : media query :grid-flow keyword ` p e `active:md:grid-flow-row`  executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:grid-flow-row focus:grid-flow-row hover:grid-flow-row active grid auto flow focus grid auto flow hover grid auto flow active:sm:grid-flow-row focus:sm:grid-flow-row hover:sm:grid-flow-row active small screens grid auto flow focus small screens grid auto flow hover small screens grid auto flow active:md:grid-flow-row focus:md:grid-flow-row hover:md:grid-flow-row active medium screens grid auto flow focus medium screens grid auto flow hover medium screens grid auto flow active:lg:grid-flow-row focus:lg:grid-flow-row hover:lg:grid-flow-row active large screens grid auto flow focus large screens grid auto flow hover large screens grid auto flow sources grid-auto-flow https: developer mozilla org en-us docs web css grid-auto-flow "}},{"slug":"grid-auto-rows","frontmatter":{"isBlog":false,"title":"grid auto rows","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s grid auto rows.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flex & grid","author":"severin glaser","keywords":"grid, grid auto rows, gird row, grid rows, grid layout","classNames":"","plainText":" omencss css class example auto-rows-auto auto-rows-auto grid-auto-rows: auto; auto-rows-min auto-rows-min grid-auto-rows: min-content; auto-rows-max auto-rows-max grid-auto-rows: max-content; auto-rows-fr auto-rows-fr grid-auto-rows: minmax 0 1fr ; define the placement of elements in a grid row use the auto-rows keyword to control the size width & height of an element in grid rows control the size in the example below we use a grid system `grid` with a `grid-flow-row` direction which stretches to the maximum size of the object `auto-rows-max` the elements are therefore stretched to the max direction  active focus and hover states with omencss you can conditionally apply utility classes in different states by using variant modifiers like active focus or hover for example use `hover:auto-rows-auto` to apply the `auto-rows-auto` utility class on hover events omencss css class example active:auto-rows-auto active :auto-rows-auto:active grid-auto-rows: auto; focus:auto-rows-auto focus :auto-rows-auto:focus grid-auto-rows: auto; hover:auto-rows-auto hover :auto-rows-auto:hover grid-auto-rows: auto;  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:auto-rows-auto md: 480px 768px md:auto-rows-auto lg: 768px 1080px lg:auto-rows-auto omencss media queries can also be combined with active focus and hover states for example use `sm:auto-rows-auto` to apply the auto-rows-auto utility at only small screen sizes at or below 480px or `hover:md:auto-rows-auto` to apply the auto-rows-auto utility at only between small screen sizes 480px and medium screen sizes 768px on hover 1 the structure for row-span is as follows: ` conditional state : media query :auto-rows keyword ` p e `active:md:auto-rows-auto`  executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:auto-rows-auto focus:auto-rows-auto hover:auto-rows-auto active grid auto rows focus grid auto rows hover grid auto rows active:sm:auto-rows-auto focus:sm:auto-rows-auto hover:sm:auto-rows-auto active small screens grid auto rows focus small screens grid auto rows hover small screens grid auto rows active:md:auto-rows-auto focus:md:auto-rows-auto hover:md:auto-rows-auto active medium screens grid auto rows focus medium screens grid auto rows hover medium screens grid auto rows active:lg:auto-rows-auto focus:lg:auto-rows-auto hover:lg:auto-rows-auto active large screens grid auto rows focus large screens grid auto rows hover large screens grid auto rows sources grid-auto-rows https: developer mozilla org en-us docs web css grid-auto-rows "}},{"slug":"grid-column-start-end","frontmatter":{"isBlog":false,"title":"grid column start | end","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s grid column start and end.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flex & grid","author":"severin glaser","keywords":"grid, grid column start, grid column end, grid layout","classNames":"","plainText":" omencss css class example col-auto col-auto grid-column: auto; col-span-1 col-span-1 grid-column: grid-column: 1; col-span-2 col-span-2 grid-column: grid-column: 2; col-span-3 col-span-3 grid-column: grid-column: 3; col-span-4 col-span-4 grid-column: grid-column: 4; col-span-5 col-span-5 grid-column: grid-column: 5; col-span-6 col-span-6 grid-column: grid-column: 6; col-span-7 col-span-7 grid-column: grid-column: 7; col-span-8 col-span-8 grid-column: grid-column: 8; col-span-9 col-span-9 grid-column: grid-column: 9; col-span-10 col-span-10 grid-column: rgrid-column: 10; col-span-11 col-span-11 grid-column: rgrid-column: 11; col-span-12 col-span-12 grid-column: rgrid-column: 12; col-span-full col-span-full grid-column: math div 1 -1 ; col-start-auto col-start-auto grid-column-start: auto; col-start-1 col-start-1 grid-column-start: grid-column-start: 1; col-start-2 col-start-2 grid-column-start: grid-column-start: 2; col-start-3 col-start-3 grid-column-start: grid-column-start: 3; col-start-4 col-start-4 grid-column-start: grid-column-start: 4; col-start-5 col-start-5 grid-column-start: grid-column-start: 5; col-start-6 col-start-6 grid-column-start: grid-column-start: 6; col-start-7 col-start-7 grid-column-start: grid-column-start: 7; col-start-8 col-start-8 grid-column-start: grid-column-start: 8; col-start-9 col-start-9 grid-column-start: grid-column-start: 9; col-start-10 col-start-10 grid-column-start: rgrid-column-start: 10; col-start-11 col-start-11 grid-column-start: rgrid-column-start: 11; col-start-12 col-start-12 grid-column-start: rgrid-column-start: 12; col-start-full col-start-full grid-column-start: math div 1 -1 ; col-end-auto col-end-auto grid-column-end: auto; col-end-1 col-end-1 grid-column-end: grid-column-end: 1; col-end-2 col-end-2 grid-column-end: grid-column-end: 2; col-end-3 col-end-3 grid-column-end: grid-column-end: 3; col-end-4 col-end-4 grid-column-end: grid-column-end: 4; col-end-5 col-end-5 grid-column-end: grid-column-end: 5; col-end-6 col-end-6 grid-column-end: grid-column-end: 6; col-end-7 col-end-7 grid-column-end: grid-column-end: 7; col-end-8 col-end-8 grid-column-end: grid-column-end: 8; col-end-9 col-end-9 grid-column-end: grid-column-end: 9; col-end-10 col-end-10 grid-column-end: rgrid-column-end: 10; col-end-11 col-end-11 grid-column-end: rgrid-column-end: 11; col-end-12 col-end-12 grid-column-end: rgrid-column-end: 12; col-end-full col-end-full grid-column-end: math div 1 -1 ; define the placement of elements in a grid use the col-span number set the column amount in a css grid the range extends from 1-12 set when and where the element starts and ends ⚠️ note that css grid lines start at 1 and not 0 in firefox you can easily head to your console and click `grid` in the source code it will show the exact numbers in your grid ! omencss grid source code firefox images docs flex source-code webp?style=centerme ! omencss grid source code result firefox images docs flex source-code-result webp?style=centerme example in the example below we assume a maximum number of 6 grid grid-column `grid-col-6` next to each other with a gap of 30 pixels `gap-30px` and a padding of 50px `p-50px` the first child element starts at position 3 and ends at position 4 in the grid the second element starts at position 1 and ends at position 3 the third div element spawns over 4 columns and ends at position 7 the fourth element stretches over the entire grid it starts at position 1 and ends at position 7 ! omencss grid column start end images docs flex grid-columns-start-end webp?style=centerme  active focus and hover states with omencss you can conditionally apply utility classes in different states by using variant modifiers like active focus or hover for example use `hover:col-span-2` to apply the `col-span-2` utility class on hover events omencss css class example active:col-span-1 active :col-span-1:active grid-column: grid-column: 1; focus:col-span-1 focus :col-span-1:focus grid-column: grid-column: 1; hover:col-span-1 hover :col-span-1:hover grid-column: grid-column: 1;  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:col-span-1 md: 480px 768px md:col-span-1 lg: 768px 1080px lg:col-span-1 omencss media queries can also be combined with active focus and hover states for example use `sm:col-span-1` to apply the col-span-1 utility at only small screen sizes at or below 480px or `hover:md:col-span-1` to apply the col-span-1 utility at only between small screen sizes 480px and medium screen sizes 768px on hover 1 the structure for col-span is as follows: ` conditional state : media query :col-span numbers ` p e `active:md:col-span-1` 2 the structure for col-start is as follows: ` conditional state : media query :col-start numbers ` p e `active:md:col-start-1` 3 the structure for col-end is as follows: ` conditional state : media query :col-end numbers ` p e `active:md:col-end-1`  executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:col-span-1 focus:col-span-1 hover:col-span-1 active grid column span focus grid column span hover grid column span active:sm:col-span-1 focus:sm:col-span-1 hover:sm:col-span-1 active small screens grid column span focus small screens grid column span hover small screens grid column span active:md:col-span-1 focus:md:col-span-1 hover:md:col-span-1 active medium screens grid column span focus medium screens grid column span hover medium screens grid column span active:lg:col-span-1 focus:lg:col-span-1 hover:lg:col-span-1 active large screens grid column span focus large screens grid column span hover large screens grid column span sources grid-column-start https: developer mozilla org en-us docs web css grid-column-start grid-column-end https: developer mozilla org en-us docs web css grid-column-end "}},{"slug":"grid-row-start-end","frontmatter":{"isBlog":false,"title":"grid row start | end","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s grid row start and end.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flex & grid","author":"severin glaser","keywords":"grid, grid row start, grid row end, grid layout","classNames":"","plainText":" omencss css class example row-auto row-auto grid-row: auto; row-span-1 row-span-1 grid-row: grid-row: 1; row-span-2 row-span-2 grid-row: grid-row: 2; row-span-3 row-span-3 grid-row: grid-row: 3; row-span-4 row-span-4 grid-row: grid-row: 4; row-span-5 row-span-5 grid-row: grid-row: 5; row-span-6 row-span-6 grid-row: grid-row: 6; row-span-7 row-span-7 grid-row: grid-row: 7; row-span-8 row-span-8 grid-row: grid-row: 8; row-span-9 row-span-9 grid-row: grid-row: 9; row-span-10 row-span-10 grid-row: rgrid-row: 10; row-span-11 row-span-11 grid-row: rgrid-row: 11; row-span-12 row-span-12 grid-row: rgrid-row: 12; row-span-full row-span-full grid-row: math div 1 -1 ; row-start-auto row-start-auto grid-row-start: auto; row-start-1 row-start-1 grid-row-start: 1; row-start-2 row-start-2 grid-row-start: 2; row-start-3 row-start-3 grid-row-start: 3; row-start-4 row-start-4 grid-row-start: 4; row-start-5 row-start-5 grid-row-start: 5; row-start-6 row-start-6 grid-row-start: 6; row-start-7 row-start-7 grid-row-start: 7; row-start-8 row-start-8 grid-row-start: 8; row-start-9 row-start-9 grid-row-start: 9; row-start-10 row-start-10 grid-row-start: 10; row-start-11 row-start-11 grid-row-start: 11; row-start-12 row-start-12 grid-row-start: 12; row-end-auto row-end-auto grid-row-end: auto; row-end-1 row-end-1 grid-row-end: 1; row-end-2 row-end-2 grid-row-end: 2; row-end-3 row-end-3 grid-row-end: 3; row-end-4 row-end-4 grid-row-end: 4; row-end-5 row-end-5 grid-row-end: 5; row-end-6 row-end-6 grid-row-end: 6; row-end-7 row-end-7 grid-row-end: 7; row-end-8 row-end-8 grid-row-end: 8; row-end-9 row-end-9 grid-row-end: 9; row-end-10 row-end-10 grid-row-end: 10; row-end-11 row-end-11 grid-row-end: 11; row-end-12 row-end-12 grid-row-end: 12; define the placement of elements in a grid row use the row-span number set the row amount in a css grid the range extends from 1-12 set when and where the element starts and ends ⚠️ note that css grid lines start at 1 and not 0 in firefox you can easily head to your console and click `grid` in the source code it will show the exact numbers in your grid ! omencss grid row source code firefox images docs flex source-code-row webp?style=centerme ! omencss grid row source code result firefox images docs flex source-code-result-row webp?style=centerme example in the example below we assume a maximum number of 3 grid grid-row `grid-rows-3` next to each other with a gap of 30 pixels `gap-15px` and a padding of 50px `p-50px` the first child element starts at position 3 and ends at position 4 in the grid the second element starts at position 1 and ends at position 3 the third div element spawns over 4 rows and ends at position 7 the fourth element stretches over the entire grid it starts at position 1 and ends at position 7 ! omencss grid row start end images docs flex grid-rows-start-end webp?style=centerme  row start & end use either the row-start number or row-end number to let an element start stop or end at a certain position in the grid the range extends from 1-12 s ⚠️ note that css grid lines start at 1 and not 0 for a better overview and easier coding experience cf define the placement of elements in a grid row define-the-placement-of-elements-in-a-grid-row ! omencss grid row start end example images docs flex grid-rows-start-end-example webp?style=centerme  active focus and hover states with omencss you can conditionally apply utility classes in different states by using variant modifiers like active focus or hover for example use `hover:row-span-1` to apply the `row-span-1` utility class on hover events omencss css class example active:row-span-1 active :row-span-1:active grid-row: grid-row: 1; focus:row-span-1 focus :row-span-1:focus grid-row: grid-row: 1; hover:row-span-1 hover :row-span-1:hover grid-row: grid-row: 1;  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:row-span-1 md: 480px 768px md:row-span-1 lg: 768px 1080px lg:row-span-1 omencss media queries can also be combined with active focus and hover states for example use `sm:row-span-1` to apply the row-span-1 utility at only small screen sizes at or below 480px or `hover:md:row-span-1` to apply the row-span-1 utility at only between small screen sizes 480px and medium screen sizes 768px on hover 1 the structure for row-span is as follows: ` conditional state : media query :row-span numbers ` p e `active:md:row-span-1` 2 the structure for row-start is as follows: ` conditional state : media query :row-start numbers ` p e `active:md:row-start-1` 3 the structure for row-end is as follows: ` conditional state : media query :row-end numbers ` p e `active:md:row-end-1`  executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:row-span-1 focus:row-span-1 hover:row-span-1 active grid row span focus grid row span hover grid row span active:sm:row-span-1 focus:sm:row-span-1 hover:sm:row-span-1 active small screens grid row span focus small screens grid row span hover small screens grid row span active:md:row-span-1 focus:md:row-span-1 hover:md:row-span-1 active medium screens grid row span focus medium screens grid row span hover medium screens grid row span active:lg:row-span-1 focus:lg:row-span-1 hover:lg:row-span-1 active large screens grid row span focus large screens grid row span hover large screens grid row span sources grid-row-start https: developer mozilla org en-us docs web css grid-row-start grid-row-end https: developer mozilla org en-us docs web css grid-row-end "}},{"slug":"grid-template-columns","frontmatter":{"isBlog":false,"title":"grid template columns","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s grid template columns.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flex & grid","author":"severin glaser","keywords":"grid, grid template column, grid col, grid columns","classNames":"","plainText":" omencss css class example grid-col-none grid-col-none grid-template-columns: none ; grid-col-1 grid-col-1 grid-template-columns: repeat 1 minmax 0 1fr ; grid-col-2 grid-col-2 grid-template-columns: repeat 2 minmax 0 1fr ; grid-col-3 grid-col-3 grid-template-columns: repeat 3 minmax 0 1fr ; grid-col-4 grid-col-4 grid-template-columns: repeat 4 minmax 0 1fr ; grid-col-5 grid-col-5 grid-template-columns: repeat 5 minmax 0 1fr ; grid-col-6 grid-col-6 grid-template-columns: repeat 6 minmax 0 1fr ; grid-col-7 grid-col-7 grid-template-columns: repeat 7 minmax 0 1fr ; grid-col-8 grid-col-8 grid-template-columns: repeat 8 minmax 0 1fr ; grid-col-9 grid-col-9 grid-template-columns: repeat 9 minmax 0 1fr ; grid-col-10 grid-col-10 grid-template-columns: repeat 10 minmax 0 1fr ; grid-col-11 grid-col-11 grid-template-columns: repeat 11 minmax 0 1fr ; grid-col-12 grid-col-12 grid-template-columns: repeat 12 minmax 0 1fr ; define the amount of columns in a grid use the grid-col number utilities to create grids easily the range extends from 1-12 in the example below we assume a maximum number of 3 grid columns `grid-cols-3` next to each other with a gap of 30 pixels `gap-30px` ! omencss grid template columns images docs flex grid-columns webp?style=centerme  active focus and hover states omencss css class example active:grid-col-1 active :grid-col-1:active grid-template-columns: repeat 1 minmax 0 1fr ; focus:grid-col-1 focus :grid-col-1:focus grid-template-columns: repeat 1 minmax 0 1fr ; hover:grid-col-1 hover :grid-col-1:hover grid-template-columns: repeat 1 minmax 0 1fr ; omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:grid-col-1` to only apply the `grid-col-1` utility on hover in the example below we consider there is a maximum number of 3 columns next to each other which means that there are three child elements in the same column if you hover over the parent object the number of columns changes to one as a result all child elements will occupy one column  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:grid-col-1 md: 480px 768px md:grid-col-1 lg: 768px 1080px lg:grid-col-1 omencss media queries can also be combined with active focus and hover states for example use `sm:grid-col-1` to apply the grid-col-1 utility at only small screen sizes at or below 480px or `hover:md:grid-col-1` to apply the grid-col-1 utility at only between small screen sizes 480px and medium screen sizes 768px on hover 1 the structure is as follows: ` conditional state : media query :grid-col numbers ` p e `active:md:grid-col-1` responsive example working with cross-screen displays has never been easier using two omencss classes your grid will be compatible with smartphones and desktop displays in no time 1 the structure is as follows: ` media query :grid-col numbers ` p e `sm:grid-col-1` 1 the default value has no media query and will be applied for all screens: `grid-col numbers ` p e `grid-col-1` ! omencss responsive macbook grid template columns images docs flex macbook-grid-columns webp?style=centerme ! omencss responsive iphone grid template columns images docs flex iphone-grid-columns webp?style=centerme  executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:grid-col-1 focus:grid-col-1 hover:grid-col-1 active grid template columns focus grid template columns hover grid template columns active:sm:grid-col-1 focus:sm:grid-col-1 hover:sm:grid-col-1 active small screens grid template columns focus small screens grid template columns hover small screens grid template columns active:md:grid-col-1 focus:md:grid-col-1 hover:md:grid-col-1 active medium screens grid template columns focus medium screens grid template columns hover medium screens grid template columns active:lg:grid-col-1 focus:lg:grid-col-1 hover:lg:grid-col-1 active large screens grid template columns focus large screens grid template columns hover large screens grid template columns sources grid-template-columns https: developer mozilla org en-us docs web css grid-template-columns "}},{"slug":"grid-template-rows","frontmatter":{"isBlog":false,"title":"grid template rows","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s grid template rows.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"flex & grid","author":"severin glaser","keywords":"grid, grid template rows, grid row, grid rows","classNames":"","plainText":" omencss css class example grid-rows-none grid-rows-none grid-template-rows: none ; grid-rows-1 grid-rows-1 grid-template-rows: repeat 1 minmax 0 1fr ; grid-rows-2 grid-rows-2 grid-template-rows: repeat 2 minmax 0 1fr ; grid-rows-3 grid-rows-3 grid-template-rows: repeat 3 minmax 0 1fr ; grid-rows-4 grid-rows-4 grid-template-rows: repeat 4 minmax 0 1fr ; grid-rows-5 grid-rows-5 grid-template-rows: repeat 5 minmax 0 1fr ; grid-rows-6 grid-rows-6 grid-template-rows: repeat 6 minmax 0 1fr ; grid-rows-7 grid-rows-7 grid-template-rows: repeat 7 minmax 0 1fr ; grid-rows-8 grid-rows-8 grid-template-rows: repeat 8 minmax 0 1fr ; grid-rows-9 grid-rows-9 grid-template-rows: repeat 9 minmax 0 1fr ; grid-rows-10 grid-rows-10 grid-template-rows: repeat 10 minmax 0 1fr ; grid-rows-11 grid-rows-11 grid-template-rows: repeat 11 minmax 0 1fr ; grid-rows-12 grid-rows-12 grid-template-rows: repeat 12 minmax 0 1fr ; define the amount of rows in a grid use the grid-rows number utilities to create grids easily the range extends from 1-12 in the example below we assume a maximum number of 4 grid rows vertical direction `grid-rows-4` below each other with a gap of 30 pixels `gap-30px` ! omencss grid template rows images docs flex grid-rows webp?style=centerme  active focus and hover states omencss css class example active:grid-rows-1 active :grid-rows-1:active grid-template-rows: repeat 1 minmax 0 1fr ; focus:grid-rows-1 focus :grid-rows-1:focus grid-template-rows: repeat 1 minmax 0 1fr ; hover:grid-rows-1 hover :grid-rows-1:hover grid-template-rows: repeat 1 minmax 0 1fr ; omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:grid-rows-1` to only apply the `grid-rows-1` utility on hover in the example below we consider there is a maximum number of 3 rows next to each other which means that there are three child elements in the same column if you hover over the parent object the number of rows changes to one as a result all child elements will occupy one column  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:grid-rows-1 md: 480px 768px md:grid-rows-1 lg: 768px 1080px lg:grid-rows-1 omencss media queries can also be combined with active focus and hover states for example use `sm:grid-rows-1` to apply the grid-rows-1 utility at only small screen sizes at or below 480px or `hover:md:grid-rows-1` to apply the grid-rows-1 utility at only between small screen sizes 480px and medium screen sizes 768px on hover 1 the structure is as follows: ` conditional state : media query :grid-rows numbers ` p e `active:md:grid-rows-1` responsive example working with cross-screen displays has never been easier using two omencss classes your grid will be compatible with smartphones and desktop displays in no time 1 the structure is as follows: ` media query :grid-rows numbers ` p e `sm:grid-rows-1` 1 the default value has no media query and will be applied for all screens: `grid-rows numbers ` p e `grid-rows-1` ! omencss responsive macbook grid template rows images docs flex macbook-grid-rows webp?style=centerme ! omencss responsive iphone grid template rows images docs flex iphone-grid-rows webp?style=centerme in the example below we use `grid-rows-4 grid-flow-col sm:grid-rows-1 sm:grid-flow-row` for a default grid with 4 vertical rows which spreads in a column flow horizontally for small screens the class `sm:grid-rows-1 sm:grid-flow-row` is being used which creates a horizontal flow for the element which covers the entire screen by the way you do not have to use `sm:grid-rows-1` as the horizontal flow class `sm:grid-flow-row` takes over control for the elements this class is an unnecessary repetition and was only used to demonstrate the responsive example  executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:grid-rows-1 focus:grid-rows-1 hover:grid-rows-1 active grid template rows focus grid template rows hover grid template rows active:sm:grid-rows-1 focus:sm:grid-rows-1 hover:sm:grid-rows-1 active small screens grid template rows focus small screens grid template rows hover small screens grid template rows active:md:grid-rows-1 focus:md:grid-rows-1 hover:md:grid-rows-1 active medium screens grid template rows focus medium screens grid template rows hover medium screens grid template rows active:lg:grid-rows-1 focus:lg:grid-rows-1 hover:lg:grid-rows-1 active large screens grid template rows focus large screens grid template rows hover large screens grid template rows sources grid-template-rows https: developer mozilla org en-us docs web css grid-template-rows "}},{"slug":"layout-aspect-ratio","frontmatter":{"isBlog":false,"title":"aspect ratio","date":"apr 06. 2022","excerpt":"utility classes to control the aspect ratio of html elements.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"layout","author":"severin glaser","keywords":"aspect ratio, aspect-ratio, layout","classNames":"","plainText":" omencss css class example aspect-auto aspect-auto aspect-ratio: auto; aspect-square aspect-square aspect-ratio: math div 1 1 ; aspect-video aspect-video aspect-ratio: math div 16 9 ; how to work with aspect ratio use the `aspect keyword ` utilities to set the individual aspect ratio of an element aspect auto in the example below we use `aspect-auto` to set the height automatically according to the preselected width  aspect square in the example below we use `aspect-square` to set an equal width and height for your iframe  aspect video in the example below we use `aspect-video` to set an 16:9 ratio for your iframe  active focus and hover states omencss css class example active:aspect keyword active :aspect-auto:active aspect-ratio: start; focus:aspect keyword focus :aspect-auto:focus aspect-ratio: start; hover:aspect keyword hover :aspect-auto:hover aspect-ratio: start; omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:aspect-auto` to only apply the aspect-auto utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:aspect-auto md: 480px 768px md:aspect-auto lg: 768px 1080px lg:aspect-auto omencss media queries can also be combined with active focus and hover states for example use `sm:aspect-auto` to apply the aspect-auto utility at only small screen sizes at or below 480px or `active:md:aspect-auto` to apply the aspect-auto utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query :aspect keyword ` p e `active:md:aspect-auto` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:aspect keyword focus:aspect keyword hover:aspect keyword active aspect ratio auto focus aspect ratio auto hover aspect ratio auto active:sm:aspect keyword focus:sm:aspect keyword hover:sm:aspect keyword active small screens aspect ratio auto focus small screens aspect ratio auto hover small screens aspect ratio auto active:md:aspect keyword focus:md:aspect keyword hover:md:aspect keyword active medium screens aspect ratio auto focus medium screens aspect ratio auto hover medium screens aspect ratio auto active:lg:aspect keyword focus:lg:aspect keyword hover:lg:aspect keyword active large screens aspect ratio auto focus large screens aspect ratio auto hover large screens aspect ratio auto sources aspect-ratio https: developer mozilla org en-us docs web css aspect-ratio "}},{"slug":"layout-columns","frontmatter":{"isBlog":false,"title":"columns","date":"apr 06. 2022","excerpt":"utility classes to control the number of columns within html elements.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"layout","author":"severin glaser","keywords":"columns, column auto, layout","classNames":"","plainText":""}},{"slug":"layout-container","frontmatter":{"isBlog":false,"title":"container & row","date":"apr 06. 2022","excerpt":"container and row classes to control html elements.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"layout","author":"severin glaser","keywords":"container, row, layout","classNames":"","plainText":" omencss css class example container container width: 100%; max-width: 1100px; margin: 0 auto; padding: 0; box-sizing: border-box; row row display: flex; flex-flow: row wrap; how to use the container use the `container` or `row` utilities to set the individual width of your layout the container is useful for screens with a width up to 1100px it is recommended to use the container with the `mx-auto` class to center it for larger screens check row row for an example container in the example below we use `container` to set the a default layout the container css class looks like:  a real life example could look like:  row in the example below we use `row` to set a row within a container the row css class looks like:  a real life example could look like:  the container in this example has a blue background we use `mx-auto` to center the container horizontally the row elements are marked with first second and third ! omencss macbook layout container row images docs layout macbook-layout-container-row webp?style=centerme ! omencss iphone layout container row images docs layout iphone-layout-container-row webp?style=centerme active focus and hover states there are no active focus or hover classes available responsive breakpoints there are no responsive classes available executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example container container row row "}},{"slug":"sizing-height","frontmatter":{"isBlog":false,"title":"height","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s height.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"sizing","author":"severin glaser","keywords":"sizing, height, h-, max-h, min-h","classNames":"","plainText":" omencss css class example minimum value maximum value step h size h-1px height: 1px; h-0px h-100px 1px h size h-11rem height: 1rem; h-11rem h-100rem 1rem h size h-1% height: 1%; h-0per h-100per 1% h size h-1vw height: 1vw; h-0vw h-100vw 1vw fixed heights control the height on every html element by using the h size utility with a postfix variable like ` -px -rem -vw ` 1 the pixel height class range is from 0 to positive 100 and uses the px postfix the steps are + 1px e g `h-0px h-1px h-100px` 2 the rem height class range is from positive 11rem to positive 100rem and uses the rem postfix the steps are + 1rem e g `h-11rem h-12rem h-100rem` ⚠️ remember 1rem = 10px or 10rem = 100px 3 the viewport height class range is from 0vw to positive 100vw and uses the vw postfix the steps are + 1vw e g `h-0vw h-1vw h-100vw` use h-100vw to make an element span the entire height of the viewport  percentage heights control the percentage height on every html element by using the h size utility with the postfix variable ` -per ` 1 the percentage height class range is from 0 to positive 100 and uses the per postfix the steps are + 1% e g `h-0per h-1per h-100per`  reset height the ` h-auto ` utility can be useful if you need to remove an element’s assigned height under a specific condition like at a particular breakpoint blog responsive-omencss-breakpoints :  💡 click how to use the default minimum height docs sizing-minimum-height or maximum height docs sizing-maximum-height active focus and hover states omencss css class example range active:h size active :h-1px:active height: 1px; active:h-0px to active:h-100px focus:h size focus :h-1px:focus height: 1px; focus:h-0px to focus:h-100px hover:h size hover :h-1px:focus height: 1px; hover:h-0px to hover:h-100px omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:h-10px` to only apply the h-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:h-10px md: 480px 768px md:h-10px lg: 768px 1080px lg:h-10px omencss media queries can also be combined with active focus and hover states for example use `sm:h-10px` to apply the h-10px utility at only small screen sizes at or below 480px or `active:md:h-10px` to apply the h-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query : classname size ` p e `active:md:m-10px` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:h size focus:h size hover:h size active height focus height hover height active:sm:h size focus:sm:h size hover:sm:h size active small screens height focus small screens height hover small screens height active:md:h size focus:md:h size hover:md:h size active medium screens height focus medium screens height hover medium screens height active:lg:h size focus:lg:h size hover:lg:h size active large screens height focus large screens height hover large screens height sources height https: developer mozilla org en-us docs web css height "}},{"slug":"sizing-maximum-height","frontmatter":{"isBlog":false,"title":"maximum height","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s maximum height.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"sizing","author":"severin glaser","keywords":"sizing, maximum height, max-h-","classNames":"","plainText":" omencss css class example maximum value maximum value step max-h size max-h-1px height: 1px; max-h-0px max-h-100px 1px max-h size max-h-11rem height: 1rem; max-h-11rem max-h-100rem 1rem max-h size max-h-1% height: 1%; max-h-0per max-h-100per 1% max-h size max-h-1vw height: 1vw; max-h-0vw max-h-100vw 1vw fixed maximum heights control the height on every html element by using the max-h size utility with a postfix variable like ` -px -rem -vw ` 1 the pixel height class range is from 0 to positive 100 and uses the px postfix the steps are + 1px e g `max-h-0px max-h-1px max-h-100px` 2 the rem height class range is from positive 11rem to positive 100rem and uses the rem postfix the steps are + 1rem e g `max-h-11rem max-h-12rem max-h-100rem` ⚠️ remember 1rem = 10px or 10rem = 100px 3 the viewport height class range is from 0vw to positive 100vw and uses the vw postfix the steps are + 1vw e g `max-h-0vw max-h-1vw max-h-100vw` use max-h-100vw to make an element span the entire height of the viewport  maximum percentage heights control the percentage height on every html element by using the max-h size utility with the postfix variable ` -per ` 1 the percentage height class range is from 0 to positive 100 and uses the per postfix the steps are + 1% e g `max-h-0per max-h-1per max-h-100per`  reset the maximum height the ` max-h-auto ` utility can be useful if you need to remove an element’s assigned height under a specific condition like at a particular breakpoint blog responsive-omencss-breakpoints :  💡 click how to use the default height docs sizing-height or minimum height docs sizing-minimum-height active focus and hover states omencss css class example range active:max-h size active :max-h-1px:active height: 1px; active:max-h-0px to active:max-h-100px focus:max-h size focus :max-h-1px:focus height: 1px; focus:max-h-0px to focus:max-h-100px hover:max-h size hover :max-h-1px:focus height: 1px; hover:max-h-0px to hover:max-h-100px omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:max-h-10px` to only apply the max-h-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:max-h-10px md: 480px 768px md:max-h-10px lg: 768px 1080px lg:max-h-10px omencss media queries can also be combined with active focus and hover states for example use `sm:max-h-10px` to apply the max-h-10px utility at only small screen sizes at or below 480px or `active:md:max-h-10px` to apply the max-h-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query : classname size ` p e `active:md:m-10px` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:max-h size focus:max-h size hover:max-h size active maximum height focus maximum height hover maximum height active:sm:max-h size focus:sm:max-h size hover:sm:max-h size active small screens maximum height focus small screens maximum height hover small screens maximum height active:md:max-h size focus:md:max-h size hover:md:max-h size active medium screens maximum height focus medium screens maximum height hover medium screens maximum height active:lg:max-h size focus:lg:max-h size hover:lg:max-h size active large screens maximum height focus large screens maximum height hover large screens maximum height sources max-height https: developer mozilla org en-us docs web css max-height "}},{"slug":"sizing-maximum-width","frontmatter":{"isBlog":false,"title":"maximum width","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s maximum width.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"sizing","author":"severin glaser","keywords":"sizing, maximum width, max-w-","classNames":"","plainText":" omencss css class example maximum value maximum value step max-w size max-w-1px width: 1px; max-w-0px max-w-100px 1px max-w size max-w-11rem width: 1rem; max-w-11rem max-w-100rem 1rem max-w size max-w-1% width: 1%; max-w-0per max-w-100per 1% max-w size max-w-1vw width: 1vw; max-w-0vw max-w-100vw 1vw fixed maximum widths control the width on every html element by using the max-w size utility with a postfix variable like ` -px -rem -vw ` 1 the pixel width class range is from 0 to positive 100 and uses the px postfix the steps are + 1px e g `max-w-0px max-w-1px max-w-100px` 2 the rem width class range is from positive 11rem to positive 100rem and uses the rem postfix the steps are + 1rem e g `max-w-11rem max-w-12rem max-w-100rem` ⚠️ remember 1rem = 10px or 10rem = 100px 3 the viewport width class range is from 0vw to positive 100vw and uses the vw postfix the steps are + 1vw e g `max-w-0vw max-w-1vw max-w-100vw` use max-w-100vw to make an element span the entire width of the viewport  percentage widths control the percentage width on every html element by using the max-w size utility with the postfix variable ` -per ` 1 the percentage width class range is from 0 to positive 100 and uses the per postfix the steps are + 1% e g `max-w-0per max-w-1per max-w-100per`  reset the maximum width the ` max-w-auto ` utility can be useful if you need to remove an element’s assigned width under a specific condition like at a particular breakpoint blog responsive-omencss-breakpoints :  💡 click how to use the default width docs sizing-width or minimum width docs sizing-minimum-width active focus and hover states omencss css class example range active:max-w size active :max-w-1px:active width: 1px; active:max-w-0px to active:max-w-100px focus:max-w size focus :max-w-1px:focus width: 1px; focus:max-w-0px to focus:max-w-100px hover:max-w size hover :max-w-1px:focus width: 1px; hover:max-w-0px to hover:max-w-100px omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:max-w-10px` to only apply the max-w-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:max-w-10px md: 480px 768px md:max-w-10px lg: 768px 1080px lg:max-w-10px omencss media queries can also be combined with active focus and hover states for example use `sm:max-w-10px` to apply the max-w-10px utility at only small screen sizes at or below 480px or `active:md:max-w-10px` to apply the max-w-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query : classname size ` p e `active:md:m-10px` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:max-w size focus:max-w size hover:max-w size active maximum width focus maximum width hover maximum width active:sm:max-w size focus:sm:max-w size hover:sm:max-w size active small screens maximum width focus small screens maximum width hover small screens maximum width active:md:max-w size focus:md:max-w size hover:md:max-w size active medium screens maximum width focus medium screens maximum width hover medium screens maximum width active:lg:max-w size focus:lg:max-w size hover:lg:max-w size active large screens maximum width focus large screens maximum width hover large screens maximum width sources max-width https: developer mozilla org en-us docs web css max-width "}},{"slug":"sizing-minimum-height","frontmatter":{"isBlog":false,"title":"minimum height","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s minimum height.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"sizing","author":"severin glaser","keywords":"sizing, minimum height, min-h-","classNames":"","plainText":" omencss css class example minimum value maximum value step min-h size min-h-1px height: 1px; min-h-0px min-h-100px 1px min-h size min-h-11rem height: 1rem; min-h-11rem min-h-100rem 1rem min-h size min-h-1% height: 1%; min-h-0per min-h-100per 1% min-h size min-h-1vw height: 1vw; min-h-0vw min-h-100vw 1vw fixed minimum heights control the height on every html element by using the min-h size utility with a postfix variable like ` -px -rem -vw ` 1 the pixel height class range is from 0 to positive 100 and uses the px postfix the steps are + 1px e g `min-h-0px min-h-1px min-h-100px` 2 the rem height class range is from positive 11rem to positive 100rem and uses the rem postfix the steps are + 1rem e g `min-h-11rem min-h-12rem min-h-100rem` ⚠️ remember 1rem = 10px or 10rem = 100px 3 the viewport height class range is from 0vw to positive 100vw and uses the vw postfix the steps are + 1vw e g `min-h-0vw min-h-1vw min-h-100vw` use min-h-100vw to make an element span the entire height of the viewport  minimum percentage heights control the percentage height on every html element by using the min-h size utility with the postfix variable ` -per ` 1 the percentage height class range is from 0 to positive 100 and uses the per postfix the steps are + 1% e g `min-h-0per min-h-1per min-h-100per`  reset the minimum height the ` min-h-auto ` utility can be useful if you need to remove an element’s assigned height under a specific condition like at a particular breakpoint blog responsive-omencss-breakpoints :  💡 click how to use the default height docs sizing-height or maximum height docs sizing-maximum-height active focus and hover states omencss css class example range active:min-h size active :min-h-1px:active height: 1px; active:min-h-0px to active:min-h-100px focus:min-h size focus :min-h-1px:focus height: 1px; focus:min-h-0px to focus:min-h-100px hover:min-h size hover :min-h-1px:focus height: 1px; hover:min-h-0px to hover:min-h-100px omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:min-h-10px` to only apply the min-h-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:min-h-10px md: 480px 768px md:min-h-10px lg: 768px 1080px lg:min-h-10px omencss media queries can also be combined with active focus and hover states for example use `sm:min-h-10px` to apply the min-h-10px utility at only small screen sizes at or below 480px or `active:md:min-h-10px` to apply the min-h-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query : classname size ` p e `active:md:m-10px` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:min-h size focus:min-h size hover:min-h size active minimum height focus minimum height hover minimum height active:sm:min-h size focus:sm:min-h size hover:sm:min-h size active small screens minimum height focus small screens minimum height hover small screens minimum height active:md:min-h size focus:md:min-h size hover:md:min-h size active medium screens minimum height focus medium screens minimum height hover medium screens minimum height active:lg:min-h size focus:lg:min-h size hover:lg:min-h size active large screens minimum height focus large screens minimum height hover large screens minimum height sources min-height https: developer mozilla org en-us docs web css min-height "}},{"slug":"sizing-minimum-width","frontmatter":{"isBlog":false,"title":"minimum width","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s minimum width.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"sizing","author":"severin glaser","keywords":"sizing, minimum width, min-w-","classNames":"","plainText":" omencss css class example minimum value maximum value step min-w size min-w-1px width: 1px; min-w-0px min-w-100px 1px min-w size min-w-11rem width: 1rem; min-w-11rem min-w-100rem 1rem min-w size min-w-1% width: 1%; min-w-0per min-w-100per 1% min-w size min-w-1vw width: 1vw; min-w-0vw min-w-100vw 1vw fixed minimum widths control the width on every html element by using the min-w size utility with a postfix variable like ` -px -rem -vw ` 1 the pixel width class range is from 0 to positive 100 and uses the px postfix the steps are + 1px e g `min-w-0px min-w-1px min-w-100px` 2 the rem width class range is from positive 11rem to positive 100rem and uses the rem postfix the steps are + 1rem e g `min-w-11rem min-w-12rem min-w-100rem` ⚠️ remember 1rem = 10px or 10rem = 100px 3 the viewport width class range is from 0vw to positive 100vw and uses the vw postfix the steps are + 1vw e g `min-w-0vw min-w-1vw min-w-100vw` use min-w-100vw to make an element span the entire width of the viewport  percentage widths control the percentage width on every html element by using the min-w size utility with the postfix variable ` -per ` 1 the percentage width class range is from 0 to positive 100 and uses the per postfix the steps are + 1% e g `min-w-0per min-w-1per min-w-100per`  reset the minimum width the ` min-w-auto ` utility can be useful if you need to remove an element’s assigned width under a specific condition like at a particular breakpoint blog responsive-omencss-breakpoints :  💡 click how to use the default width docs sizing-width or maximum width docs sizing-maximum-width active focus and hover states omencss css class example range active:min-w size active :min-w-1px:active width: 1px; active:min-w-0px to active:min-w-100px focus:min-w size focus :min-w-1px:focus width: 1px; focus:min-w-0px to focus:min-w-100px hover:min-w size hover :min-w-1px:focus width: 1px; hover:min-w-0px to hover:min-w-100px omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:min-w-10px` to only apply the min-w-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:min-w-10px md: 480px 768px md:min-w-10px lg: 768px 1080px lg:min-w-10px omencss media queries can also be combined with active focus and hover states for example use `sm:min-w-10px` to apply the min-w-10px utility at only small screen sizes at or below 480px or `active:md:min-w-10px` to apply the min-w-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query : classname size ` p e `active:md:m-10px` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:min-w size focus:min-w size hover:min-w size active minimum width focus minimum width hover minimum width active:sm:min-w size focus:sm:min-w size hover:sm:min-w size active small screens minimum width focus small screens minimum width hover small screens minimum width active:md:min-w size focus:md:min-w size hover:md:min-w size active medium screens minimum width focus medium screens minimum width hover medium screens minimum width active:lg:min-w size focus:lg:min-w size hover:lg:min-w size active large screens minimum width focus large screens minimum width hover large screens minimum width sources min-width https: developer mozilla org en-us docs web css min-width "}},{"slug":"sizing-variables","frontmatter":{"isBlog":false,"title":"sizing variables","date":"apr 06. 2022","excerpt":"utility classes for controlling custom sizing variables.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"sizing","author":"severin glaser","keywords":"sizing, width, height, auto","classNames":"","plainText":" omencss css class example w-auto w-auto width: auto; w-min-content w-min-content width: min-content; w-max-content w-max-content width: max-content; w-fit-content w-fit-content width: fit-content; min-w-auto min-w-auto min-width: fit-content; min-w-0px min-w-0px min-width: 0px; min-w-full min-w-full min-width: 100%; min-w-min-content min-w-min-content min-width: min-content; min-w-max-content min-w-max-content min-width: max-content; min-w-fit-content min-w-fit-content min-width: fit-content; max-w-auto max-w-auto max-width: auto; max-w-min-content max-w-min-content max-width: min-content; max-w-max-content max-w-max-content max-width: max-content; max-w-fit-content max-w-fit-content max-width: fit-content; h-auto h-auto height: auto; h-min-content h-min-content height: min-content; h-max-content h-max-content height: max-content; h-fit-content h-fit-content height: fit-content; min-h-auto min-h-auto min-height: fit-content; min-h-0px min-h-0px min-height: 0px; min-h-full min-h-full min-height: 100%; min-h-min-content min-h-min-content min-height: min-content; min-h-max-content min-h-max-content min-height: max-content; min-h-fit-content min-h-fit-content min-height: fit-content; max-h-auto max-h-auto max-height: auto; max-h-min-content max-h-min-content max-height: min-content; max-h-max-content max-h-max-content max-height: max-content; max-h-fit-content max-h-fit-content max-height: fit-content; custom sizing variables control the width minimum width maximum width height minimum height od maximum height on every html element by using the omencss classes shown above  reset width the ` w-auto ` utility can be useful if you need to remove an element’s assigned width under a specific condition like at a particular breakpoint blog responsive-omencss-breakpoints :  💡 click to see how to use the default minimum width docs sizing-minimum-width maximum width docs sizing-maximum-width or width docs sizing-width active focus and hover states omencss css class example active: variable active :max-h-auto:active max-height: auto; focus: variable focus :max-h-auto:focus max-height: auto; hover: variable hover :max-h-auto:focus max-height: auto; omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:max-h-auto` to only apply the max-h-auto utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:max-h-fit-content md: 480px 768px md:max-h-fit-content lg: 768px 1080px lg:max-h-fit-content omencss media queries can also be combined with active focus and hover states for example use `sm:max-h-fit-content` to apply the `max-h-fit-content` utility at only small screen sizes at or below 480px or `active:md:max-h-fit-content` to apply the `max-h-fit-content` utility class only at medium screen sizes 480px 768px and on active state 1 the structure is as follows: ` conditional state : media query : classname ` p e `active:md:m-auto` "}},{"slug":"sizing-width","frontmatter":{"isBlog":false,"title":"width","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s width.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"sizing","author":"severin glaser","keywords":"sizing, width, w-, max-w, min-w","classNames":"","plainText":" omencss css class example minimum value maximum value step w size w-1px width: 1px; w-0px w-100px 1px w size w-11rem width: 1rem; w-11rem w-100rem 1rem w size w-1% width: 1%; w-0per w-100per 1% w size w-1vw width: 1vw; w-0vw w-100vw 1vw fixed widths control the width on every html element by using the w size utility with a postfix variable like ` -px -rem -vw ` 1 the pixel width class range is from 0 to positive 100 and uses the px postfix the steps are + 1px e g `w-0px w-1px w-100px` 2 the rem width class range is from positive 11rem to positive 100rem and uses the rem postfix the steps are + 1rem e g `w-11rem w-12rem w-100rem` ⚠️ remember 1rem = 10px or 10rem = 100px 3 the viewport width class range is from 0vw to positive 100vw and uses the vw postfix the steps are + 1vw e g `w-0vw w-1vw w-100vw` use w-100vw to make an element span the entire width of the viewport  percentage widths control the percentage width on every html element by using the w size utility with the postfix variable ` -per ` 1 the percentage width class range is from 0 to positive 100 and uses the per postfix the steps are + 1% e g `w-0per w-1per w-100per`  reset width the ` w-auto ` utility can be useful if you need to remove an element’s assigned width under a specific condition like at a particular breakpoint blog responsive-omencss-breakpoints :  💡 click how to use the default minimum width docs sizing-minimum-width or maximum width docs sizing-maximum-width active focus and hover states omencss css class example range active:w size active :w-1px:active width: 1px; active:w-0px to active:w-100px focus:w size focus :w-1px:focus width: 1px; focus:w-0px to focus:w-100px hover:w size hover :w-1px:focus width: 1px; hover:w-0px to hover:w-100px omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:w-10px` to only apply the w-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:w-10px md: 480px 768px md:w-10px lg: 768px 1080px lg:w-10px omencss media queries can also be combined with active focus and hover states for example use `sm:w-10px` to apply the w-10px utility at only small screen sizes at or below 480px or `active:md:w-10px` to apply the w-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` conditional state : media query : classname size ` p e `active:md:m-10px` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:w size focus:w size hover:w size active width focus width hover width active:sm:w size focus:sm:w size hover:sm:w size active small screens width focus small screens width hover small screens width active:md:w size focus:md:w size hover:md:w size active medium screens width focus medium screens width hover medium screens width active:lg:w size focus:lg:w size hover:lg:w size active large screens width focus large screens width hover large screens width sources width https: developer mozilla org en-us docs web css width "}},{"slug":"spacing-margin-horizontal","frontmatter":{"isBlog":false,"title":"margin horizontal","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s margin to its horizontal sides.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"spacing","author":"severin glaser","keywords":"margin, negative margin, spacing, margin-inline","classNames":"","plainText":" omencss css class example minimum value maximum value step mx size mx-1px margin-inline: 1px; mx-0px mx-100px 1px mx-neg size mx-neg-1px margin-inline: -1px; mx-neg-100px mx-neg-1px 1px add horizontal margin control the horizontal margin on the right and left margin-inline use the mx size utility the horizontal margin class range is from negative -100 to positive 100 uses pixel and the px postfix the steps are + 1px e g `mx-0px mx-1px mx-100px` additionally you can also use rem values reminder: 1rem = 10px the rem margin class range is from negative -30 to positive 30 and uses the rem postfix the steps are + 1rem e g `mx-0rem mx-1rem mx-30rem` 💡 margin-inline can mainly be display in modern browsers with the latest updates instead you can also use margin left and right docs spacing-margin-side  active focus and hover states omencss css class example range active:mx size active :mx-1px:active margin-inline: 1px; active:mx-neg-100px to active:mx-100px focus:mx size focus :mx-1px:focus margin-inline: 1px; focus:mx-neg-100px to focus:mx-100px hover:mx size hover :mx-1px:focus margin-inline: 1px; hover:mx-neg-100px to hover:mx-100px omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:mx-10px` to only apply the mx-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:mx-10px md: 480px 768px md:mx-10px lg: 768px 1080px lg:mx-10px omencss media queries can also be combined with active focus and hover states for example use `sm:mx-10px` to apply the mx-10px utility at only small screen sizes at or below 480px or `active:md:mx-10px` to apply the mx-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` active focus hover : media query :mx size ` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:mx focus:mx hover:mx active margin inline focus margin inline hover margin inline active:sm:mx focus:sm:mx hover:sm:mx active small screens margin inline focus small screens margin inline hover small screens margin inline active:md:mx focus:md:mx hover:md:mx active medium screens margin inline focus medium screens margin inline hover medium screens margin inline active:lg:mx focus:lg:mx hover:lg:mx active large screens margin inline focus large screens margin inline hover large screens margin inline sources margin-inline https: developer mozilla org en-us docs web css margin-inline "}},{"slug":"spacing-margin-side","frontmatter":{"isBlog":false,"title":"margin side","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s margin to its sides.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"spacing","author":"severin glaser","keywords":"margin, negative margin, spacing, margin-top, margin-right, margin-bottom, margin-left","classNames":"","plainText":" omencss css class example minimum value maximum value step m t r b l size mt-1px margin-top: 1px; mt-0px mt-100px 1px m t r b l -neg size mt-neg-1px margin-top: -1px; mt-neg-100px mt-neg-1px 1px m t r b l size mt-1rem margin-top: 0rem; mt-0rem mt-30rem 1px m t r b l -neg size mt-neg-30rem margin-top: -30rem; mt-neg-30rem mt-neg-1rem 1px add margin to specific side control the margin on a specific side such as top right bottom or left margin-top margin-right margin-bottom margin-left use the `m t r b l size ` utility the margin class range is from negative -100 to positive 100 uses pixel and the px postfix the steps are + 1px e g `mt-0px mt-1px mt-100px` additionally you can also use rem values reminder: 1rem = 10px the rem margin class range is from negative -30 to positive 30 and uses the rem postfix the steps are + 1rem e g `mt-0rem mt-1rem mt-30rem`  💡 how to use symmetrical margin on every side? have a closer look at margin docs spacing-margin active focus and hover states omencss css class example range active:mt size active :mt-1px:active margin-top: 1px; active:mt-neg-100px to active:mt-100px focus:mt size focus :mt-1px:focus margin-top: 1px; focus:mt-neg-100px to focus:mt-100px hover:mt size hover :mt-1px:focus margin-top: 1px; hover:mt-neg-100px to hover:mt-100px omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:mt-10px` to only apply the mt-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:mt-10px md: 480px 768px md:mt-10px lg: 768px 1080px lg:mt-10px omencss media queries can also be combined with active focus and hover states for example use `sm:mt-10px` to apply the mt-10px utility at only small screen sizes at or below 480px or `active:md:mt-10px` to apply the mt-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` active focus hover : media query :m t r b l size ` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:mt active:mr active:mb active:ml active margin top active margin right active margin bottom active margin left focus:mt focus:mr focus:mb focus:ml focus margin top focus margin right focus margin bottom focus margin left hover:mt hover:mr hover:mb hover:ml hover margin top hover margin right hover margin bottom hover margin left sources margin-top https: developer mozilla org en-us docs web css margin-top margin-right https: developer mozilla org en-us docs web css margin-right margin-bottom https: developer mozilla org en-us docs web css margin-bottom margin-left https: developer mozilla org en-us docs web css margin-left "}},{"slug":"spacing-margin-vertical","frontmatter":{"isBlog":false,"title":"margin vertical","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s margin to its vertical sides.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"spacing","author":"severin glaser","keywords":"margin, negative margin, spacing, margin-block","classNames":"","plainText":" omencss css class example minimum value maximum value step my size my-1px margin-block: 1px; my-0px my-100px 1px my-neg size my-neg-1px margin-block: -1px; my-neg-100px my-neg-1px 1px add vertical margin control the vertical margin on the top and bottom margin-block use the my size utility the vertical margin class range is from negative -100 to positive 100 uses pixel and the px postfix the steps are + 1px e g `my-0px my-1px my-100px` additionally you can also use rem values reminder: 1rem = 10px the rem margin class range is from negative -30 to positive 30 and uses the rem postfix the steps are + 1rem e g `my-0rem my-1rem my-30rem` 💡 margin-block can mainly be display in modern browsers with the latest updates instead you can also use margin top and bottom docs spacing-margin-side  active focus and hover states omencss css class example range active:my size active :my-1px:active margin-block: 1px; active:my-neg-100px to active:my-100px focus:my size focus :my-1px:focus margin-block: 1px; focus:my-neg-100px to focus:my-100px hover:my size hover :my-1px:focus margin-block: 1px; hover:my-neg-100px to hover:my-100px omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:my-10px` to only apply the my-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:my-10px md: 480px 768px md:my-10px lg: 768px 1080px lg:my-10px omencss media queries can also be combined with active focus and hover states for example use `sm:my-10px` to apply the my-10px utility at only small screen sizes at or below 480px or `active:md:my-10px` to apply the my-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` active focus hover : media query :my size ` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:my focus:my hover:my active margin block focus margin block hover margin block active:sm:my focus:sm:my hover:sm:my active small screens margin block focus small screens margin block hover small screens margin block active:md:my focus:md:my hover:md:my active medium screens margin block focus medium screens margin block hover medium screens margin block active:lg:my focus:lg:my hover:lg:my active large screens margin block focus large screens margin block hover large screens margin block sources margin-block https: developer mozilla org en-us docs web css margin-block "}},{"slug":"spacing-margin","frontmatter":{"isBlog":false,"title":"margin","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s margin.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"spacing","author":"severin glaser","keywords":"margin, negative margin, spacing, css class, responsive","classNames":"","plainText":" omencss css class example minimum value maximum value step m size m-1px margin: 1px; m-0px m-100px 1px m-neg size m-neg-1px margin: -1px; m-neg-100px m-neg-1px 1px m size m-1rem margin: 0rem; m-0rem m-30rem 1rem m-neg size m-neg-30rem margin: -30rem; m-neg-30rem m-neg-1rem 1rem add margin to all sides control the margin on all sides of an html element by using the m size utility the pixel margin class range is from negative -100 to positive 100 and uses the px postfix the steps are + 1px e g `m-0px m-1px m-100px` additionally you can also use rem values reminder: 1rem = 10px the rem margin class range is from negative -30 to positive 30 and uses the rem postfix the steps are + 1rem e g `m-0rem m-1rem m-30rem`  💡 how to use margin on a specific side? have a closer look at margin top right bottom and left docs spacing-margin-side active focus and hover states omencss css class example range active:m size active :m-1px:active margin: 1px; active:m-neg-100px to active:m-100px focus:m size focus :m-1px:focus margin: 1px; focus:m-neg-100px to focus:m-100px hover:m size hover :m-1px:focus margin: 1px; hover:m-neg-100px to hover:m-100px omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:m-10px` to only apply the m-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:m-10px md: 480px 768px md:m-10px lg: 768px 1080px lg:m-10px omencss media queries can also be combined with active focus and hover states for example use `sm:m-10px` to apply the m-10px utility at only small screen sizes at or below 480px or `active:md:m-10px` to apply the m-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` active focus hover : media query :m size ` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:m size focus:m size hover:m size active margin focus margin hover margin active:sm:m size focus:sm:m size hover:sm:m size active small screens margin focus small screens margin hover small screens margin active:md:m size focus:md:m size hover:md:m size active medium screens margin focus medium screens margin hover medium screens margin active:lg:m size focus:lg:m size hover:lg:m size active large screens margin focus large screens margin hover large screens margin sources margin https: developer mozilla org en-us docs web css margin "}},{"slug":"spacing-padding-horizontal","frontmatter":{"isBlog":false,"title":"padding horizontal","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s padding to its horizontal sides.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"spacing","author":"severin glaser","keywords":"padding, negative padding, spacing, padding-inline","classNames":"","plainText":" omencss css class example minimum value maximum value step px size px-1px padding-inline: 1px; px-0px px-100px 1px px-neg size px-neg-1px padding-inline: -1px; px-neg-100px px-neg-1px 1px add horizontal padding control the horizontal padding on the right and left padding-inline use the px size utility the horizontal padding class range is from negative -100 to positive 100 uses pixel and the px postfix the steps are + 1px e g `px-0px px-1px px-100px` additionally you can also use rem values reminder: 1rem = 10px the rem padding class range is from negative -30 to positive 30 and uses the rem postfix the steps are + 1rem e g `px-0rem px-1rem px-30rem` 💡 padding-inline can mainly be display in modern browsers with the latest updates instead you can also use padding left and right docs spacing-padding-side  active focus and hover states omencss css class example range active:px size active :px-1px:active padding-inline: 1px; active:px-neg-100px to active:px-100px focus:px size focus :px-1px:focus padding-inline: 1px; focus:px-neg-100px to focus:px-100px hover:px size hover :px-1px:focus padding-inline: 1px; hover:px-neg-100px to hover:px-100px omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:px-10px` to only apply the px-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:px-10px md: 480px 768px md:px-10px lg: 768px 1080px lg:px-10px omencss media queries can also be combined with active focus and hover states for example use `sm:px-10px` to apply the px-10px utility at only small screen sizes at or below 480px or `active:md:px-10px` to apply the px-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` active focus hover : media query :px size ` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:px focus:px hover:px active padding inline focus padding inline hover padding inline active:sm:px focus:sm:px hover:sm:px active small screens padding inline focus small screens padding inline hover small screens padding inline active:md:px focus:md:px hover:md:px active medium screens padding inline focus medium screens padding inline hover medium screens padding inline active:lg:px focus:lg:px hover:lg:px active large screens padding inline focus large screens padding inline hover large screens padding inline sources padding-inline https: developer mozilla org en-us docs web css padding-inline "}},{"slug":"spacing-padding-side","frontmatter":{"isBlog":false,"title":"padding side","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s padding to its sides.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"spacing","author":"severin glaser","keywords":"padding, negative padding, spacing, padding-top, padding-right, padding-bottom, padding-left","classNames":"","plainText":" omencss css class example minimum value maximum value step p t r b l size pt-1px padding-top: 1px; pt-0px pt-100px 1px p t r b l -neg size pt-neg-1px padding-top: -1px; pt-neg-100px pt-neg-1px 1px p t r b l size pt-1rem padding-top: 0rem; pt-0rem pt-30rem 1rem p t r b l -neg size pt-neg-30rem padding-top: -30rem; pt-neg-30rem pt-neg-1rem 1rem add padding to specific side control the padding on a specific side such as top right bottom or left padding-top padding-right padding-bottom padding-left use the p t r b l size utility the padding class range is from negative -100 to positive 100 uses pixel and the px postfix the steps are + 1px e g `pt-0px pt-1px pt-100px` additionally you can also use rem values reminder: 1rem = 10px the rem padding class range is from negative -30 to positive 30 and uses the rem postfix the steps are + 1rem e g `pt-0rem pt-1rem pt-30rem`  💡 how to use symmetrical padding on every side? have a closer look at padding docs spacing-padding active focus and hover states omencss css class example range active:pt size active :pt-1px:active padding-top: 1px; active:pt-neg-100px to active:pt-100px focus:pt size focus :pt-1px:focus padding-top: 1px; focus:pt-neg-100px to focus:pt-100px hover:pt size hover :pt-1px:focus padding-top: 1px; hover:pt-neg-100px to hover:pt-100px omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:pt-10px` to only apply the pt-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:pt-10px md: 480px 768px md:pt-10px lg: 768px 1080px lg:pt-10px omencss media queries can also be combined with active focus and hover states for example use `sm:pt-10px` to apply the pt-10px utility at only small screen sizes at or below 480px or `active:md:pt-10px` to apply the pt-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` active focus hover : media query :p t r b l size ` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:pt active:pr active:pb active:pl active padding top active padding right active padding bottom active padding left focus:pt focus:pr focus:pb focus:pl focus padding top focus padding right focus padding bottom focus padding left hover:pt hover:pr hover:pb hover:pl hover padding top hover padding right hover padding bottom hover padding left sources padding-top https: developer mozilla org en-us docs web css padding-top padding-right https: developer mozilla org en-us docs web css padding-right padding-bottom https: developer mozilla org en-us docs web css padding-bottom padding-left https: developer mozilla org en-us docs web css padding-left "}},{"slug":"spacing-padding-vertical","frontmatter":{"isBlog":false,"title":"padding vertical","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s padding to its vertical sides.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"spacing","author":"severin glaser","keywords":"padding, negative padding, spacing, padding-block","classNames":"","plainText":" omencss css class example minimum value maximum value step py size py-1px padding-block: 1px; py-0px py-100px 1px py-neg size py-neg-1px padding-block: -1px; py-neg-100px py-neg-1px 1px add vertical padding control the vertical padding on the top and bottom padding-block use the py size utility the vertical padding class range is from negative -100 to positive 100 uses pixel and the px postfix the steps are + 1px e g `py-0px py-1px py-100px` additionally you can also use rem values reminder: 1rem = 10px the rem padding class range is from negative -30 to positive 30 and uses the rem postfix the steps are + 1rem e g `py-0rem py-1rem py-30rem` 💡 padding-block can mainly be display in modern browsers with the latest updates instead you can also use padding top and bottom docs spacing-padding-side  active focus and hover states omencss css class example range active:py size active :py-1px:active padding-block: 1px; active:py-neg-100px to active:py-100px focus:py size focus :py-1px:focus padding-block: 1px; focus:py-neg-100px to focus:py-100px hover:py size hover :py-1px:focus padding-block: 1px; hover:py-neg-100px to hover:py-100px omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:py-10px` to only apply the py-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:py-10px md: 480px 768px md:py-10px lg: 768px 1080px lg:py-10px omencss media queries can also be combined with active focus and hover states for example use `sm:py-10px` to apply the py-10px utility at only small screen sizes at or below 480px or `active:md:py-10px` to apply the py-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` active focus hover : media query :py size ` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:py focus:py hover:py active padding block focus padding block hover padding block active:sm:py focus:sm:py hover:sm:py active small screens padding block focus small screens padding block hover small screens padding block active:md:py focus:md:py hover:md:py active medium screens padding block focus medium screens padding block hover medium screens padding block active:lg:py focus:lg:py hover:lg:py active large screens padding block focus large screens padding block hover large screens padding block sources padding-block https: developer mozilla org en-us docs web css padding-block "}},{"slug":"spacing-padding","frontmatter":{"isBlog":false,"title":"padding","date":"apr 06. 2022","excerpt":"utility classes for controlling an element`s padding.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"spacing","author":"severin glaser","keywords":"padding, negative padding, spacing, css class, responsive","classNames":"","plainText":" omencss css class example minimum value maximum value step p size p-1px padding: 1px; p-0px p-100px 1px p-neg size p-neg-1px padding: -1px; p-neg-100px p-neg-1px 1px p size p-1rem padding: 0rem; p-0rem p-30rem 1rem p-neg size p-neg-30rem padding: -30rem; p-neg-30rem p-neg-1rem 1rem add padding to all sides control the padding on all sides of an html element by using the p size utility the pixel padding class range is from negative -100 to positive 100 and uses the px postfix the steps are + 1px e g `p-0px p-1px p-100px` additionally you can also use rem values reminder: 1rem = 10px the rem padding class range is from negative -30 to positive 30 and uses the rem postfix the steps are + 1rem e g `p-0rem p-1rem p-30rem`  💡 how to use padding on a specific side? have a closer look at padding top right bottom and left docs spacing-padding-side active focus and hover states omencss css class example range active:p size active :p-1px:active padding: 1px; active:p-neg-100px to active:p-100px focus:p size focus :p-1px:focus padding: 1px; focus:p-neg-100px to focus:p-100px hover:p size hover :p-1px:focus padding: 1px; hover:p-neg-100px to hover:p-100px omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:p-10px` to only apply the p-10px utility on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:p-10px md: 480px 768px md:p-10px lg: 768px 1080px lg:p-10px omencss media queries can also be combined with active focus and hover states for example use `sm:p-10px` to apply the p-10px utility at only small screen sizes at or below 480px or `active:md:p-10px` to apply the p-10px utility at only between small screen sizes 480px and medium screen sizes 768px 1 the structure is as follows: ` active focus hover : media query :p size ` executive summary when you vocalize the class names it helps you to learn and remember the classes as well as the structure you can say: omencss class names spoken example active:p size focus:p size hover:p size active padding focus padding hover padding active:sm:p size focus:sm:p size hover:sm:p size active small screens padding focus small screens padding hover small screens padding active:md:p size focus:md:p size hover:md:p size active medium screens padding focus medium screens padding hover medium screens padding active:lg:p size focus:lg:p size hover:lg:p size active large screens padding focus large screens padding hover large screens padding sources padding https: developer mozilla org en-us docs web css padding "}},{"slug":"spacing-variables","frontmatter":{"isBlog":false,"title":"spacing variables","date":"apr 06. 2022","excerpt":"utility classes for controlling custom spacing variables.","cover*image":"/images/blog/cover/default-image-blog.webp","category":"spacing","author":"severin glaser","keywords":"spacing, margin, padding, auto","classNames":"","plainText":" omencss css class example m-auto w-auto margin: auto; mx-auto mx-auto margin-inline: auto; my-auto my-auto margin-block: auto; mt-auto mt-auto margin-top: auto; mr-auto mr-auto margin-right: auto; mb-auto mb-auto margin-bottom: auto; ml-auto ml-auto margin-left: auto; p-auto p-auto padding: auto; px-auto px-auto padding-inline: auto; py-auto py-auto padding-block: auto; pt-auto pt-auto padding-top: auto; pr-auto pr-auto padding-right: auto; pb-auto pb-auto padding-bottom: auto; pl-auto pl-auto padding-left: auto; custom sizing variables control the margin auto or padding auto classes on every html element by using the omencss classes shown above  active focus and hover states omencss css class example active: variable active :m-auto:active margin: auto; focus: variable focus :m-auto:focus margin: auto; hover: variable hover :m-auto:focus margin: auto; omencss let you conditionally apply utility classes for different page states thereby different variant modifiers are being used for example use `hover:m-auto` to only apply the m-auto utility class on hover  responsive breakpoints use variant modifiers to target media queries like responsive breakpoints media query range omencss example sm: 0px 480px sm:m-auto md: 480px 768px md:m-auto lg: 768px 1080px lg:m-auto omencss media queries can also be combined with active focus and hover states for example use `sm:m-auto` to apply the `m-auto` utility at only small screen sizes at or below 480px or `active:md:m-auto` to apply the `m-auto` utility class only at medium screen sizes 480px 768px and on active state 1 the structure is as follows: ` conditional state : media query : classname ` p e `active:md:m-auto` "}},{"slug":"how-to-create-a-responsive-hero-section","frontmatter":{"isBlog":true,"title":"create a responsive hero section for your website","date":"apr 06. 2022","excerpt":"design and code a simple, modern and responsive 2 grid hero section for your landing page.","cover_image":"/images/blog/cover/stones-hero.webp","category":"tutorial","author":"severin glaser","keywords":"hero section, hero, landing page, website","classNames":"","plainText":" this is a tutorial to create a hero section for your website by using omencss the aim is to create a responsive layout and a stunning first impression for your website check the html entire-source-code-for-a-html-site or nextjs react code snippets nextjs react-source-code in order to get started right away and if you know how css works this tutorial requires omencss to be installed see the tutorial on how to get started blog what-is-omencss get-started-now right away a live hero section example examples hero is online start coding html to get started you can download the hero image here https: omencss com images blog blogcontent hero-image webp the entire project is wrapped in a `container` class for the responsive appearance a grid system will used the setup is straightforward the project let us build a smooth transition for the button and a responsive layout for an awesome first impression for your website the design idea for the hero section comes from https: www figma com community file 1087825555350003165 website-hero-sections-figma-template-%7c-brix-templates which is licensed under cc by 4 0 this is what we will code in under 5 minutes: ! reduce file size images blog blogcontent hero-section webp?style=centerme the navbar 1 first a navigation bar is created this consists of a `flex` element that separates the left and right side with witespace for this purpose `justify-between` is used the button on the right side has four states the default with `bg-blue` the hover `hover:bg-blue-5` the active `active:bg-blue-3` and the focus `focus:bg-blue-7`state for a smooth and professional transition `transition-all` and `transition-duration-500ms` should be used  set the grid to get a responsive layout for the hero section a parent element must consist of a grid system the following code snippet can be used for this by default it consists of 2 columns `grid-col-2` with a gap of 30pixel small and medium screens use `grid-col-1` where the whole width is used  left hero part 1 the left side is quite common it consists only of text blocks which have a different font-size font-color and font-weight  right hero part 1 the right side is also easy to handle since we are using an image the image can be implemented as a background image or as an ` img ` tag in this section we will cover both solutions again `col-span-1` and relative heights and widths are used to give the image the desired dimensions  image as background image a div is inserted inside the right hero section right-hero-part the image is adjusted by means of the style properties note: `background-position: '60% 40%'` is being used to focus the image adjuste the values as needed for your image  image with the img-tag an img element is inserted inside the right hero section right-hero-part  html source code  nextjs react source code 1 create a new function in your components folder and `import image from 'next image'` the structure is the same as in the html example only the style tags change and instead of a background image or the image tag the image component of nextjs will be used  "}},{"slug":"how-to-delete-unused-css-classes","frontmatter":{"isBlog":true,"title":"how to delete unused css classes in 2022","date":"mar 06. 2022","excerpt":"make your website loading time 99% faster, by removing unused css classes with purgecss.","cover_image":"/images/blog/cover/remove.webp","category":"postbuild","author":"severin glaser","keywords":"purge css, remove css, development environement, post build","classNames":"","plainText":" this is a tutorial to remove unused omencss classes in vanilla html 5 it works for either your own css3 classes and or for omencss classes fact! omencss is massive this is quite ok in the development environment as soon as your code is released to the public you need to make the files as lightweight as possible for this reason you will be shown here how to properly reduce the file size lose weight with purgecss ! reduce file size images blog blogcontent lightweight-file-size webp?style=centerme the entire file was reduced by 99 4% march 2022 in this example all unused css classes are excluded as a result seo scores are improved user experience is enhanced and your website looks more professional as load times are kept to a minimum it is really easy and only takes a few minutes! in this example a simple html file is resized with purge css html !doctype html html lang=en class=sans head meta charset=utf-8 meta http-equiv=x-ua-compatible content=ie=edge meta name=viewport content=width=device-width initial-scale=1 0 title beautiful purgecss vs omencss file title link rel=stylesheet href= css omen css link rel=shortcut icon type=image x-icon href= favicon ico head body section class=flex min-h-100vh gradient-to-right from-red-5 to-orange-2 div class=m-auto reveal-down animate animation-forwards animation-delay-500ms h1 class=max-w-60rem font-800 text-80px text-black sm:text-purple sm:text-40px md:text-red md:text-60px a classy way to write css design h1 div section body html in summary there is a h1 header which has a black default colour and a font size of 80px on medium screens the font-size reduce to 60px and on small screens the font-size reduce to 40px omencss uses special characters for the responsive classes sm: md: lg: sm: hover: active: focus: this is a headache for most post-css libraries as they are designed for normal css classes for this reason purgecss is used in this example a node must be installeda and a package json file must be included in the root folder of your project you can easily create a package json by running npm init -y in the root folder npm npm i -d purgecss 1 save purgecss as a development dependency in your project 2 in a further step a purgecss config js must be created in the root directory of your project js purgecss config js module exports = content: 'src index html' css: 'src omencss css' defaultextractor: content = content match w- : + ? !: g output: 'css omen css' 1 as content enter all your html source files 2 in css import the default omencss css file 3 defaultextractor must be adopted like and copied this as the special regex are applied here 4 in output select your public folder where the lightweight css file should be saved 5 in the html file make sure that the correct css stylesheet is selected the path must be the same as entered in the output html link rel=stylesheet href= css omen css now it is time to reduce the css file via the command line for this you have to create a script in the package json file purgecss: purgecss --config purgecss config js json name: awesome-purging version: 1 0 0 description: main: index js scripts: purgecss: purgecss --config purgecss config js keywords: author: license: isc devdependencies: purgecss: ^4 1 3 you can now purge your css infinitely enter the script npm run purgecss in the command line which takes a short moment until you get the output ⚠️ every time you change your css classes in the html file you have to purge again todo: add --watch for auto detecting changes "}},{"slug":"omencss-animations","frontmatter":{"isBlog":true,"title":"simplest way to add beautiful css animations in 2022","date":"feb 24. 2022","excerpt":"create simple, unique and professional looking css animations for your website.","cover_image":"/images/blog/cover/motion_qn0fvq.webp","category":"animation","author":"severin glaser","keywords":"animation, css animations, stagger animation, react, javascript","classNames":"","plainText":" in this tutorial we will show you how to use over 100 different animation types for your website - with one line of code! how to stagger css animations ok honestly! this hardly works without javascript for this reason a stagger effect will be demonstrated based on the mobile navigation bar in nextjs ! nav result images blog blogcontent mobile-nav edkd2s gif?style=centerme js const menu = title: 'home' path: ' ' title: 'brand' path: ' brand' title: 'blog' path: ' blog' ul classname='text-16px text-black flex justify-center items-center min-h-100per flex-col text-left' li menu map item index = return link key= index href= item path a style= textdecoration: 'none' cursor: 'pointer' h3 classname= p-20px clip-inset-in-top animate animation-forwards animation-delay- index + 1 1 00ms item title h3 a link li ul in summary we map over the menu function special attention should be paid to the h3 tag it contains all the classes for the animation js h3 classname= clip-inset-in-top animate animation-forwards animation-delay- index + 1 1 00ms item title h3 1 in total only 4 css classes are necessary for achieving this animation 2 clip-inset-in-top is the animation type 3 animate is the default omencss animation-duration property which lasts for 750ms 4 animation-forwards signifies that the animation should retain the current condition after completion 5 animation-delay- index + 1 1 00ms is the most important part for the stagger effect it is conditional and tied to the index the actual calculation takes place at this point index + 1 1 as a result each mapped element gets a different animation delay home has an animation-delay of 100ms brand has an animation-delay of 200ms and blog has an animation-delay of 300ms the different delays create a stagger effect a graphical overview for all animations can be found on the examples page docs animation example what exactly is a vanilla css animation? an animation represents a process which generates a moving frame for the viewer by creating and displaying individual sequences of pixels especially in web development animations can make the difference between a good and a perfect website however it should be used with caution because the boundary between perfect and too much may mean the complete opposite of what was originally intended cascading style sheets css animations usually consist of @keyframes and have different properties such as animation-name animation-duration animation-delay animation-iteration-count animation-direction animation-timing-function animation-fill-mode or animation if you use omencss you don't need to code anything omencss contains over 100 different css animations all of them are handmade a graphical overview of all animations can be found on the examples page docs animation example why you should use animations the collaboration of design and code plays an important role especially in web development nowadays a beautiful website is more or less easy to create however bringing a web application alive is more difficult the keyword for this process is animation animation originates from the latin verb animare and means as much as spirit life breath or simply to bring to life become dynamic make your beautiful website shine! "}},{"slug":"responsive-omencss-breakpoints","frontmatter":{"isBlog":true,"title":"how to use responsive omencss breakpoints?","date":"mar 27. 2022","excerpt":"responsive breakpoints - small, medium, large screens or default values.","cover_image":"/images/blog/cover/breakpoints.webp","category":"information","author":"severin glaser","keywords":["omencss","tutorial","reference","guide","breakpoints"],"classNames":"","plainText":" this article introduces omencss’s responsive breakpoints the motto is not just mobile first we want to ensure that every screen looks amazing for this reason the breakpoints are divided into the following three classes: sm: md: lg: use variant modifiers to target media queries like responsive breakpoints media query range omencss example - - sm: 0px - 480px sm:m-10px md: 480px - 768px md:m-10px lg: 768px - 1080px lg:m-10px omencss media queries can also be combined with active focus and hover states for example use sm:m-10px to apply the 10px margin utility at only small screen sizes at or below 480px or active:md:m-10px to apply the m-10px utility only between small screen sizes 480px and medium screen sizes 768px if you use lg-m-10px the margin of 10px will only be set between 768px and 1080px if you want to use standard values for all screens you can use the default class name: m-10px 1 the structure is as follows: conditional state : media query : classname size p e active:md:m-10px "}},{"slug":"what-is-omencss","frontmatter":{"isBlog":true,"title":"what is omencss? - an animated dynamic css library","date":"feb 24. 2022","excerpt":"omencss - an elegant way to write css design. always free, for anyone with any framework.","cover_image":"/images/blog/cover/default-image-blog.webp","category":"information","author":"severin glaser","keywords":["omencss","tutorial","reference","guide","installation"],"classNames":"","plainText":" this article introduces omencss omencss is a class-based css library the primary focus is on responsive design as the credo is all screens first which stands in contrast to the common mobile first especially in the coming years the demand for multiple design solutions and the coverage for a wide range of devices will considerably increase while the most popular css libraries mainly specialize for javascript frameworks the intention of omencss is to be accessible for everybody this means that omencss will always be free and the source code is publicly available mit license since the library is built with scss omencss can be used on all frameworks like django flask react vue next nuxt laravel and even on vanilla html - just to name a few examples 1 omencss is responsive - write html design for smartphone tablet screenreader laptop desktop or 4k screens 2 omencss is dynamic - no additional library for animations is necessary all animations are already implemented examples can be viewed here https www omen design docs animation example 3 omencss is mit licensed the source code can be viewed here https github com se-gl omencss what exactly is omencss? for the completion of my bachelor thesis at code university in berlin in software development i decided to create a open source css library the principle as well as the usability should be as simple as possible in addition to the core library custom html elements are planned to be developed e g to provide animations on scroll or to create further reusable components as of february 2022 in addition a separate implementation of a purge function to exclude unnecessary css classes is planned the advantage is obvious the lighter your production website is the better the user experience and in turn the better your seo scores get started now do not be afraid start writing beautiful animated design in a new dimension shell npm i do you have any suggestions do you want to support me or do you want to report a bug do not hesitate to contact me mailto info@omencss dev "}}]
    